//STL Standard Template Library
//containers: vector, list, map, set, queue, stack, array, etc.
#include <iostream>
#include <vector>
#include <list>
#include <map>
#include <string>
using namespace std;

void f1(int A[], int size) {//the same as void f1(int * A, int size){

	//cout << sizeof(A) / sizeof(int) << endl; won't work
	
}

int main() {
	int A[10];
	cout << sizeof(A) / sizeof(int) << endl;
	f1(A, 10);
	string s1 = "This is very useful!";

	//STL

	//vector<int> vector of int
	//vector<vector<int>>  vector of (vector of int)
	//vector<int *> vector of pointers to int
	//vector<vector<int> *>  vector of pointers to vector of int


	//vector
	vector<int> V1 { 3,4,5,6,7 };
	cout << V1.size() << " " << V1[2] << " " << V1.front() << " " << V1.back() << endl;//5 5 3 7
	vector<int> V2(10, 3);//10 elements; all with initial value 3
	vector<int> V3(6); //6 elements; all with intial value 0
	V1.push_back(8); //add new element8 to the back to vector
	V1.pop_back(); //remove the last element of the vector

	for (int i : V1) { cout << i << " "; i++; } //call by value
	cout << endl;
	for (int i : V1) { cout << i << " "; }
	cout << endl;

	for (int &i : V1) { cout << i << " "; i++; } //call by ref
	cout << endl;
	for (int i : V1) { cout << i << " "; }
	cout << endl;
	
	//Iterator
	vector<int>::iterator it1 = V1.begin(), it2 = V1.end();
	auto it3 = V1.begin();
	//begin() returns the address of first element
	//end()returns the address after the last element

	for (auto it6 = V1.begin(); it6 != V1.end(); it6++) {
		cout << *it6 << " ";
	}

	auto it10 = V1.begin() + 4;


	//list
	list<int> L1{ 25, 10,11,12,13,14, 5 };
	cout << L1.size() << " " << L1.front() << " " << L1.back() << endl;
	//does not support subscript as in array or vector
	L1.push_back(100);
	L1.pop_back();
	L1.push_front(200);
	L1.pop_front();
	for (auto i : L1) { cout << i << " "; }
	cout << endl;
	for (auto it7 = L1.begin(); it7 != L1.end(); it7++) { cout << *it7 << " "; }
	cout << endl;
	L1.sort(); //only list supports sort, not vector
	for (auto i : L1) { cout << i << " "; }
	cout << endl;

	auto it8 = find(V1.begin(), V1.end(), 5);//return the address of the first match or V1.end() if no match
	if (it8 != V1.end()) V1.erase(it8);
	//V1.begin() can be written as begin(V1)

	auto it9 = find(L1.begin(), L1.end(), 12);
	if (it9 != L1.end()) L1.erase(it9);

	auto it11 = L1.begin()++;//only allow ++ or--
	L1.remove(14);//only list support remove
	//delete the first element with value 14
	//do nothing if no match

	//map

	map<int, string> M1{ {25, "Mary"}, {11, "Dan"}, {6, "Sanjay"} };
	cout << M1[11] << endl;//will print Dan
	//the two data items are referred to as key and value
	M1[35] = "Steve";//adding {35, "Steve"} to M1
	M1[25] = "Nancy"; //will override {25, "Mary"}

	for (auto i : M1) { cout << i.first << " " << i.second << "    "; }
	cout << endl;
	for (auto it12 = M1.begin(); it12 != M1.end(); it12++) {
		cout << it12->first << " " << it12->second << "    ";
	}

	


	



}

