//Linked List Operations
#include <iostream>//cin and cout
using namespace std;
class Node {
public:
	int value;
	Node* next;
	Node() { next = nullptr; }//default constructor
	Node(int i) { value = i; next = nullptr; }//constructor

};

class LinkedList {
public:
	Node* head;
	LinkedList() { head = nullptr; }
	void makeList(int m, int n);//create a linked list of m nodes with 
	//values randomly distrubuted in 0..n-1
	void printList();
	void reverse();
	void sort();
	void removeOne(int k);//delete the first node with value k
};
void LinkedList::makeList(int m, int n) {
	for (int i = 0; i < m; i++) {
		Node* p = new Node(rand() % n);
		p->next = head;
		head = p;
	}
}

void LinkedList::printList() {
	Node* p = head;
	cout << endl;
	while (p) { cout << p->value << " ";  p = p->next; }
}

void LinkedList::reverse() {
	if (!head || !head->next) return;//return if 0 or 1 node
	Node* p1 = head, * p2, * p3;
	p2 = p1->next;
	while (p2) {
		p3 = p2->next;
		p2->next = p1;
		if (p1 == head) p1->next = nullptr;
		p1 = p2;
		p2 = p3;
	}
	head = p1;
}
void LinkedList::sort() { //selection sort
	if (!head || !head->next) return;//if 0 or 1 node, return;
	Node* p1 = head, * p2;
	int min;
	Node* p_min;
	while (p1) {
		min = p1->value;
		p_min = p1;
		p2 = p1->next;
		while (p2) {
			if (p2->value < min) {
				min = p2->value;
				p_min = p2;
			}
			p2 = p2->next;
		}
		p_min->value = p1->value;
		p1->value = min;
		p1 = p1->next;
	}
}

void LinkedList::removeOne(int k) {
	if (!head) return;//if 0 node in the linked list
	Node* p1 = head, * p2;
	if (head->value == k) { head = head->next; delete p1; return; }
	p2 = p1->next;
	while (p2) {
		if (p2->value == k) {
			p1->next = p2->next;
			delete p2;
			return;
		}
		p1 = p2;
		p2 = p2->next;
	}
}

int main() {
	LinkedList L1;
	L1.makeList(10, 15);
	L1.printList();
	L1.reverse();
	L1.printList();
	L1.sort();
	L1.printList();
	L1.removeOne(4);
	L1.printList();
	return 0;
}

