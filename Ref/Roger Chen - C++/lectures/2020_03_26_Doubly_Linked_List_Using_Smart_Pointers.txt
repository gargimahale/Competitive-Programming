

#include <iostream>
#include <memory>
using namespace std;

class node {
public:
	int value;
	shared_ptr<node> next;
	weak_ptr<node> previous;
	node() {}
	node(int k) { value = k; }
	~node() { }
};

class linked_list {
public:
	shared_ptr<node> head;
	shared_ptr<node> tail;
	//linked_list() { head = tail = nullptr; }
	linked_list() {}
	void make_random_list(int k, int m);//create a linked list of 
										//k nodes with values in 0 ..m-1 randomly
	void print_forward(); //Print values of all nodes from head node
	void print_reverse(); //Print values of all nodes reversely from tail node
	void reverse(); //Reverse the order of nodes of linked list				
	void sort(); //Sort the nodes, based on ascending order of node values

	void insert(int k); //Create a new node with values k, and properly add it to an already sorted list
						//After the insertion, the entire linked list is still sorted.
						//You are not allowed to invoke the function sort()

	void remove_all(int k); //Remove all nodes whose node values are equal to k

};
void linked_list::make_random_list(int k, int m) { //create linked list of k nodes with
												   //values randomly in 0 ... m-1
												   //node * p;
	shared_ptr<node> p;
	for (int i = 0; i < k; i++) {
		p = make_shared<node>(rand() % m);
		p->next = head;
		if (!head) {
			tail = p; head = p;
		}
		else {
			head->previous = p;
			head = p;
		}
	}

}

void linked_list::print_forward() {
	shared_ptr<node> p = head;
	cout << endl;
	while (p) {
		cout << p->value << " ";
		p = p->next;
	}
	cout << endl;
}

void linked_list::print_reverse() {
	shared_ptr<node> p = tail;
	cout << endl;
	while (p) {
		cout << p->value << " ";
		p = p->previous.lock();
	}
	cout << endl;
}

void linked_list::reverse() {
	if (!head) return;
	shared_ptr<node> p1 = head, p2, p3;
	while (p1) {
		p2 = p1->next;
		p1->next = p1->previous.lock();
		p1->previous = p2;
		p3 = p1; //this statement is very subtle
		p1 = p2;
	}
//the following swaps head and tail
	p2 = head;
	head = tail;
	tail = p2;
}


int main() {

	linked_list L1;
	L1.make_random_list(40, 15);
	L1.print_forward();
	L1.print_reverse();
	L1.reverse();
	L1.print_forward();
	L1.print_reverse();
	return 0;
}

