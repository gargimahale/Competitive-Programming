/*
Performance 
low level

*/


#include <iostream> //cin and cout
using namespace std;

class ThreeD {//Use class for user-defined data type
public:
	int ht;
	int wid;
	int dep;
	ThreeD(int i, int j, int k) { ht = i; wid = j; dep = k; }
	//constructor is for initializing object values

};

class node {
public:
	int value;
	node* next;
	node(int i) { value = i; next = nullptr; }
	//nullptr indicates that the pointer is not pointing to any object
	//Graphically, nullptr is represented by a ground symbol
};


int main() {
	int i;
	int k = 0;
	int j{ 5 };//most recent
	int w(10);

	char c1{ 'e' };
	//primitive data type: int, char, float, double, long, etc.

	ThreeD t1(3,4,5);
	cout << t1.ht << endl;

	cin >> t1.ht >> t1.wid >> t1.dep;
	cout << t1.ht << "  " << t1.wid << "  "<<t1.dep << endl;


	//pointer

	int* p1;//p1 is a pointer to int object
	//int * p1; int *p1;
	p1 = &j;//p1 has address of j as value

	cout << *p1 << endl; //* is a function which returns the value
	//stored in the address carried by p1
	//the same as cout << j << endl;

	*p1 = 100;//j is now 100

	//array structure
	int A1[5] = { 1,2,3,4,5 };
	cout << *A1 << endl; //Array name without subscript is the address
	//of the first element of the array
	//i.e., A is &A[0]

	cout << *(A1 + 2) << endl;//print A[2]
	cout << A1[7] << endl;

	cout << 2[A1] << endl;


	//dynamic memory allocation

	int* p2 = new int(7);
	//new is a funciton that will ask system to allocate a memory
	//space for an object, and returns the address of the memory
	//space.

	delete p2;//Remove the object pointed by p2 and returns the memory
	//space to system

	int* p3 = new int[5]; //Dynamically allocate an array of 5 int and return the 
	//the address of the first element
	delete[] p3; //Remove the entire array and return the memory address to system

	int A[3][4] = { {11,12,13,14}, {15,16,17,18},{19,20,21,22} };

	cout << A[1][2] << endl; //Will print 17 to console
	cout << *(*(A + 1) + 2) << endl; //Will print 17 to console
	cout << *(A[1] + 2) << endl; //Will print 17 to console
	cout << (*(A + 1))[2] << endl; //Will print 17 to console
	cout << *(&A[0][0] + 4 * 1 + 2) << endl; //Will print 17 to console

	//linked list

	node* head = nullptr;
	for (int i = 0; i < 5; i++) {
		node* p3 = new node(i + 1);
		p3->next = head;//(*p3).next = head;
		head = p3;
	}

	node* p4 = head;
	while (p4) {//while (p4 != nullptr)
		cout << p4->value << " ";
		p4 = p4->next;
	}
	cout << endl;


	return 0;
}