//Call (pass) by value vs Call (Pass) by reference
#include <iostream>//cin and cout
using namespace std;

void f1(int i) { i++; }//call by value
/*
A new copy is created and used inside the funciton. Any change of this copy will
not affect the original object.

*/

void f2(int& i) { i++; }//vall by ref
/*
The original copy is used inside the function, which can have a differnt name.
Any change inside the function will at the same time change the original object.
There is only one object inside and outside the function.

*/

void f3(const int& i) {  }//Any attempt to change value of i inside the funciton will cause compile time error.
//i is read-only inside the function

void f4(int A[], int size){
	//compiler will change it into
	//f4(int * A, int size)
	//When passing an array to a function, it always applies call by reference
	for (int i = 0; i < size; i++) A[i]++;

}

void f5(int a, int &b){}//Some pass by value and some pass by ref

int main() {
	int a = 10;
	f1(a);
	cout << a << endl;//10
	f2(a);
	cout << a << endl;//11

	int A[5] { 1,2,3,4,5 };
	f4(A, 5);
	for (int i = 0; i < 5; i++) cout << A[i] << " ";//2 3 4 5 6
	return 0;
}

