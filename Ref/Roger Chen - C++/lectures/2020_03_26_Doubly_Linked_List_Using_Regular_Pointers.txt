

#include <iostream>
#include <fstream>
using namespace std;

ofstream out("data1.txt");
class node {
public:
	int value;
	node * next;
	node * previous;
	node() { next = previous = nullptr; }
	node(int k) { value = k; next = previous = nullptr; }
};

class linked_list {
public:
	node * head;
	node * tail;
	linked_list() { head = tail = nullptr; }
	void make_random_list(int k, int m);//create a linked list of 
										//k nodes with values in 0 ..m-1 randomly
	void print_forward(); //Print values of all nodes from head node
	void print_reverse(); //Print values of all nodes reversely from tail node
	void reverse(); //Reverse the order of nodes of linked list				
	

	
	

};
void linked_list::make_random_list(int k, int m) { //create linked list of k nodes with
												   //values randomly in 0 ... m-1
	node * p;
	for (int i = 0; i < k; i++) {
		p = new node(rand() % m);
		p->next = head;
		if (head == nullptr) {
			tail = p; head = p;
		}
		else {
			head->previous = p;
			head = p;
		}
	}
}

void linked_list::print_forward() {
	node * p = head;
	out << endl;
	while (p != nullptr) {
		out << p->value << " ";
		p = p->next;
	}
}

void linked_list::print_reverse() {
	node * p = tail;
	out << endl;
	while (p != nullptr) {
		out << p->value << " ";
		p = p->previous;
	}
}

void linked_list::reverse() {
	if (head == nullptr) return;
	node * p1 = head, *p2;
	while (p1 != nullptr) {
		p2 = p1->next;
		p1->next = p1->previous;
		p1->previous = p2;
		p1 = p2;
	}
	p2 = head;
	head = tail;
	tail = p2;
}




int main() {

	linked_list L1;
	L1.make_random_list(60, 15);
	L1.print_forward();
	L1.print_reverse();
	L1.reverse();
	L1.print_forward();
	L1.print_reverse();
	return 0;
}

