{
	// Controls whether the editor shows CodeLens.
	"diffEditor.codeLens": false,

	// When enabled, the diff editor ignores changes in leading or trailing whitespace.
	"diffEditor.ignoreTrimWhitespace": true,

	// Timeout in milliseconds after which diff computation is cancelled. Use 0 for no timeout.
	"diffEditor.maxComputationTime": 5000,

	// Controls whether the diff editor shows +/- indicators for added/removed changes.
	"diffEditor.renderIndicators": true,

	// Controls whether the diff editor shows the diff side by side or inline.
	"diffEditor.renderSideBySide": true,

	// 
	//  - off: Lines will never wrap.
	//  - on: Lines will wrap at the viewport width.
	//  - inherit: Lines will wrap according to the `editor.wordWrap` setting.
	"diffEditor.wordWrap": "inherit",

	// Controls whether suggestions should be accepted on commit characters. For example, in JavaScript, the semi-colon (`;`) can be a commit character that accepts a suggestion and types that character.
	"editor.acceptSuggestionOnCommitCharacter": true,

	// Controls whether suggestions should be accepted on `Enter`, in addition to `Tab`. Helps to avoid ambiguity between inserting new lines or accepting suggestions.
	//  - on
	//  - smart: Only accept a suggestion with `Enter` when it makes a textual change.
	//  - off
	"editor.acceptSuggestionOnEnter": "on",

	// This setting is deprecated, editor will automatically choose the accessibility page size when we detect a screen reader. 2000 lines will be the new default.
	// Controls the number of lines in the editor that can be read out by a screen reader at once. When we detect a screen reader we automatically set the default to be 2000. Warning: this has a performance implication for numbers larger than the default.
	"editor.accessibilityPageSize": 10,

	// Controls whether the editor should run in a mode where it is optimized for screen readers. Setting to on will disable word wrapping.
	//  - auto: The editor will use platform APIs to detect when a Screen Reader is attached.
	//  - on: The editor will be permanently optimized for usage with a Screen Reader. Word wrapping will be disabled.
	//  - off: The editor will never be optimized for usage with a Screen Reader.
	"editor.accessibilitySupport": "auto",

	// Controls whether the editor should automatically close brackets after the user adds an opening bracket.
	//  - always
	//  - languageDefined: Use language configurations to determine when to autoclose brackets.
	//  - beforeWhitespace: Autoclose brackets only when the cursor is to the left of whitespace.
	//  - never
	"editor.autoClosingBrackets": "languageDefined",

	// Controls whether the editor should remove adjacent closing quotes or brackets when deleting.
	//  - always
	//  - auto: Remove adjacent closing quotes or brackets only if they were automatically inserted.
	//  - never
	"editor.autoClosingDelete": "auto",

	// Controls whether the editor should type over closing quotes or brackets.
	//  - always
	//  - auto: Type over closing quotes or brackets only if they were automatically inserted.
	//  - never
	"editor.autoClosingOvertype": "auto",

	// Controls whether the editor should automatically close quotes after the user adds an opening quote.
	//  - always
	//  - languageDefined: Use language configurations to determine when to autoclose quotes.
	//  - beforeWhitespace: Autoclose quotes only when the cursor is to the left of whitespace.
	//  - never
	"editor.autoClosingQuotes": "languageDefined",

	// Controls whether the editor should automatically adjust the indentation when users type, paste, move or indent lines.
	//  - none: The editor will not insert indentation automatically.
	//  - keep: The editor will keep the current line's indentation.
	//  - brackets: The editor will keep the current line's indentation and honor language defined brackets.
	//  - advanced: The editor will keep the current line's indentation, honor language defined brackets and invoke special onEnterRules defined by languages.
	//  - full: The editor will keep the current line's indentation, honor language defined brackets, invoke special onEnterRules defined by languages, and honor indentationRules defined by languages.
	"editor.autoIndent": "full",

	// Controls whether the editor should automatically surround selections when typing quotes or brackets.
	//  - languageDefined: Use language configurations to determine when to automatically surround selections.
	//  - quotes: Surround with quotes but not brackets.
	//  - brackets: Surround with brackets but not quotes.
	//  - never
	"editor.autoSurround": "languageDefined",

	// Code action kinds to be run on save.
	"editor.codeActionsOnSave": {},

	// Controls whether the editor shows CodeLens.
	"editor.codeLens": true,

	// Controls the font family for CodeLens.
	"editor.codeLensFontFamily": "",

	// Controls the font size in pixels for CodeLens. When set to `0`, the 90% of `editor.fontSize` is used.
	"editor.codeLensFontSize": 0,

	// Controls whether the editor should render the inline color decorators and color picker.
	"editor.colorDecorators": true,

	// Enable that the selection with the mouse and keys is doing column selection.
	"editor.columnSelection": false,

	// Controls if empty lines should be ignored with toggle, add or remove actions for line comments.
	"editor.comments.ignoreEmptyLines": true,

	// Controls whether a space character is inserted when commenting.
	"editor.comments.insertSpace": true,

	// Controls whether syntax highlighting should be copied into the clipboard.
	"editor.copyWithSyntaxHighlighting": true,

	// Control the cursor animation style.
	"editor.cursorBlinking": "blink",

	// Controls whether the smooth caret animation should be enabled.
	"editor.cursorSmoothCaretAnimation": false,

	// Controls the cursor style.
	"editor.cursorStyle": "line",

	// Controls the minimal number of visible leading and trailing lines surrounding the cursor. Known as 'scrollOff' or 'scrollOffset' in some other editors.
	"editor.cursorSurroundingLines": 0,

	// Controls when `cursorSurroundingLines` should be enforced.
	//  - default: `cursorSurroundingLines` is enforced only when triggered via the keyboard or API.
	//  - all: `cursorSurroundingLines` is enforced always.
	"editor.cursorSurroundingLinesStyle": "default",

	// Controls the width of the cursor when `editor.cursorStyle` is set to `line`.
	"editor.cursorWidth": 0,

	// Defines a default formatter which takes precedence over all other formatter settings. Must be the identifier of an extension contributing a formatter.
	//  - null: None
	//  - formulahendry.auto-close-tag: Automatically add HTML/XML close tag, same as Visual Studio IDE or Sublime Text
	//  - formulahendry.auto-rename-tag: Auto rename paired HTML/XML tag
	//  - HookyQR.beautify: Beautify code in place for VS Code
	//  - danielpinto8zz6.c-cpp-compile-run: Compile & Run single c/c++ files easly
	//  - formulahendry.code-runner: Run C, C++, Java, JS, PHP, Python, Perl, Ruby, Go, Lua, Groovy, PowerShell, CMD, BASH, F#, C#, VBScript, TypeScript, CoffeeScript, Scala, Swift, Julia, Crystal, OCaml, R, AppleScript, Elixir, VB.NET, Clojure, Haxe, Obj-C, Rust, Racket, Scheme, AutoHotkey, AutoIt, Kotlin, Dart, Pascal, Haskell, Nim, D, Lisp, Kit, V, SCSS, Sass, CUDA, Less, Fortran
	//  - ms-vscode.cpptools: C/C++ IntelliSense, debugging, and code browsing.
	//  - ms-dotnettools.csharp: C# for Visual Studio Code (powered by OmniSharp).
	//  - vscode.css-language-features: Provides rich language support for CSS, LESS and SCSS files.
	//  - Dart-Code.dart-code: Dart language support and debugger for Visual Studio Code.
	//  - Dart-Code.flutter: Flutter support and debugger for Visual Studio Code.
	//  - golang.go: Rich Go language support for Visual Studio Code
	//  - vscode.html-language-features: Provides rich language support for HTML and Handlebar files
	//  - redhat.java: Java Linting, Intellisense, formatting, refactoring, Maven/Gradle support and more...
	//  - vscode.json-language-features: Provides rich language support for JSON files.
	//  - ms-toolsai.jupyter: Jupyter notebook support, interactive programming and computing that supports Intellisense, debugging and more.
	//  - justusadam.language-haskell: Syntax support for the Haskell programming language.
	//  - James-Yu.latex-workshop: Boost LaTeX typesetting efficiency with preview, compile, autocomplete, colorize, and more.
	//  - yzhang.markdown-all-in-one: All you need to write Markdown (keyboard shortcuts, table of contents, auto preview and more)
	//  - vscode.markdown-language-features: Provides rich language support for Markdown.
	//  - ms-mssql.mssql: Develop Microsoft SQL Server, Azure SQL Database and SQL Data Warehouse everywhere
	//  - felixfbecker.php-intellisense: Advanced Autocompletion and Refactoring support for PHP
	//  - vscode.php-language-features: Provides rich language support for PHP files.
	//  - platformio.platformio-ide: Professional development environment for Embedded, IoT, Arduino, CMSIS, ESP-IDF, FreeRTOS, libOpenCM3, mbed OS, Pulp OS, SPL, STM32Cube, Zephyr RTOS, ARM, AVR, Espressif (ESP8266/ESP32), FPGA, MCS-51 (8051), MSP430, Nordic (nRF51/nRF52), NXP i.MX RT, PIC32, RISC-V, STMicroelectronics (STM8/STM32), Teensy
	//  - esbenp.prettier-vscode: Code formatter using prettier
	//  - ms-python.python: Linting, Debugging (multi-threaded, remote), Intellisense, Jupyter Notebooks, code formatting, refactoring, unit tests, and more.
	//  - dongli.python-preview: Provide Preview for Python Execution.
	//  - ms-vscode.references-view: Reference Search results as separate, stable view in the sidebar
	//  - humao.rest-client: REST Client for Visual Studio Code
	//  - rebornix.ruby: Ruby language support and debugging for Visual Studio Code
	//  - vscode.search-result: Provides syntax highlighting and language features for tabbed search results.
	//  - mtxr.sqltools: Database management done right. Connection explorer, query runner, intellisense, bookmarks, query history. Feel like a database hero!
	//  - vscode.typescript-language-features: Provides rich language support for JavaScript and TypeScript.
	//  - octref.vetur: Vue tooling for VS Code
	//  - mitaki28.vscode-clang: Completion and Diagnostic for C/C++/Objective-C using Clang Command
	//  - RandomFractalsInc.vscode-data-preview: Data Preview 🈸 extension for importing 📤 viewing 🔎 slicing 🔪 dicing 🎲 charting 📊 & exporting 📥 large JSON array/config, YAML, Apache Arrow, Avro, Parquet & Excel data files
	//  - batisteo.vscode-django: Beautiful syntax and scoped snippets for perfectionists with deadlines
	//  - ms-azuretools.vscode-docker: Makes it easy to create, manage, and debug containerized applications.
	//  - dbaeumer.vscode-eslint: Integrates ESLint JavaScript into VS Code.
	//  - ecmel.vscode-html-css: CSS Intellisense for HTML
	//  - bmewburn.vscode-intelephense-client: PHP code intelligence for Visual Studio Code
	//  - vscjava.vscode-java-debug: A lightweight Java debugger for Visual Studio Code
	//  - vscjava.vscode-maven: Manage Maven projects, execute goals, generate project from archetype, improve user experience for Java developers.
	//  - pflannery.vscode-versionlens: Shows the latest version for each package using code lens
	//  - redhat.vscode-yaml: YAML Language Support by Red Hat, with built-in Kubernetes syntax support
	//  - DotJoshJohnson.xml: XML Formatting, XQuery, and XPath Tools for Visual Studio Code
	//  - johnpapa.Angular2: Angular version 11 snippets by John Papa
	//  - alefragnani.Bookmarks: Mark lines and jump to them
	//  - twxs.cmake: CMake langage support for Visual Studio Code
	//  - austin.code-gnu-global: C/C++ Intellisense with the help of GNU Global tags
	//  - vscode.configuration-editing: Provides capabilities (advanced IntelliSense, auto-fixing) in configuration files like settings, launch, and extension recommendation files.
	//  - vscode.debug-auto-launch: Helper for auto-attach feature when node-debug extensions are not active.
	//  - vscode.debug-server-ready: Open URI in browser if server under debugging is ready.
	//  - msjsdiag.debugger-for-chrome: Debug your JavaScript code in the Chrome browser, or any other target that supports the Chrome Debugger protocol.
	//  - vscode.emmet: Emmet support for VS Code
	//  - vscode.extension-editing: Provides linting capabilities for authoring extensions.
	//  - mindaro-dev.file-downloader: Exposes an API that allows other extensions to download files.
	//  - RalfZhang.filetemplate: An extension for creating file from templates automatic.
	//  - Wattenberger.footsteps: Highlight and navigate between your most recently edited chunks of code
	//  - GrapeCity.gc-excelviewer: View Excel spreadsheets and CSV files within Visual Studio Code workspaces.
	//  - vscode.git: Git SCM Integration
	//  - vscode.git-ui: Git SCM UI Integration
	//  - vscode.github: GitHub
	//  - vscode.github-authentication: GitHub Authentication Provider
	//  - eamodio.gitlens: Supercharge the Git capabilities built into Visual Studio Code — Visualize code authorship at a glance via Git blame annotations and code lens, seamlessly navigate and explore Git repositories, gain valuable insights via powerful comparison commands, and so much more
	//  - vscode.grunt: Extension to add Grunt capabilities to VS Code.
	//  - vscode.gulp: Extension to add Gulp capabilities to VSCode.
	//  - UCL.haskelly: Complete support for casual and expert Haskell development.
	//  - vscode.image-preview: Provides VS Code's built-in image preview
	//  - vscode.jake: Extension to add Jake capabilities to VS Code.
	//  - ms-vscode.js-debug: An extension for debugging Node.js programs and Chrome.
	//  - ms-vscode.js-debug-companion: Companion extension to js-debug that provides capability for remote debugging
	//  - shd101wyy.markdown-preview-enhanced: Markdown Preview Enhanced ported to vscode
	//  - vscode.merge-conflict: Highlighting and commands for inline merge conflicts.
	//  - vscode.microsoft-authentication: Microsoft authentication provider
	//  - ms-vscode.node-debug: Node.js debugging support (versions < 8.0)
	//  - ms-vscode.node-debug2: Node.js debugging support
	//  - vscode.npm: Extension to add task support for npm scripts.
	//  - christian-kohler.npm-intellisense: Visual Studio Code plugin that autocompletes npm modules in import statements
	//  - alefragnani.numbered-bookmarks: Mark lines and jump to them, in Delphi style
	//  - christian-kohler.path-intellisense: Visual Studio Code plugin that autocompletes filenames
	//  - alefragnani.project-manager: Easily switch between projects
	//  - tht13.python: Python language extension for vscode
	//  - quicktype.quicktype: Copy JSON, paste as Go, TypeScript, C#, C++ and more.
	//  - ms-vscode-remote.remote-containers: Open any folder or repository inside a Docker container and take advantage of Visual Studio Code's full feature set.
	//  - vscode.simple-browser: A very basic built-in webview for displaying web content.
	//  - formulahendry.terminal: Terminal for Visual Studio Code
	//  - vscode.testing-editor-contributions: Provides the in-editor experience for tests and test results.
	//  - bajdzis.vscode-database: Support mysql, postgres, SSL, socked - SQL database
	//  - vscode-icons-team.vscode-icons: Icons for Visual Studio Code
	//  - vscjava.vscode-java-dependency: Manage Java projects in Visual Studio Code
	//  - vscjava.vscode-java-pack: Popular extensions for Java development and more.
	//  - vscjava.vscode-java-test: Run and debug JUnit or TestNG test cases
	//  - ms-vscode.vscode-js-profile-table: Text visualizer for profiles taken from the JavaScript debugger
	//  - DavidAnson.vscode-markdownlint: Markdown linting and style checking for Visual Studio Code
	//  - eg2.vscode-npm-script: npm support for VS Code
	//  - fabiospampinato.vscode-open-in-finder: Adds a few commands for opening the current file or project in Finder.
	//  - msjsdiag.vscode-react-native: Debugging and integrated commands for React Native
	//  - hbenl.vscode-test-explorer: Run your tests in the Sidebar of Visual Studio Code
	//  - VisualStudioExptTeam.vscodeintellicode: AI-assisted development
	"editor.defaultFormatter": null,

	// Controls whether the Go to Definition mouse gesture always opens the peek widget.
	"editor.definitionLinkOpensInPeek": false,

	// Controls whether `editor.tabSize#` and `#editor.insertSpaces` will be automatically detected when a file is opened based on the file contents.
	"editor.detectIndentation": true,

	// Controls whether the editor should allow moving selections via drag and drop.
	"editor.dragAndDrop": true,

	// Controls whether copying without a selection copies the current line.
	"editor.emptySelectionClipboard": true,

	// Scrolling speed multiplier when pressing `Alt`.
	"editor.fastScrollSensitivity": 5,

	// Controls whether the Find Widget should add extra lines on top of the editor. When true, you can scroll beyond the first line when the Find Widget is visible.
	"editor.find.addExtraSpaceOnTop": true,

	// Controls the condition for turning on find in selection automatically.
	//  - never: Never turn on Find in selection automatically (default).
	//  - always: Always turn on Find in selection automatically.
	//  - multiline: Turn on Find in selection automatically when multiple lines of content are selected.
	"editor.find.autoFindInSelection": "never",

	// Controls whether the cursor should jump to find matches while typing.
	"editor.find.cursorMoveOnType": true,

	// Controls whether the Find Widget should read or modify the shared find clipboard on macOS.
	"editor.find.globalFindClipboard": false,

	// Controls whether the search automatically restarts from the beginning (or the end) when no further matches can be found.
	"editor.find.loop": true,

	// Controls whether the search string in the Find Widget is seeded from the editor selection.
	"editor.find.seedSearchStringFromSelection": true,

	// Controls whether the editor has code folding enabled.
	"editor.folding": true,

	// Controls whether the editor should highlight folded ranges.
	"editor.foldingHighlight": true,

	// Controls the strategy for computing folding ranges.
	//  - auto: Use a language-specific folding strategy if available, else the indentation-based one.
	//  - indentation: Use the indentation-based folding strategy.
	"editor.foldingStrategy": "auto",

	// Controls the font family.
	"editor.fontFamily": "Menlo, Monaco, 'Courier New', monospace",

	// Configures font ligatures or font features. Can be either a boolean to enable/disable ligatures or a string for the value of the CSS 'font-feature-settings' property.
	"editor.fontLigatures": false,

	// Controls the font size in pixels.
	"editor.fontSize": 12,

	// Controls the font weight. Accepts "normal" and "bold" keywords or numbers between 1 and 1000.
	"editor.fontWeight": "normal",

	// Controls whether the editor should automatically format the pasted content. A formatter must be available and the formatter should be able to format a range in a document.
	"editor.formatOnPaste": false,

	// Format a file on save. A formatter must be available, the file must not be saved after delay, and the editor must not be shutting down.
	"editor.formatOnSave": false,

	// Controls if format on save formats the whole file or only modifications. Only applies when `editor.formatOnSave` is enabled.
	//  - file: Format the whole file.
	//  - modifications: Format modifications (requires source control).
	"editor.formatOnSaveMode": "file",

	// Controls whether the editor should automatically format the line after typing.
	"editor.formatOnType": false,

	// Controls whether the editor should render the vertical glyph margin. Glyph margin is mostly used for debugging.
	"editor.glyphMargin": true,

	// Alternative command id that is being executed when the result of 'Go to Declaration' is the current location.
	"editor.gotoLocation.alternativeDeclarationCommand": "editor.action.goToReferences",

	// Alternative command id that is being executed when the result of 'Go to Definition' is the current location.
	"editor.gotoLocation.alternativeDefinitionCommand": "editor.action.goToReferences",

	// Alternative command id that is being executed when the result of 'Go to Implementation' is the current location.
	"editor.gotoLocation.alternativeImplementationCommand": "",

	// Alternative command id that is being executed when the result of 'Go to Reference' is the current location.
	"editor.gotoLocation.alternativeReferenceCommand": "",

	// Alternative command id that is being executed when the result of 'Go to Type Definition' is the current location.
	"editor.gotoLocation.alternativeTypeDefinitionCommand": "editor.action.goToReferences",

	// This setting is deprecated, please use separate settings like 'editor.editor.gotoLocation.multipleDefinitions' or 'editor.editor.gotoLocation.multipleImplementations' instead.
	// 
	"editor.gotoLocation.multiple": null,

	// Controls the behavior the 'Go to Declaration'-command when multiple target locations exist.
	//  - peek: Show peek view of the results (default)
	//  - gotoAndPeek: Go to the primary result and show a peek view
	//  - goto: Go to the primary result and enable peek-less navigation to others
	"editor.gotoLocation.multipleDeclarations": "peek",

	// Controls the behavior the 'Go to Definition'-command when multiple target locations exist.
	//  - peek: Show peek view of the results (default)
	//  - gotoAndPeek: Go to the primary result and show a peek view
	//  - goto: Go to the primary result and enable peek-less navigation to others
	"editor.gotoLocation.multipleDefinitions": "peek",

	// Controls the behavior the 'Go to Implementations'-command when multiple target locations exist.
	//  - peek: Show peek view of the results (default)
	//  - gotoAndPeek: Go to the primary result and show a peek view
	//  - goto: Go to the primary result and enable peek-less navigation to others
	"editor.gotoLocation.multipleImplementations": "peek",

	// Controls the behavior the 'Go to References'-command when multiple target locations exist.
	//  - peek: Show peek view of the results (default)
	//  - gotoAndPeek: Go to the primary result and show a peek view
	//  - goto: Go to the primary result and enable peek-less navigation to others
	"editor.gotoLocation.multipleReferences": "peek",

	// Controls the behavior the 'Go to Type Definition'-command when multiple target locations exist.
	//  - peek: Show peek view of the results (default)
	//  - gotoAndPeek: Go to the primary result and show a peek view
	//  - goto: Go to the primary result and enable peek-less navigation to others
	"editor.gotoLocation.multipleTypeDefinitions": "peek",

	// Controls whether the cursor should be hidden in the overview ruler.
	"editor.hideCursorInOverviewRuler": false,

	// Controls whether the editor should highlight the active indent guide.
	"editor.highlightActiveIndentGuide": true,

	// Controls the delay in milliseconds after which the hover is shown.
	"editor.hover.delay": 300,

	// Controls whether the hover is shown.
	"editor.hover.enabled": true,

	// Controls whether the hover should remain visible when mouse is moved over it.
	"editor.hover.sticky": true,

	// Enables the inline hints in the editor.
	"editor.inlineHints.enabled": true,

	// Controls font family of inline hints in the editor.
	"editor.inlineHints.fontFamily": "Menlo, Monaco, 'Courier New', monospace",

	// Controls font size of inline hints in the editor. When set to `0`, the 90% of `editor.fontSize` is used.
	"editor.inlineHints.fontSize": 0,

	// Insert spaces when pressing `Tab`. This setting is overridden based on the file contents when `editor.detectIndentation` is on.
	"editor.insertSpaces": true,

	// Special handling for large files to disable certain memory intensive features.
	"editor.largeFileOptimizations": true,

	// Controls the letter spacing in pixels.
	"editor.letterSpacing": 0,

	// Enables the code action lightbulb in the editor.
	"editor.lightbulb.enabled": true,

	// Controls the line height. Use 0 to compute the line height from the font size.
	"editor.lineHeight": 0,

	// Controls the display of line numbers.
	//  - off: Line numbers are not rendered.
	//  - on: Line numbers are rendered as absolute number.
	//  - relative: Line numbers are rendered as distance in lines to cursor position.
	//  - interval: Line numbers are rendered every 10 lines.
	"editor.lineNumbers": "on",

	// Controls whether the editor has linked editing enabled. Depending on the language, related symbols, e.g. HTML tags, are updated while editing.
	"editor.linkedEditing": false,

	// Controls whether the editor should detect links and make them clickable.
	"editor.links": true,

	// Highlight matching brackets.
	"editor.matchBrackets": "always",

	// Lines above this length will not be tokenized for performance reasons
	"editor.maxTokenizationLineLength": 20000,

	// Controls whether the minimap is shown.
	"editor.minimap.enabled": true,

	// Limit the width of the minimap to render at most a certain number of columns.
	"editor.minimap.maxColumn": 120,

	// Render the actual characters on a line as opposed to color blocks.
	"editor.minimap.renderCharacters": true,

	// Scale of content drawn in the minimap: 1, 2 or 3.
	"editor.minimap.scale": 1,

	// Controls when the minimap slider is shown.
	"editor.minimap.showSlider": "mouseover",

	// Controls the side where to render the minimap.
	"editor.minimap.side": "right",

	// Controls the size of the minimap.
	//  - proportional: The minimap has the same size as the editor contents (and might scroll).
	//  - fill: The minimap will stretch or shrink as necessary to fill the height of the editor (no scrolling).
	//  - fit: The minimap will shrink as necessary to never be larger than the editor (no scrolling).
	"editor.minimap.size": "proportional",

	// A multiplier to be used on the `deltaX` and `deltaY` of mouse wheel scroll events.
	"editor.mouseWheelScrollSensitivity": 1,

	// Zoom the font of the editor when using mouse wheel and holding `Ctrl`.
	"editor.mouseWheelZoom": false,

	// Merge multiple cursors when they are overlapping.
	"editor.multiCursorMergeOverlapping": true,

	// The modifier to be used to add multiple cursors with the mouse. The Go To Definition and Open Link mouse gestures will adapt such that they do not conflict with the multicursor modifier. [Read more](https://code.visualstudio.com/docs/editor/codebasics#_multicursor-modifier).
	//  - ctrlCmd: Maps to `Control` on Windows and Linux and to `Command` on macOS.
	//  - alt: Maps to `Alt` on Windows and Linux and to `Option` on macOS.
	"editor.multiCursorModifier": "alt",

	// Controls pasting when the line count of the pasted text matches the cursor count.
	//  - spread: Each cursor pastes a single line of the text.
	//  - full: Each cursor pastes the full text.
	"editor.multiCursorPaste": "spread",

	// Controls whether the editor should highlight semantic symbol occurrences.
	"editor.occurrencesHighlight": true,

	// Controls whether a border should be drawn around the overview ruler.
	"editor.overviewRulerBorder": true,

	// Controls the amount of space between the bottom edge of the editor and the last line.
	"editor.padding.bottom": 0,

	// Controls the amount of space between the top edge of the editor and the first line.
	"editor.padding.top": 0,

	// Controls whether the parameter hints menu cycles or closes when reaching the end of the list.
	"editor.parameterHints.cycle": false,

	// Enables a pop-up that shows parameter documentation and type information as you type.
	"editor.parameterHints.enabled": true,

	// Controls whether to focus the inline editor or the tree in the peek widget.
	//  - tree: Focus the tree when opening peek
	//  - editor: Focus the editor when opening peek
	"editor.peekWidgetDefaultFocus": "tree",

	// Controls whether suggestions should automatically show up while typing.
	"editor.quickSuggestions": {
		"other": true,
		"comments": false,
		"strings": false
	},

	// Controls the delay in milliseconds after which quick suggestions will show up.
	"editor.quickSuggestionsDelay": 10,

	// Enable/disable the ability to preview changes before renaming
	"editor.rename.enablePreview": true,

	// Deprecated, use `editor.linkedEditing` instead.
	// Controls whether the editor auto renames on type.
	"editor.renameOnType": false,

	// Controls whether the editor should render control characters.
	"editor.renderControlCharacters": false,

	// Render last line number when the file ends with a newline.
	"editor.renderFinalNewline": true,

	// Controls whether the editor should render indent guides.
	"editor.renderIndentGuides": true,

	// Controls how the editor should render the current line highlight.
	//  - none
	//  - gutter
	//  - line
	//  - all: Highlights both the gutter and the current line.
	"editor.renderLineHighlight": "line",

	// Controls if the editor should render the current line highlight only when the editor is focused.
	"editor.renderLineHighlightOnlyWhenFocus": false,

	// Controls how the editor should render whitespace characters.
	//  - none
	//  - boundary: Render whitespace characters except for single spaces between words.
	//  - selection: Render whitespace characters only on selected text.
	//  - trailing: Render only trailing whitespace characters.
	//  - all
	"editor.renderWhitespace": "selection",

	// Controls whether selections should have rounded corners.
	"editor.roundedSelection": true,

	// Render vertical rulers after a certain number of monospace characters. Use multiple values for multiple rulers. No rulers are drawn if array is empty.
	"editor.rulers": [],

	// Controls the number of extra characters beyond which the editor will scroll horizontally.
	"editor.scrollBeyondLastColumn": 5,

	// Controls whether the editor will scroll beyond the last line.
	"editor.scrollBeyondLastLine": true,

	// Scroll only along the predominant axis when scrolling both vertically and horizontally at the same time. Prevents horizontal drift when scrolling vertically on a trackpad.
	"editor.scrollPredominantAxis": true,

	// Controls whether the editor should highlight matches similar to the selection.
	"editor.selectionHighlight": true,

	// Controls whether the semanticHighlighting is shown for the languages that support it.
	//  - true: Semantic highlighting enabled for all color themes.
	//  - false: Semantic highlighting disabled for all color themes.
	//  - configuredByTheme: Semantic highlighting is configured by the current color theme's `semanticHighlighting` setting.
	"editor.semanticHighlighting.enabled": "configuredByTheme",

	// Overrides editor semantic token color and styles from the currently selected color theme.
	"editor.semanticTokenColorCustomizations": {},

	// Controls strikethrough deprecated variables.
	"editor.showDeprecated": true,

	// Controls when the folding controls on the gutter are shown.
	//  - always: Always show the folding controls.
	//  - mouseover: Only show the folding controls when the mouse is over the gutter.
	"editor.showFoldingControls": "mouseover",

	// Controls fading out of unused code.
	"editor.showUnused": true,

	// Whether leading and trailing whitespace should always be selected.
	"editor.smartSelect.selectLeadingAndTrailingWhitespace": true,

	// Controls whether the editor will scroll using an animation.
	"editor.smoothScrolling": false,

	// Controls whether snippets are shown with other suggestions and how they are sorted.
	//  - top: Show snippet suggestions on top of other suggestions.
	//  - bottom: Show snippet suggestions below other suggestions.
	//  - inline: Show snippets suggestions with other suggestions.
	//  - none: Do not show snippet suggestions.
	"editor.snippetSuggestions": "inline",

	// Keep peek editors open even when double clicking their content or when hitting `Escape`.
	"editor.stablePeek": false,

	// Emulate selection behavior of tab characters when using spaces for indentation. Selection will stick to tab stops.
	"editor.stickyTabStops": false,

	// This setting is deprecated, please use separate settings like 'editor.suggest.showKeywords' or 'editor.suggest.showSnippets' instead.
	// 
	"editor.suggest.filteredTypes": {},

	// Controls whether filtering and sorting suggestions accounts for small typos.
	"editor.suggest.filterGraceful": true,

	// Controls whether words are overwritten when accepting completions. Note that this depends on extensions opting into this feature.
	//  - insert: Insert suggestion without overwriting text right of the cursor.
	//  - replace: Insert suggestion and overwrite text right of the cursor.
	"editor.suggest.insertMode": "insert",

	// Controls whether sorting favors words that appear close to the cursor.
	"editor.suggest.localityBonus": false,

	// This setting is deprecated. The suggest widget can now be resized.
	// 
	"editor.suggest.maxVisibleSuggestions": 0,

	// Controls whether remembered suggestion selections are shared between multiple workspaces and windows (needs `editor.suggestSelection`).
	"editor.suggest.shareSuggestSelections": false,

	// When enabled IntelliSense shows `class`-suggestions.
	"editor.suggest.showClasses": true,

	// When enabled IntelliSense shows `color`-suggestions.
	"editor.suggest.showColors": true,

	// When enabled IntelliSense shows `constant`-suggestions.
	"editor.suggest.showConstants": true,

	// When enabled IntelliSense shows `constructor`-suggestions.
	"editor.suggest.showConstructors": true,

	// When enabled IntelliSense shows `customcolor`-suggestions.
	"editor.suggest.showCustomcolors": true,

	// When enabled IntelliSense shows `enumMember`-suggestions.
	"editor.suggest.showEnumMembers": true,

	// When enabled IntelliSense shows `enum`-suggestions.
	"editor.suggest.showEnums": true,

	// When enabled IntelliSense shows `event`-suggestions.
	"editor.suggest.showEvents": true,

	// When enabled IntelliSense shows `field`-suggestions.
	"editor.suggest.showFields": true,

	// When enabled IntelliSense shows `file`-suggestions.
	"editor.suggest.showFiles": true,

	// When enabled IntelliSense shows `folder`-suggestions.
	"editor.suggest.showFolders": true,

	// When enabled IntelliSense shows `function`-suggestions.
	"editor.suggest.showFunctions": true,

	// Controls whether to show or hide icons in suggestions.
	"editor.suggest.showIcons": true,

	// Controls whether suggest details show inline with the label or only in the details widget
	"editor.suggest.showInlineDetails": true,

	// When enabled IntelliSense shows `interface`-suggestions.
	"editor.suggest.showInterfaces": true,

	// When enabled IntelliSense shows `issues`-suggestions.
	"editor.suggest.showIssues": true,

	// When enabled IntelliSense shows `keyword`-suggestions.
	"editor.suggest.showKeywords": true,

	// When enabled IntelliSense shows `method`-suggestions.
	"editor.suggest.showMethods": true,

	// When enabled IntelliSense shows `module`-suggestions.
	"editor.suggest.showModules": true,

	// When enabled IntelliSense shows `operator`-suggestions.
	"editor.suggest.showOperators": true,

	// When enabled IntelliSense shows `property`-suggestions.
	"editor.suggest.showProperties": true,

	// When enabled IntelliSense shows `reference`-suggestions.
	"editor.suggest.showReferences": true,

	// When enabled IntelliSense shows `snippet`-suggestions.
	"editor.suggest.showSnippets": true,

	// Controls the visibility of the status bar at the bottom of the suggest widget.
	"editor.suggest.showStatusBar": false,

	// When enabled IntelliSense shows `struct`-suggestions.
	"editor.suggest.showStructs": true,

	// When enabled IntelliSense shows `typeParameter`-suggestions.
	"editor.suggest.showTypeParameters": true,

	// When enabled IntelliSense shows `unit`-suggestions.
	"editor.suggest.showUnits": true,

	// When enabled IntelliSense shows `user`-suggestions.
	"editor.suggest.showUsers": true,

	// When enabled IntelliSense shows `value`-suggestions.
	"editor.suggest.showValues": true,

	// When enabled IntelliSense shows `variable`-suggestions.
	"editor.suggest.showVariables": true,

	// When enabled IntelliSense shows `text`-suggestions.
	"editor.suggest.showWords": true,

	// Controls whether an active snippet prevents quick suggestions.
	"editor.suggest.snippetsPreventQuickSuggestions": true,

	// Font size for the suggest widget. When set to `0`, the value of `editor.fontSize` is used.
	"editor.suggestFontSize": 0,

	// Line height for the suggest widget. When set to `0`, the value of `editor.lineHeight` is used. The minimum value is 8.
	"editor.suggestLineHeight": 0,

	// Controls whether suggestions should automatically show up when typing trigger characters.
	"editor.suggestOnTriggerCharacters": true,

	// Controls how suggestions are pre-selected when showing the suggest list.
	//  - first: Always select the first suggestion.
	//  - recentlyUsed: Select recent suggestions unless further typing selects one, e.g. `console.| -> console.log` because `log` has been completed recently.
	//  - recentlyUsedByPrefix: Select suggestions based on previous prefixes that have completed those suggestions, e.g. `co -> console` and `con -> const`.
	"editor.suggestSelection": "recentlyUsed",

	// Enables tab completions.
	//  - on: Tab complete will insert the best matching suggestion when pressing tab.
	//  - off: Disable tab completions.
	//  - onlySnippets: Tab complete snippets when their prefix match. Works best when 'quickSuggestions' aren't enabled.
	"editor.tabCompletion": "off",

	// The number of spaces a tab is equal to. This setting is overridden based on the file contents when `editor.detectIndentation` is on.
	"editor.tabSize": 4,

	// Overrides editor syntax colors and font style from the currently selected color theme.
	"editor.tokenColorCustomizations": {},

	// Use `editor.semanticTokenColorCustomizations` instead.
	// 
	"editor.tokenColorCustomizationsExperimental": {},

	// Remove trailing auto inserted whitespace.
	"editor.trimAutoWhitespace": true,

	// Controls whether clicking on the empty content after a folded line will unfold the line.
	"editor.unfoldOnClickAfterEndOfLine": false,

	// Remove unusual line terminators that might cause problems.
	//  - auto: Unusual line terminators are automatically removed.
	//  - off: Unusual line terminators are ignored.
	//  - prompt: Unusual line terminators prompt to be removed.
	"editor.unusualLineTerminators": "prompt",

	// Inserting and deleting whitespace follows tab stops.
	"editor.useTabStops": true,

	// Controls whether completions should be computed based on words in the document.
	"editor.wordBasedSuggestions": true,

	// Controls from which documents word based completions are computed.
	//  - currentDocument: Only suggest words from the active document.
	//  - matchingDocuments: Suggest words from all open documents of the same language.
	//  - allDocuments: Suggest words from all open documents.
	"editor.wordBasedSuggestionsMode": "matchingDocuments",

	// Characters that will be used as word separators when doing word related navigations or operations.
	"editor.wordSeparators": "`~!@#$%^&*()-=+[{]}\\|;:'\",.<>/?",

	// Controls how lines should wrap.
	//  - off: Lines will never wrap.
	//  - on: Lines will wrap at the viewport width.
	//  - wordWrapColumn: Lines will wrap at `editor.wordWrapColumn`.
	//  - bounded: Lines will wrap at the minimum of viewport and `editor.wordWrapColumn`.
	"editor.wordWrap": "off",

	// Controls the wrapping column of the editor when `editor.wordWrap` is `wordWrapColumn` or `bounded`.
	"editor.wordWrapColumn": 80,

	// Controls the indentation of wrapped lines.
	//  - none: No indentation. Wrapped lines begin at column 1.
	//  - same: Wrapped lines get the same indentation as the parent.
	//  - indent: Wrapped lines get +1 indentation toward the parent.
	//  - deepIndent: Wrapped lines get +2 indentation toward the parent.
	"editor.wrappingIndent": "same",

	// Controls the algorithm that computes wrapping points.
	//  - simple: Assumes that all characters are of the same width. This is a fast algorithm that works correctly for monospace fonts and certain scripts (like Latin characters) where glyphs are of equal width.
	//  - advanced: Delegates wrapping points computation to the browser. This is a slow algorithm, that might cause freezes for large files, but it works correctly in all cases.
	"editor.wrappingStrategy": "simple",

	// Controls whether inline actions are always visible in the Source Control view.
	"scm.alwaysShowActions": false,

	// Controls whether repositories should always be visible in the SCM view.
	"scm.alwaysShowRepositories": false,

	// Controls whether the SCM view should automatically reveal and select files when opening them.
	"scm.autoReveal": true,

	// Controls the count badge on the Source Control icon on the Activity Bar.
	//  - all: Show the sum of all Source Control Provider count badges.
	//  - focused: Show the count badge of the focused Source Control Provider.
	//  - off: Disable the Source Control count badge.
	"scm.countBadge": "all",

	// Controls the default Source Control repository view mode.
	//  - tree: Show the repository changes as a tree.
	//  - list: Show the repository changes as a list.
	"scm.defaultViewMode": "list",

	// Controls diff decorations in the editor.
	//  - all: Show the diff decorations in all available locations.
	//  - gutter: Show the diff decorations only in the editor gutter.
	//  - overview: Show the diff decorations only in the overview ruler.
	//  - minimap: Show the diff decorations only in the minimap.
	//  - none: Do not show the diff decorations.
	"scm.diffDecorations": "all",

	// Controls the behavior of Source Control diff gutter decorations.
	//  - diff: Show the inline diff peek view on click.
	//  - none: Do nothing.
	"scm.diffDecorationsGutterAction": "diff",

	// Controls the visibility of the Source Control diff decorator in the gutter.
	//  - always: Show the diff decorator in the gutter at all times.
	//  - hover: Show the diff decorator in the gutter only on hover.
	"scm.diffDecorationsGutterVisibility": "always",

	// Controls the width(px) of diff decorations in gutter (added & modified).
	"scm.diffDecorationsGutterWidth": 3,

	// Controls the font for the input message. Use `default` for the workbench user interface font family, `editor` for the `editor.fontFamily`'s value, or a custom font family.
	"scm.inputFontFamily": "default",

	// Controls the font size for the input message in pixels.
	"scm.inputFontSize": 13,

	// Controls the count badges on Source Control Provider headers. These headers only appear when there is more than one provider.
	//  - hidden: Hide Source Control Provider count badges.
	//  - auto: Only show count badge for Source Control Provider when non-zero.
	//  - visible: Show Source Control Provider count badges.
	"scm.providerCountBadge": "hidden",

	// Controls how many repositories are visible in the Source Control Repositories section. Set to `0` to be able to manually resize the view.
	"scm.repositories.visible": 10,

	// Defines a default kernel provider which takes precedence over all other kernel providers settings. Must be the identifier of an extension contributing a kernel provider.
	"notebook.kernelProviderAssociations": [],

	// Controls the behavior of clicking an activity bar icon in the workbench.
	//  - toggle: Hide the side bar if the clicked item is already visible.
	//  - focus: Focus side bar if the clicked item is already visible.
	"workbench.activityBar.iconClickBehavior": "toggle",

	// Controls the visibility of the activity bar in the workbench.
	"workbench.activityBar.visible": true,

	// Overrides colors from the currently selected color theme.
	"workbench.colorCustomizations": {},

	// Specifies the color theme used in the workbench.
	"workbench.colorTheme": "Default Dark+",

	// Controls the number of recently used commands to keep in history for the command palette. Set to 0 to disable command history.
	"workbench.commandPalette.history": 50,

	// Controls whether the last typed input to the command palette should be restored when opening it the next time.
	"workbench.commandPalette.preserveInput": false,

	// Controls if the centered layout should automatically resize to maximum width when more than one group is open. Once only one group is open it will resize back to the original centered width.
	"workbench.editor.centeredLayoutAutoResize": true,

	// Controls the behavior of empty editor groups when the last tab in the group is closed. When enabled, empty groups will automatically close. When disabled, empty groups will remain part of the grid.
	"workbench.editor.closeEmptyGroups": true,

	// Controls whether editors showing a file that was opened during the session should close automatically when getting deleted or renamed by some other process. Disabling this will keep the editor open  on such an event. Note that deleting from within the application will always close the editor and that dirty files will never close to preserve your data.
	"workbench.editor.closeOnFileDelete": false,

	// Controls whether editor file decorations should use badges.
	"workbench.editor.decorations.badges": true,

	// Controls whether editor file decorations should use colors.
	"workbench.editor.decorations.colors": true,

	// Controls whether opened editors show as preview. Preview editors do not keep open and are reused until explicitly set to be kept open (e.g. via double click or editing) and show up with an italic font style.
	"workbench.editor.enablePreview": true,

	// Controls whether editors remain in preview when a code navigation is started from them. Preview editors do not keep open and are reused until explicitly set to be kept open (e.g. via double click or editing). This value is ignored when `workbench.editor.enablePreview` is disabled.
	"workbench.editor.enablePreviewFromCodeNavigation": false,

	// Controls whether editors opened from Quick Open show as preview. Preview editors do not keep open and are reused until explicitly set to be kept open (e.g. via double click or editing). This value is ignored when `workbench.editor.enablePreview` is disabled.
	"workbench.editor.enablePreviewFromQuickOpen": false,

	// Controls whether tabs are closed in most recently used order or from left to right.
	"workbench.editor.focusRecentEditorAfterClose": true,

	// Controls whether a top border is drawn on modified (dirty) editor tabs or not. This value is ignored when `workbench.editor.showTabs` is disabled.
	"workbench.editor.highlightModifiedTabs": false,

	// Controls the format of the label for an editor.
	//  - default: Show the name of the file. When tabs are enabled and two files have the same name in one group the distinguishing sections of each file's path are added. When tabs are disabled, the path relative to the workspace folder is shown if the editor is active.
	//  - short: Show the name of the file followed by its directory name.
	//  - medium: Show the name of the file followed by its path relative to the workspace folder.
	//  - long: Show the name of the file followed by its absolute path.
	"workbench.editor.labelFormat": "default",

	// Controls if the number of opened editors should be limited or not. When enabled, less recently used editors that are not dirty will close to make space for newly opening editors.
	"workbench.editor.limit.enabled": false,

	// Controls if the limit of maximum opened editors should apply per editor group or across all editor groups.
	"workbench.editor.limit.perEditorGroup": false,

	// Controls the maximum number of opened editors. Use the `workbench.editor.limit.perEditorGroup` setting to control this limit per editor group or across all groups.
	"workbench.editor.limit.value": 10,

	// Navigate between open files using mouse buttons four and five if provided.
	"workbench.editor.mouseBackForwardToNavigate": true,

	// Controls where editors open. Select `left` or `right` to open editors to the left or right of the currently active one. Select `first` or `last` to open editors independently from the currently active one.
	"workbench.editor.openPositioning": "right",

	// Controls the default direction of editors that are opened side by side (for example, from the Explorer). By default, editors will open on the right hand side of the currently active one. If changed to `down`, the editors will open below the currently active one.
	"workbench.editor.openSideBySideDirection": "right",

	// Controls the sizing of pinned editor tabs. Pinned tabs are sorted to the beginning of all opened tabs and typically do not close until unpinned. This value is ignored when `workbench.editor.showTabs` is disabled.
	//  - normal: A pinned tab inherits the look of non pinned tabs.
	//  - compact: A pinned tab will show in a compact form with only icon or first letter of the editor name.
	//  - shrink: A pinned tab shrinks to a compact fixed size showing parts of the editor name.
	"workbench.editor.pinnedTabSizing": "normal",

	// Restores the last view state (e.g. scroll position) when re-opening textual editors after they have been closed.
	"workbench.editor.restoreViewState": true,

	// Controls whether an editor is revealed in any of the visible groups if opened. If disabled, an editor will prefer to open in the currently active editor group. If enabled, an already opened editor will be revealed instead of opened again in the currently active editor group. Note that there are some cases where this setting is ignored, e.g. when forcing an editor to open in a specific group or to the side of the currently active group.
	"workbench.editor.revealIfOpen": false,

	// Controls whether scrolling over tabs will open them or not. By default tabs will only reveal upon scrolling, but not open. You can press and hold the Shift-key while scrolling to change this behavior for that duration. This value is ignored when `workbench.editor.showTabs` is disabled.
	"workbench.editor.scrollToSwitchTabs": false,

	// Controls whether opened editors should show with an icon or not. This requires a file icon theme to be enabled as well.
	"workbench.editor.showIcons": true,

	// Controls whether opened editors should show in tabs or not.
	"workbench.editor.showTabs": true,

	// Controls if editor groups can be split from drag and drop operations by dropping an editor or file on the edges of the editor area.
	"workbench.editor.splitOnDragAndDrop": true,

	// Controls the sizing of editor groups when splitting them.
	//  - distribute: Splits all the editor groups to equal parts.
	//  - split: Splits the active editor group to equal parts.
	"workbench.editor.splitSizing": "distribute",

	// Controls the position of the editor's tabs close buttons, or disables them when set to 'off'. This value is ignored when `workbench.editor.showTabs` is disabled.
	"workbench.editor.tabCloseButton": "right",

	// Controls the sizing of editor tabs. This value is ignored when `workbench.editor.showTabs` is disabled.
	//  - fit: Always keep tabs large enough to show the full editor label.
	//  - shrink: Allow tabs to get smaller when the available space is not enough to show all tabs at once.
	"workbench.editor.tabSizing": "fit",

	// Controls the height of the scrollbars used for tabs and breadcrumbs in the editor title area.
	//  - default: The default size.
	//  - large: Increases the size, so it can be grabbed more easily with the mouse.
	"workbench.editor.titleScrollbarSizing": "default",

	// Controls if the untitled hint should be inline text in the editor or a floating button or hidden.
	"workbench.editor.untitled.hint": "default",

	// Controls the format of the label for an untitled editor.
	//  - content: The name of the untitled file is derived from the contents of its first line unless it has an associated file path. It will fallback to the name in case the line is empty or contains no word characters.
	//  - name: The name of the untitled file is not derived from the contents of the file.
	"workbench.editor.untitled.labelFormat": "content",

	// Controls whether tabs should be wrapped over multiple lines when exceeding available space or whether a scrollbar should appear instead. This value is ignored when `workbench.editor.showTabs` is disabled.
	"workbench.editor.wrapTabs": false,

	// Configure which editor to use for specific file types.
	"workbench.editorAssociations": [],

	// Fetches experiments to run from a Microsoft online service.
	"workbench.enableExperiments": true,

	// Configure the opener to use for external URIs (http, https).
	"workbench.externalUriOpeners": {},

	// Controls font aliasing method in the workbench.
	//  - default: Sub-pixel font smoothing. On most non-retina displays this will give the sharpest text.
	//  - antialiased: Smooth the font on the level of the pixel, as opposed to the subpixel. Can make the font appear lighter overall.
	//  - none: Disables font smoothing. Text will show with jagged sharp edges.
	//  - auto: Applies `default` or `antialiased` automatically based on the DPI of displays.
	"workbench.fontAliasing": "default",

	// Controls the delay in milliseconds after which the hover is shown for workbench items (ex. some extension provided tree view items). Already visible items may require a refresh before reflecting this setting change.
	"workbench.hover.delay": 1500,

	// Specifies the file icon theme used in the workbench or 'null' to not show any file icons.
	//  - null: No file icons
	//  - vs-minimal
	//  - vs-seti
	//  - vscode-icons
	"workbench.iconTheme": "vs-seti",

	// Controls whether keyboard navigation in lists and trees is automatically triggered simply by typing. If set to `false`, keyboard navigation is only triggered when executing the `list.toggleKeyboardNavigation` command, for which you can assign a keyboard shortcut.
	"workbench.list.automaticKeyboardNavigation": true,

	// Controls whether lists and trees support horizontal scrolling in the workbench. Warning: turning on this setting has a performance implication.
	"workbench.list.horizontalScrolling": false,

	// Controls the keyboard navigation style for lists and trees in the workbench. Can be simple, highlight and filter.
	//  - simple: Simple keyboard navigation focuses elements which match the keyboard input. Matching is done only on prefixes.
	//  - highlight: Highlight keyboard navigation highlights elements which match the keyboard input. Further up and down navigation will traverse only the highlighted elements.
	//  - filter: Filter keyboard navigation will filter out and hide all the elements which do not match the keyboard input.
	"workbench.list.keyboardNavigation": "highlight",

	// The modifier to be used to add an item in trees and lists to a multi-selection with the mouse (for example in the explorer, open editors and scm view). The 'Open to Side' mouse gestures - if supported - will adapt such that they do not conflict with the multiselect modifier.
	//  - ctrlCmd: Maps to `Control` on Windows and Linux and to `Command` on macOS.
	//  - alt: Maps to `Alt` on Windows and Linux and to `Option` on macOS.
	"workbench.list.multiSelectModifier": "ctrlCmd",

	// Controls how to open items in trees and lists using the mouse (if supported). Note that some trees and lists might choose to ignore this setting if it is not applicable.
	"workbench.list.openMode": "singleClick",

	// Controls whether lists and trees have smooth scrolling.
	"workbench.list.smoothScrolling": false,

	// Controls the default location of the panel (terminal, debug console, output, problems). It can either show at the bottom, right, or left of the workbench.
	"workbench.panel.defaultLocation": "bottom",

	// Controls whether the panel opens maximized. It can either always open maximized, never open maximized, or open to the last state it was in before being closed.
	//  - always: Always maximize the panel when opening it.
	//  - never: Never maximize the panel when opening it. The panel will open un-maximized.
	//  - preserve: Open the panel to the state that it was in, before it was closed.
	"workbench.panel.opensMaximized": "preserve",

	// Specifies the preferred color theme for dark OS appearance when `window.autoDetectColorScheme` is enabled.
	"workbench.preferredDarkColorTheme": "Default Dark+",

	// Specifies the preferred color theme used in high contrast mode when `window.autoDetectHighContrast` is enabled.
	"workbench.preferredHighContrastColorTheme": "Default High Contrast",

	// Specifies the preferred color theme for light OS appearance when `window.autoDetectColorScheme` is enabled.
	"workbench.preferredLightColorTheme": "Default Light+",

	// Specifies the product icon theme used.
	//  - Default: Default
	"workbench.productIconTheme": "Default",

	// Controls whether Quick Open should close automatically once it loses focus.
	"workbench.quickOpen.closeOnFocusLost": true,

	// Controls whether the last typed input to Quick Open should be restored when opening it the next time.
	"workbench.quickOpen.preserveInput": false,

	// Controls the hover feedback delay in milliseconds of the dragging area in between views/editors.
	"workbench.sash.hoverDelay": 300,

	// Controls the feedback area size in pixels of the dragging area in between views/editors. Set it to a larger value if you feel it's hard to resize views using the mouse.
	"workbench.sash.size": 4,

	// Determines which settings editor to use by default.
	//  - ui: Use the settings UI editor.
	//  - json: Use the JSON file editor.
	"workbench.settings.editor": "ui",

	// Controls whether to enable the natural language search mode for settings. The natural language search is provided by a Microsoft online service.
	"workbench.settings.enableNaturalLanguageSearch": true,

	// Controls whether opening keybinding settings also opens an editor showing all default keybindings.
	"workbench.settings.openDefaultKeybindings": false,

	// Controls whether opening settings also opens an editor showing all default settings.
	"workbench.settings.openDefaultSettings": false,

	// Controls the behavior of the settings editor Table of Contents while searching.
	//  - hide: Hide the Table of Contents while searching.
	//  - filter: Filter the Table of Contents to just categories that have matching settings. Clicking a category will filter the results to that category.
	"workbench.settings.settingsSearchTocBehavior": "filter",

	// Controls whether to use the split JSON editor when editing settings as JSON.
	"workbench.settings.useSplitJSON": false,

	// Controls the location of the sidebar and activity bar. They can either show on the left or right of the workbench.
	"workbench.sideBar.location": "left",

	// Controls which editor is shown at startup, if none are restored from the previous session.
	//  - none: Start without an editor.
	//  - welcomePage: Open the Welcome page.
	//  - readme: Open the README when opening a folder that contains one, fallback to 'welcomePage' otherwise.
	//  - newUntitledFile: Open a new untitled file (only applies when opening an empty window).
	//  - welcomePageInEmptyWorkbench: Open the Welcome page when opening an empty workbench.
	//  - gettingStarted: Open the Getting Started page.
	"workbench.startupEditor": "welcomePage",

	// Controls the visibility of the status bar at the bottom of the workbench.
	"workbench.statusBar.visible": true,

	// When enabled, will show the watermark tips when no editor is open.
	"workbench.tips.enabled": true,

	// Controls how tree folders are expanded when clicking the folder names. Note that some trees and lists might choose to ignore this setting if it is not applicable.
	"workbench.tree.expandMode": "singleClick",

	// Controls tree indentation in pixels.
	"workbench.tree.indent": 8,

	// Controls whether the tree should render indent guides.
	"workbench.tree.renderIndentGuides": "onHover",

	// Controls the visibility of view header actions. View header actions may either be always visible, or only visible when that view is focused or hovered over.
	"workbench.view.alwaysShowHeaderActions": false,

	// Hide categories of the welcome page's getting started section that are not relevant to you.
	"workbench.welcomePage.hiddenCategories": [],

	// If set, automatically switch to the preferred color theme based on the OS appearance.
	"window.autoDetectColorScheme": false,

	// If enabled, will automatically change to high contrast theme if the OS is using a high contrast theme.
	"window.autoDetectHighContrast": true,

	// If enabled, clicking on an inactive window will both activate the window and trigger the element under the mouse if it is clickable. If disabled, clicking anywhere on an inactive window will activate it only and a second click is required on the element.
	"window.clickThroughInactive": true,

	// Controls whether closing the last editor should also close the window. This setting only applies for windows that do not show folders.
	"window.closeWhenEmpty": false,

	// Adjust the appearance of dialog windows.
	"window.dialogStyle": "native",

	// If enabled, double clicking the application icon in the title bar will close the window and the window cannot be dragged by the icon. This setting only has an effect when `window.titleBarStyle` is set to `custom`.
	"window.doubleClickIconToClose": false,

	// Controls if native full-screen should be used on macOS. Disable this option to prevent macOS from creating a new space when going full-screen.
	"window.nativeFullScreen": true,

	// Enables macOS Sierra window tabs. Note that changes require a full restart to apply and that native tabs will disable a custom title bar style if configured.
	"window.nativeTabs": false,

	// Controls the dimensions of opening a new window when at least one window is already opened. Note that this setting does not have an impact on the first window that is opened. The first window will always restore the size and location as you left it before closing.
	//  - default: Open new windows in the center of the screen.
	//  - inherit: Open new windows with same dimension as last active one.
	//  - offset: Open new windows with same dimension as last active one with an offset position.
	//  - maximized: Open new windows maximized.
	//  - fullscreen: Open new windows in full screen mode.
	"window.newWindowDimensions": "default",

	// Controls whether files should open in a new window. 
	// Note that there can still be cases where this setting is ignored (e.g. when using the `--new-window` or `--reuse-window` command line option).
	//  - on: Files will open in a new window.
	//  - off: Files will open in the window with the files' folder open or the last active window.
	//  - default: Files will open in the window with the files' folder open or the last active window unless opened via the Dock or from Finder.
	"window.openFilesInNewWindow": "off",

	// Controls whether folders should open in a new window or replace the last active window.
	// Note that there can still be cases where this setting is ignored (e.g. when using the `--new-window` or `--reuse-window` command line option).
	//  - on: Folders will open in a new window.
	//  - off: Folders will replace the last active window.
	//  - default: Folders will open in a new window unless a folder is picked from within the application (e.g. via the File menu).
	"window.openFoldersInNewWindow": "default",

	// Controls whether a new empty window should open when starting a second instance without arguments or if the last running instance should get focus.
	// Note that there can still be cases where this setting is ignored (e.g. when using the `--new-window` or `--reuse-window` command line option).
	//  - on: Open a new empty window.
	//  - off: Focus the last active running instance.
	"window.openWithoutArgumentsInNewWindow": "off",

	// Controls whether a window should restore to full screen mode if it was exited in full screen mode.
	"window.restoreFullscreen": false,

	// Controls how windows are being reopened after starting for the first time. This setting has no effect when the application is already running.
	//  - preserve: Always reopen all windows. If a folder or workspace is opened (e.g. from the command line) it opens as a new window unless it was opened before. If files are opened they will open in one of the restored windows.
	//  - all: Reopen all windows unless a folder, workspace or file is opened (e.g. from the command line).
	//  - folders: Reopen all windows that had folders or workspaces opened unless a folder, workspace or file is opened (e.g. from the command line).
	//  - one: Reopen the last active window unless a folder, workspace or file is opened (e.g. from the command line).
	//  - none: Never reopen a window. Unless a folder or workspace is opened (e.g. from the command line), an empty window will appear.
	"window.restoreWindows": "all",

	// Controls the window title based on the active editor. Variables are substituted based on the context:
	// - `${activeEditorShort}`: the file name (e.g. myFile.txt).
	// - `${activeEditorMedium}`: the path of the file relative to the workspace folder (e.g. myFolder/myFileFolder/myFile.txt).
	// - `${activeEditorLong}`: the full path of the file (e.g. /Users/Development/myFolder/myFileFolder/myFile.txt).
	// - `${activeFolderShort}`: the name of the folder the file is contained in (e.g. myFileFolder).
	// - `${activeFolderMedium}`: the path of the folder the file is contained in, relative to the workspace folder (e.g. myFolder/myFileFolder).
	// - `${activeFolderLong}`: the full path of the folder the file is contained in (e.g. /Users/Development/myFolder/myFileFolder).
	// - `${folderName}`: name of the workspace folder the file is contained in (e.g. myFolder).
	// - `${folderPath}`: file path of the workspace folder the file is contained in (e.g. /Users/Development/myFolder).
	// - `${rootName}`: name of the opened workspace or folder (e.g. myFolder or myWorkspace).
	// - `${rootPath}`: file path of the opened workspace or folder (e.g. /Users/Development/myWorkspace).
	// - `${appName}`: e.g. VS Code.
	// - `${remoteName}`: e.g. SSH
	// - `${dirty}`: a dirty indicator if the active editor is dirty.
	// - `${separator}`: a conditional separator (" - ") that only shows when surrounded by variables with values or static text.
	"window.title": "${activeEditorShort}${separator}${rootName}",

	// Adjust the appearance of the window title bar. On Linux and Windows, this setting also affects the application and context menu appearances. Changes require a full restart to apply.
	"window.titleBarStyle": "custom",

	// Separator used by `window.title`.
	"window.titleSeparator": " — ",

	// Adjust the zoom level of the window. The original size is 0 and each increment above (e.g. 1) or below (e.g. -1) represents zooming 20% larger or smaller. You can also enter decimals to adjust the zoom level with a finer granularity.
	"window.zoomLevel": 0,

	// Configure file associations to languages (e.g. `"*.extension": "html"`). These have precedence over the default associations of the languages installed.
	"files.associations": {},

	// When enabled, the editor will attempt to guess the character set encoding when opening files. This setting can also be configured per language.
	"files.autoGuessEncoding": false,

	// Controls auto save of dirty editors. Read more about autosave [here](https://code.visualstudio.com/docs/editor/codebasics#_save-auto-save).
	//  - off: A dirty editor is never automatically saved.
	//  - afterDelay: A dirty editor is automatically saved after the configured `files.autoSaveDelay`.
	//  - onFocusChange: A dirty editor is automatically saved when the editor loses focus.
	//  - onWindowChange: A dirty editor is automatically saved when the window loses focus.
	"files.autoSave": "off",

	// Controls the delay in ms after which a dirty editor is saved automatically. Only applies when `files.autoSave` is set to `afterDelay`.
	"files.autoSaveDelay": 1000,

	// The default language mode that is assigned to new files. If configured to `${activeEditorLanguage}`, will use the language mode of the currently active text editor if any.
	"files.defaultLanguage": "",

	// Moves files/folders to the OS trash (recycle bin on Windows) when deleting. Disabling this will delete files/folders permanently.
	"files.enableTrash": true,

	// The default character set encoding to use when reading and writing files. This setting can also be configured per language.
	//  - utf8: UTF-8
	//  - utf8bom: UTF-8 with BOM
	//  - utf16le: UTF-16 LE
	//  - utf16be: UTF-16 BE
	//  - windows1252: Western (Windows 1252)
	//  - iso88591: Western (ISO 8859-1)
	//  - iso88593: Western (ISO 8859-3)
	//  - iso885915: Western (ISO 8859-15)
	//  - macroman: Western (Mac Roman)
	//  - cp437: DOS (CP 437)
	//  - windows1256: Arabic (Windows 1256)
	//  - iso88596: Arabic (ISO 8859-6)
	//  - windows1257: Baltic (Windows 1257)
	//  - iso88594: Baltic (ISO 8859-4)
	//  - iso885914: Celtic (ISO 8859-14)
	//  - windows1250: Central European (Windows 1250)
	//  - iso88592: Central European (ISO 8859-2)
	//  - cp852: Central European (CP 852)
	//  - windows1251: Cyrillic (Windows 1251)
	//  - cp866: Cyrillic (CP 866)
	//  - iso88595: Cyrillic (ISO 8859-5)
	//  - koi8r: Cyrillic (KOI8-R)
	//  - koi8u: Cyrillic (KOI8-U)
	//  - iso885913: Estonian (ISO 8859-13)
	//  - windows1253: Greek (Windows 1253)
	//  - iso88597: Greek (ISO 8859-7)
	//  - windows1255: Hebrew (Windows 1255)
	//  - iso88598: Hebrew (ISO 8859-8)
	//  - iso885910: Nordic (ISO 8859-10)
	//  - iso885916: Romanian (ISO 8859-16)
	//  - windows1254: Turkish (Windows 1254)
	//  - iso88599: Turkish (ISO 8859-9)
	//  - windows1258: Vietnamese (Windows 1258)
	//  - gbk: Simplified Chinese (GBK)
	//  - gb18030: Simplified Chinese (GB18030)
	//  - cp950: Traditional Chinese (Big5)
	//  - big5hkscs: Traditional Chinese (Big5-HKSCS)
	//  - shiftjis: Japanese (Shift JIS)
	//  - eucjp: Japanese (EUC-JP)
	//  - euckr: Korean (EUC-KR)
	//  - windows874: Thai (Windows 874)
	//  - iso885911: Latin/Thai (ISO 8859-11)
	//  - koi8ru: Cyrillic (KOI8-RU)
	//  - koi8t: Tajik (KOI8-T)
	//  - gb2312: Simplified Chinese (GB 2312)
	//  - cp865: Nordic DOS (CP 865)
	//  - cp850: Western European DOS (CP 850)
	"files.encoding": "utf8",

	// The default end of line character.
	//  - \n: LF
	//  - \r\n: CRLF
	//  - auto: Uses operating system specific end of line character.
	"files.eol": "auto",

	// Configure glob patterns for excluding files and folders. For example, the file Explorer decides which files and folders to show or hide based on this setting. Refer to the `search.exclude` setting to define search specific excludes. Read more about glob patterns [here](https://code.visualstudio.com/docs/editor/codebasics#_advanced-search-options).
	"files.exclude": {
		"**/.git": true,
		"**/.svn": true,
		"**/.hg": true,
		"**/CVS": true,
		"**/.DS_Store": true
	},

	// Controls whether unsaved files are remembered between sessions, allowing the save prompt when exiting the editor to be skipped.
	//  - off: Disable hot exit. A prompt will show when attempting to close a window with dirty files.
	//  - onExit: Hot exit will be triggered when the last window is closed on Windows/Linux or when the `workbench.action.quit` command is triggered (command palette, keybinding, menu). All windows without folders opened will be restored upon next launch. A list of previously opened windows with unsaved files can be accessed via `File > Open Recent > More...`
	//  - onExitAndWindowClose: Hot exit will be triggered when the last window is closed on Windows/Linux or when the `workbench.action.quit` command is triggered (command palette, keybinding, menu), and also for any window with a folder opened regardless of whether it's the last window. All windows without folders opened will be restored upon next launch. A list of previously opened windows with unsaved files can be accessed via `File > Open Recent > More...`
	"files.hotExit": "onExit",

	// When enabled, insert a final new line at the end of the file when saving it.
	"files.insertFinalNewline": false,

	// Controls the memory available to VS Code after restart when trying to open large files. Same effect as specifying `--max-memory=NEWSIZE` on the command line.
	"files.maxMemoryForLargeFilesMB": 4096,

	// Timeout in milliseconds after which file participants for create, rename, and delete are cancelled. Use `0` to disable participants.
	"files.participants.timeout": 60000,

	// Restore the undo stack when a file is reopened.
	"files.restoreUndoStack": true,

	// A save conflict can occur when a file is saved to disk that was changed by another program in the meantime. To prevent data loss, the user is asked to compare the changes in the editor with the version on disk. This setting should only be changed if you frequently encounter save conflict errors and may result in data loss if used without caution.
	//  - askUser: Will refuse to save and ask for resolving the save conflict manually.
	//  - overwriteFileOnDisk: Will resolve the save conflict by overwriting the file on disk with the changes in the editor.
	"files.saveConflictResolution": "askUser",

	// Enables the simple file dialog. The simple file dialog replaces the system file dialog when enabled.
	"files.simpleDialog.enable": false,

	// When enabled, will trim all new lines after the final new line at the end of the file when saving it.
	"files.trimFinalNewlines": false,

	// When enabled, will trim trailing whitespace when saving a file.
	"files.trimTrailingWhitespace": false,

	// Configure glob patterns of file paths to exclude from file watching. Patterns must match on absolute paths (i.e. prefix with ** or the full path to match properly). Changing this setting requires a restart. When you experience Code consuming lots of CPU time on startup, you can exclude large folders to reduce the initial load.
	"files.watcherExclude": {
		"**/.git/objects/**": true,
		"**/.git/subtree-cache/**": true,
		"**/node_modules/**": true,
		"**/.hg/store/**": true
	},

	// Controls the font size (in pixels) of the screencast mode keyboard.
	"screencastMode.fontSize": 56,

	// Controls how long (in milliseconds) the keyboard overlay is shown in screencast mode.
	"screencastMode.keyboardOverlayTimeout": 800,

	// Controls the color in hex (#RGB, #RGBA, #RRGGBB or #RRGGBBAA) of the mouse indicator in screencast mode.
	"screencastMode.mouseIndicatorColor": "#FF0000",

	// Controls the size (in pixels) of the mouse indicator in screencast mode.
	"screencastMode.mouseIndicatorSize": 20,

	// Only show keyboard shortcuts in screencast mode.
	"screencastMode.onlyKeyboardShortcuts": false,

	// Controls the vertical offset of the screencast mode overlay from the bottom as a percentage of the workbench height.
	"screencastMode.verticalOffset": 20,

	// Controls whether turning on Zen Mode also centers the layout.
	"zenMode.centerLayout": true,

	// Controls whether turning on Zen Mode also puts the workbench into full screen mode.
	"zenMode.fullScreen": true,

	// Controls whether turning on Zen Mode also hides the activity bar either at the left or right of the workbench.
	"zenMode.hideActivityBar": true,

	// Controls whether turning on Zen Mode also hides the editor line numbers.
	"zenMode.hideLineNumbers": true,

	// Controls whether turning on Zen Mode also hides the status bar at the bottom of the workbench.
	"zenMode.hideStatusBar": true,

	// Controls whether turning on Zen Mode also hides workbench tabs.
	"zenMode.hideTabs": true,

	// Controls whether a window should restore to zen mode if it was exited in zen mode.
	"zenMode.restore": true,

	// Controls whether notifications are shown while in zen mode. If true, only error notifications will pop out.
	"zenMode.silentNotifications": true,

	// Controls whether the explorer should automatically reveal and select files when opening them.
	//  - true: Files will be revealed and selected.
	//  - false: Files will not be revealed and selected.
	//  - focusNoScroll: Files will not be scrolled into view, but will still be focused.
	"explorer.autoReveal": true,

	// Controls whether the explorer should render folders in a compact form. In such a form, single child folders will be compressed in a combined tree element. Useful for Java package structures, for example.
	"explorer.compactFolders": true,

	// Controls whether the explorer should ask for confirmation when deleting a file via the trash.
	"explorer.confirmDelete": true,

	// Controls whether the explorer should ask for confirmation to move files and folders via drag and drop.
	"explorer.confirmDragAndDrop": true,

	// Controls whether file decorations should use badges.
	"explorer.decorations.badges": true,

	// Controls whether file decorations should use colors.
	"explorer.decorations.colors": true,

	// Controls whether the explorer should allow to move files and folders via drag and drop. This setting only effects drag and drop from inside the explorer.
	"explorer.enableDragAndDrop": true,

	// Controls what naming strategy to use when a giving a new name to a duplicated explorer item on paste.
	//  - simple: Appends the word "copy" at the end of the duplicated name potentially followed by a number
	//  - smart: Adds a number at the end of the duplicated name. If some number is already part of the name, tries to increase that number
	"explorer.incrementalNaming": "simple",

	// Controls the sorting order of editors in the Open Editors pane.
	//  - editorOrder: Editors are ordered in the same order editor tabs are shown.
	//  - alphabetical: Editors are ordered in alphabetical order inside each editor group.
	"explorer.openEditors.sortOrder": "editorOrder",

	// Number of editors shown in the Open Editors pane. Setting this to 0 hides the Open Editors pane.
	"explorer.openEditors.visible": 9,

	// Controls sorting order of files and folders in the explorer.
	//  - default: Files and folders are sorted by their names, in alphabetical order. Folders are displayed before files.
	//  - mixed: Files and folders are sorted by their names, in alphabetical order. Files are interwoven with folders.
	//  - filesFirst: Files and folders are sorted by their names, in alphabetical order. Files are displayed before folders.
	//  - type: Files and folders are sorted by their extensions, in alphabetical order. Folders are displayed before files.
	//  - modified: Files and folders are sorted by last modified date, in descending order. Folders are displayed before files.
	"explorer.sortOrder": "default",

	// Controls the positioning of the actionbar on rows in the search view.
	//  - auto: Position the actionbar to the right when the search view is narrow, and immediately after the content when the search view is wide.
	//  - right: Always position the actionbar to the right.
	"search.actionsPosition": "right",

	// Controls whether the search results will be collapsed or expanded.
	//  - auto: Files with less than 10 results are expanded. Others are collapsed.
	//  - alwaysCollapse
	//  - alwaysExpand
	"search.collapseResults": "alwaysExpand",

	// Configure glob patterns for excluding files and folders in fulltext searches and quick open. Inherits all glob patterns from the `files.exclude` setting. Read more about glob patterns [here](https://code.visualstudio.com/docs/editor/codebasics#_advanced-search-options).
	"search.exclude": {
		"**/node_modules": true,
		"**/bower_components": true,
		"**/*.code-search": true
	},

	// Controls whether to follow symlinks while searching.
	"search.followSymlinks": true,

	// Controls whether the search view should read or modify the shared find clipboard on macOS.
	"search.globalFindClipboard": false,

	// This setting is deprecated. Please use drag and drop instead by dragging the search icon.
	// Controls whether the search will be shown as a view in the sidebar or as a panel in the panel area for more horizontal space.
	"search.location": "sidebar",

	// When enabled, the searchService process will be kept alive instead of being shut down after an hour of inactivity. This will keep the file search cache in memory.
	"search.maintainFileSearchCache": false,

	// Controls where new `Search: Find in Files` and `Find in Folder` operations occur: either in the sidebar's search view, or in a search editor
	//  - view: Search in the search view, either in the panel or sidebar.
	//  - reuseEditor: Search in an existing search editor if present, otherwise in a new search editor.
	//  - newEditor: Search in a new search editor.
	"search.mode": "view",

	// Controls sorting order of editor history in quick open when filtering.
	//  - default: History entries are sorted by relevance based on the filter value used. More relevant entries appear first.
	//  - recency: History entries are sorted by recency. More recently opened entries appear first.
	"search.quickOpen.history.filterSortOrder": "default",

	// Whether to include results from recently opened files in the file results for Quick Open.
	"search.quickOpen.includeHistory": true,

	// Whether to include results from a global symbol search in the file results for Quick Open.
	"search.quickOpen.includeSymbols": false,

	// The default number of surrounding context lines to use when creating new Search Editors. If using `search.searchEditor.reusePriorSearchConfiguration`, this can be set to `null` (empty) to use the prior Search Editor's configuration.
	"search.searchEditor.defaultNumberOfContextLines": 1,

	// Configure effect of double clicking a result in a search editor.
	//  - selectWord: Double clicking selects the word under the cursor.
	//  - goToLocation: Double clicking opens the result in the active editor group.
	//  - openLocationToSide: Double clicking opens the result in the editor group to the side, creating one if it does not yet exist.
	"search.searchEditor.doubleClickBehaviour": "goToLocation",

	// When enabled, new Search Editors will reuse the includes, excludes, and flags of the previously opened Search Editor.
	"search.searchEditor.reusePriorSearchConfiguration": false,

	// Search all files as you type.
	"search.searchOnType": true,

	// When `search.searchOnType` is enabled, controls the timeout in milliseconds between a character being typed and the search starting. Has no effect when `search.searchOnType` is disabled.
	"search.searchOnTypeDebouncePeriod": 300,

	// Update the search query to the editor's selected text when focusing the search view. This happens either on click or when triggering the `workbench.views.search.focus` command.
	"search.seedOnFocus": false,

	// Enable seeding search from the word nearest the cursor when the active editor has no selection.
	"search.seedWithNearestWord": false,

	// Controls whether to show line numbers for search results.
	"search.showLineNumbers": false,

	// Search case-insensitively if the pattern is all lowercase, otherwise, search case-sensitively.
	"search.smartCase": false,

	// Controls sorting order of search results.
	//  - default: Results are sorted by folder and file names, in alphabetical order.
	//  - fileNames: Results are sorted by file names ignoring folder order, in alphabetical order.
	//  - type: Results are sorted by file extensions, in alphabetical order.
	//  - modified: Results are sorted by file last modified date, in descending order.
	//  - countDescending: Results are sorted by count per file, in descending order.
	//  - countAscending: Results are sorted by count per file, in ascending order.
	"search.sortOrder": "default",

	// Controls whether to use global `.gitignore` and `.ignore` files when searching for files.
	"search.useGlobalIgnoreFiles": false,

	// Controls whether to use `.gitignore` and `.ignore` files when searching for files.
	"search.useIgnoreFiles": true,

	// Deprecated. PCRE2 will be used automatically when using regex features that are only supported by PCRE2.
	// Whether to use the PCRE2 regex engine in text search. This enables using some advanced regex features like lookahead and backreferences. However, not all PCRE2 features are supported - only features that are also supported by JavaScript.
	"search.usePCRE2": false,

	// Controls whether to open Replace Preview when selecting or replacing a match.
	"search.useReplacePreview": true,

	// Deprecated. Consider "search.usePCRE2" for advanced regex feature support.
	// This setting is deprecated and now falls back on "search.usePCRE2".
	"search.useRipgrep": true,

	// The proxy setting to use. If not set, will be inherited from the `http_proxy` and `https_proxy` environment variables.
	"http.proxy": "",

	// The value to send as the `Proxy-Authorization` header for every network request.
	"http.proxyAuthorization": null,

	// Controls whether the proxy server certificate should be verified against the list of supplied CAs.
	"http.proxyStrictSSL": true,

	// Use the proxy support for extensions.
	//  - off: Disable proxy support for extensions.
	//  - on: Enable proxy support for extensions.
	//  - override: Enable proxy support for extensions, override request options.
	"http.proxySupport": "override",

	// Controls whether CA certificates should be loaded from the OS. (On Windows and macOS, a reload of the window is required after turning this off.)
	"http.systemCertificates": true,

	// Controls the dispatching logic for key presses to use either `code` (recommended) or `keyCode`.
	"keyboard.dispatch": "code",

	// Enables the macOS touchbar buttons on the keyboard if available.
	"keyboard.touchbar.enabled": true,

	// A set of identifiers for entries in the touchbar that should not show up (for example `workbench.action.navigateBack`).
	"keyboard.touchbar.ignored": [],

	// This setting is deprecated, please use 'update.mode' instead.
	// Configure whether you receive automatic updates. Requires a restart after change. The updates are fetched from a Microsoft online service.
	"update.channel": "default",

	// Configure whether you receive automatic updates. Requires a restart after change. The updates are fetched from a Microsoft online service.
	//  - none: Disable updates.
	//  - manual: Disable automatic background update checks. Updates will be available if you manually check for updates.
	//  - start: Check for updates only on startup. Disable automatic background update checks.
	//  - default: Enable automatic update checks. Code will check for updates automatically and periodically.
	"update.mode": "default",

	// Show Release Notes after an update. The Release Notes are fetched from a Microsoft online service.
	"update.showReleaseNotes": true,

	// Controls when the comments panel should open.
	"comments.openPanel": "openOnSessionStartWithComments",

	// Allow setting breakpoints in any file.
	"debug.allowBreakpointsEverywhere": false,

	// Controls if the debug console should be automatically closed when the debug session ends.
	"debug.console.closeOnEnd": false,

	// Controls if the debug console should collapse identical lines and show a number of occurrences with a badge.
	"debug.console.collapseIdenticalLines": true,

	// Controls the font family in the debug console.
	"debug.console.fontFamily": "default",

	// Controls the font size in pixels in the debug console.
	"debug.console.fontSize": 12,

	// Controls if the debug console should suggest previously typed input.
	"debug.console.historySuggestions": true,

	// Controls the line height in pixels in the debug console. Use 0 to compute the line height from the font size.
	"debug.console.lineHeight": 0,

	// Controls if the lines should wrap in the debug console.
	"debug.console.wordWrap": true,

	// Controls whether the workbench window should be focused when the debugger breaks.
	"debug.focusWindowOnBreak": true,

	// Show variable values inline in editor while debugging.
	"debug.inlineValues": false,

	// Controls when the internal debug console should open.
	"debug.internalConsoleOptions": "openOnFirstSessionStart",

	// Controls what to do when errors are encountered after running a preLaunchTask.
	//  - debugAnyway: Ignore task errors and start debugging.
	//  - showErrors: Show the Problems view and do not start debugging.
	//  - prompt: Prompt user.
	//  - abort: Cancel debugging.
	"debug.onTaskErrors": "prompt",

	// Controls when the debug view should open.
	"debug.openDebug": "openOnFirstSessionStart",

	// Automatically open the explorer view at the end of a debug session.
	"debug.openExplorerOnEnd": false,

	// Controls what editors to save before starting a debug session.
	//  - allEditorsInActiveGroup: Save all editors in the active group before starting a debug session.
	//  - nonUntitledEditorsInActiveGroup: Save all editors in the active group except untitled ones before starting a debug session.
	//  - none: Don't save any editors before starting a debug session.
	"debug.saveBeforeStart": "allEditorsInActiveGroup",

	// Controls whether breakpoints should be shown in the overview ruler.
	"debug.showBreakpointsInOverviewRuler": false,

	// Controls whether inline breakpoints candidate decorations should be shown in the editor while debugging.
	"debug.showInlineBreakpointCandidates": true,

	// Controls when the debug status bar should be visible.
	//  - never: Never show debug in status bar
	//  - always: Always show debug in status bar
	//  - onFirstSessionStart: Show debug in status bar only after debug was started for the first time
	"debug.showInStatusBar": "onFirstSessionStart",

	// Controls whether the debug sub-sessions are shown in the debug tool bar. When this setting is false the stop command on a sub-session will also stop the parent session.
	"debug.showSubSessionsInToolBar": false,

	// Before starting a new debug session in an integrated or external terminal, clear the terminal.
	"debug.terminal.clearBeforeReusing": false,

	// Controls the location of the debug toolbar. Either `floating` in all views, `docked` in the debug view, or `hidden`.
	"debug.toolBarLocation": "floating",

	// Global debug launch configuration. Should be used as an alternative to 'launch.json' that is shared across workspaces.
	"launch": {
		"configurations": [],
		"compounds": []
	},

	// Enable/disable autoclosing of HTML tags.
	"html.autoClosingTags": true,

	// A list of relative file paths pointing to JSON files following the [custom data format](https://github.com/microsoft/vscode-html-languageservice/blob/master/docs/customData.md).
	// 
	// VS Code loads custom data on startup to enhance its HTML support for the custom HTML tags, attributes and attribute values you specify in the JSON files.
	// 
	// The file paths are relative to workspace and only workspace folder settings are considered.
	"html.customData": [],

	// List of tags, comma separated, where the content shouldn't be reformatted. `null` defaults to the `pre` tag.
	"html.format.contentUnformatted": "pre,code,textarea",

	// Enable/disable default HTML formatter.
	"html.format.enable": true,

	// End with a newline.
	"html.format.endWithNewline": false,

	// List of tags, comma separated, that should have an extra newline before them. `null` defaults to `"head, body, /html"`.
	"html.format.extraLiners": "head, body, /html",

	// Format and indent `{{#foo}}` and `{{/foo}}`.
	"html.format.indentHandlebars": false,

	// Indent `<head>` and `<body>` sections.
	"html.format.indentInnerHtml": false,

	// Maximum number of line breaks to be preserved in one chunk. Use `null` for unlimited.
	"html.format.maxPreserveNewLines": null,

	// Controls whether existing line breaks before elements should be preserved. Only works before elements, not inside tags or for text.
	"html.format.preserveNewLines": true,

	// Honor django, erb, handlebars and php templating language tags.
	"html.format.templating": false,

	// List of tags, comma separated, that shouldn't be reformatted. `null` defaults to all tags listed at https://www.w3.org/TR/html5/dom.html#phrasing-content.
	"html.format.unformatted": "wbr",

	// Keep text content together between this string.
	"html.format.unformattedContentDelimiter": "",

	// Wrap attributes.
	//  - auto: Wrap attributes only when line length is exceeded.
	//  - force: Wrap each attribute except first.
	//  - force-aligned: Wrap each attribute except first and keep aligned.
	//  - force-expand-multiline: Wrap each attribute.
	//  - aligned-multiple: Wrap when line length is exceeded, align attributes vertically.
	//  - preserve: Preserve wrapping of attributes.
	//  - preserve-aligned: Preserve wrapping of attributes but align.
	"html.format.wrapAttributes": "auto",

	// Alignment size when using 'force aligned' and 'aligned multiple' in `html.format.wrapAttributes` or `null` to use the default indent size.
	"html.format.wrapAttributesIndentSize": null,

	// Maximum amount of characters per line (0 = disable).
	"html.format.wrapLineLength": 120,

	// Show tag and attribute documentation in hover.
	"html.hover.documentation": true,

	// Show references to MDN in hover.
	"html.hover.references": true,

	// Deprecated in favor of `editor.linkedEditing`
	// Enable/disable mirroring cursor on matching HTML tag.
	"html.mirrorCursorOnMatchingTag": false,

	// Controls whether the built-in HTML language support suggests HTML5 tags, properties and values.
	"html.suggest.html5": true,

	// Traces the communication between VS Code and the HTML language server.
	"html.trace.server": "off",

	// Controls whether the built-in HTML language support validates embedded scripts.
	"html.validate.scripts": true,

	// Controls whether the built-in HTML language support validates embedded styles.
	"html.validate.styles": true,

	// The setting `json.colorDecorators.enable` has been deprecated in favor of `editor.colorDecorators`.
	// Enables or disables color decorators
	"json.colorDecorators.enable": true,

	// Enable/disable default JSON formatter
	"json.format.enable": true,

	// The maximum number of outline symbols and folding regions computed (limited for performance reasons).
	"json.maxItemsComputed": 5000,

	// When enabled, JSON schemas can be fetched from http and https locations.
	"json.schemaDownload.enable": true,

	// Associate schemas to JSON files in the current project.
	"json.schemas": [],

	// Traces the communication between VS Code and the JSON language server.
	"json.trace.server": "off",

	// Controls where links in Markdown files should be opened.
	//  - currentGroup: Open links in the active editor group.
	//  - beside: Open links beside the active editor.
	"markdown.links.openLocation": "currentGroup",

	// Sets how line-breaks are rendered in the Markdown preview. Setting it to 'true' creates a <br> for newlines inside paragraphs.
	"markdown.preview.breaks": false,

	// Double click in the Markdown preview to switch to the editor.
	"markdown.preview.doubleClickToSwitchToEditor": true,

	// Controls the font family used in the Markdown preview.
	"markdown.preview.fontFamily": "-apple-system, BlinkMacSystemFont, 'Segoe WPC', 'Segoe UI', system-ui, 'Ubuntu', 'Droid Sans', sans-serif",

	// Controls the font size in pixels used in the Markdown preview.
	"markdown.preview.fontSize": 14,

	// Controls the line height used in the Markdown preview. This number is relative to the font size.
	"markdown.preview.lineHeight": 1.6,

	// Enable or disable conversion of URL-like text to links in the Markdown preview.
	"markdown.preview.linkify": true,

	// Mark the current editor selection in the Markdown preview.
	"markdown.preview.markEditorSelection": true,

	// Controls how links to other Markdown files in the Markdown preview should be opened.
	//  - inPreview: Try to open links in the Markdown preview.
	//  - inEditor: Try to open links in the editor.
	"markdown.preview.openMarkdownLinks": "inPreview",

	// When a Markdown preview is scrolled, update the view of the editor.
	"markdown.preview.scrollEditorWithPreview": true,

	// When a Markdown editor is scrolled, update the view of the preview.
	"markdown.preview.scrollPreviewWithEditor": true,

	// A list of URLs or local paths to CSS style sheets to use from the Markdown preview. Relative paths are interpreted relative to the folder open in the explorer. If there is no open folder, they are interpreted relative to the location of the Markdown file. All '\' need to be written as '\\'.
	"markdown.styles": [],

	// Enable debug logging for the Markdown extension.
	"markdown.trace": "off",

	// Controls whether the built-in PHP language suggestions are enabled. The support suggests PHP globals and variables.
	"php.suggest.basic": true,

	// Enable/disable built-in PHP validation.
	"php.validate.enable": true,

	// Points to the PHP executable.
	"php.validate.executablePath": null,

	// Whether the linter is run on save or on type.
	"php.validate.run": "onSave",

	// Enable/disable automatic closing of JSX tags.
	"javascript.autoClosingTags": true,

	// Enable/disable default JavaScript formatter.
	"javascript.format.enable": true,

	// Defines space handling after a comma delimiter.
	"javascript.format.insertSpaceAfterCommaDelimiter": true,

	// Defines space handling after the constructor keyword.
	"javascript.format.insertSpaceAfterConstructor": false,

	// Defines space handling after function keyword for anonymous functions.
	"javascript.format.insertSpaceAfterFunctionKeywordForAnonymousFunctions": true,

	// Defines space handling after keywords in a control flow statement.
	"javascript.format.insertSpaceAfterKeywordsInControlFlowStatements": true,

	// Defines space handling after opening and before closing empty braces.
	"javascript.format.insertSpaceAfterOpeningAndBeforeClosingEmptyBraces": true,

	// Defines space handling after opening and before closing JSX expression braces.
	"javascript.format.insertSpaceAfterOpeningAndBeforeClosingJsxExpressionBraces": false,

	// Defines space handling after opening and before closing non-empty braces.
	"javascript.format.insertSpaceAfterOpeningAndBeforeClosingNonemptyBraces": true,

	// Defines space handling after opening and before closing non-empty brackets.
	"javascript.format.insertSpaceAfterOpeningAndBeforeClosingNonemptyBrackets": false,

	// Defines space handling after opening and before closing non-empty parenthesis.
	"javascript.format.insertSpaceAfterOpeningAndBeforeClosingNonemptyParenthesis": false,

	// Defines space handling after opening and before closing template string braces.
	"javascript.format.insertSpaceAfterOpeningAndBeforeClosingTemplateStringBraces": false,

	// Defines space handling after a semicolon in a for statement.
	"javascript.format.insertSpaceAfterSemicolonInForStatements": true,

	// Defines space handling after a binary operator.
	"javascript.format.insertSpaceBeforeAndAfterBinaryOperators": true,

	// Defines space handling before function argument parentheses.
	"javascript.format.insertSpaceBeforeFunctionParenthesis": false,

	// Defines whether an open brace is put onto a new line for control blocks or not.
	"javascript.format.placeOpenBraceOnNewLineForControlBlocks": false,

	// Defines whether an open brace is put onto a new line for functions or not.
	"javascript.format.placeOpenBraceOnNewLineForFunctions": false,

	// Defines handling of optional semicolons. Requires using TypeScript 3.7 or newer in the workspace.
	//  - ignore: Don't insert or remove any semicolons.
	//  - insert: Insert semicolons at statement ends.
	//  - remove: Remove unnecessary semicolons.
	"javascript.format.semicolons": "ignore",

	// This setting has been deprecated in favor of `js/ts.implicitProjectConfig.checkJs`.
	// Enable/disable semantic checking of JavaScript files. Existing `jsconfig.json` or `tsconfig.json` files override this setting.
	"javascript.implicitProjectConfig.checkJs": false,

	// This setting has been deprecated in favor of `js/ts.implicitProjectConfig.experimentalDecorators`.
	// Enable/disable `experimentalDecorators` in JavaScript files that are not part of a project. Existing `jsconfig.json` or `tsconfig.json` files override this setting.
	"javascript.implicitProjectConfig.experimentalDecorators": false,

	// Preferred path style for auto imports.
	//  - shortest: Prefers a non-relative import only if one is available that has fewer path segments than a relative import.
	//  - relative: Prefers a relative path to the imported file location.
	//  - non-relative: Prefers a non-relative import based on the `baseUrl` or `paths` configured in your `jsconfig.json` / `tsconfig.json`.
	//  - project-relative: Prefers a non-relative import only if the relative import path would leave the package or project directory. Requires using TypeScript 4.2+ in the workspace.
	"javascript.preferences.importModuleSpecifier": "shortest",

	// Preferred path ending for auto imports.
	//  - auto: Use project settings to select a default.
	//  - minimal: Shorten `./component/index.js` to `./component`.
	//  - index: Shorten `./component/index.js` to `./component/index`.
	//  - js: Do not shorten path endings; include the `.js` extension.
	"javascript.preferences.importModuleSpecifierEnding": "auto",

	// Preferred quote style to use for quick fixes: `single` quotes, `double` quotes, or `auto` infer quote type from existing imports.
	"javascript.preferences.quoteStyle": "auto",

	// The setting 'typescript.preferences.renameShorthandProperties' has been deprecated in favor of 'typescript.preferences.useAliasesForRenames'
	// Enable/disable introducing aliases for object shorthand properties during renames. Requires using TypeScript 3.4 or newer in the workspace.
	"javascript.preferences.renameShorthandProperties": true,

	// Enable/disable introducing aliases for object shorthand properties during renames. Requires using TypeScript 3.4 or newer in the workspace.
	"javascript.preferences.useAliasesForRenames": true,

	// Enable/disable references CodeLens in JavaScript files.
	"javascript.referencesCodeLens.enabled": false,

	// Enable/disable references CodeLens on all functions in JavaScript files.
	"javascript.referencesCodeLens.showOnAllFunctions": false,

	// Enable/disable auto import suggestions.
	"javascript.suggest.autoImports": true,

	// Complete functions with their parameter signature.
	"javascript.suggest.completeFunctionCalls": false,

	// Enable/disable suggestion to complete JSDoc comments.
	"javascript.suggest.completeJSDocs": true,

	// Enabled/disable autocomplete suggestions.
	"javascript.suggest.enabled": true,

	// Enable/disable showing completions on potentially undefined values that insert an optional chain call. Requires TS 3.7+ and strict null checks to be enabled.
	"javascript.suggest.includeAutomaticOptionalChainCompletions": true,

	// Enable/disable generating `@return` annotations for JSDoc templates. Requires using TypeScript 4.2+ in the workspace.
	"javascript.suggest.jsdoc.generateReturns": true,

	// Enable/disable including unique names from the file in JavaScript suggestions. Note that name suggestions are always disabled in JavaScript code that is semantically checked using `@ts-check` or `checkJs`.
	"javascript.suggest.names": true,

	// Enable/disable suggestions for paths in import statements and require calls.
	"javascript.suggest.paths": true,

	// Enable/disable suggestion diagnostics for JavaScript files in the editor.
	"javascript.suggestionActions.enabled": true,

	// Enable/disable automatic updating of import paths when you rename or move a file in VS Code.
	//  - prompt: Prompt on each rename.
	//  - always: Always update paths automatically.
	//  - never: Never rename paths and don't prompt.
	"javascript.updateImportsOnFileMove.enabled": "prompt",

	// Enable/disable JavaScript validation.
	"javascript.validate.enable": true,

	// Enable/disable semantic checking of JavaScript files. Existing `jsconfig.json` or `tsconfig.json` files override this setting.
	"js/ts.implicitProjectConfig.checkJs": false,

	// Enable/disable `experimentalDecorators` in JavaScript files that are not part of a project. Existing `jsconfig.json` or `tsconfig.json` files override this setting.
	"js/ts.implicitProjectConfig.experimentalDecorators": false,

	// Enable/disable [strict function types](https://www.typescriptlang.org/tsconfig#strictFunctionTypes) in JavaScript and TypeScript files that are not part of a project. Existing `jsconfig.json` or `tsconfig.json` files override this setting.
	"js/ts.implicitProjectConfig.strictFunctionTypes": true,

	// Enable/disable [strict null checks](https://www.typescriptlang.org/tsconfig#strictNullChecks) in JavaScript and TypeScript files that are not part of a project. Existing `jsconfig.json` or `tsconfig.json` files override this setting.
	"js/ts.implicitProjectConfig.strictNullChecks": false,

	// Enable/disable automatic closing of JSX tags.
	"typescript.autoClosingTags": true,

	// Check if npm is installed for Automatic Type Acquisition.
	"typescript.check.npmIsInstalled": true,

	// Disables automatic type acquisition. Automatic type acquisition fetches `@types` packages from npm to improve IntelliSense for external libraries.
	"typescript.disableAutomaticTypeAcquisition": false,

	// Enables prompting of users to use the TypeScript version configured in the workspace for Intellisense.
	"typescript.enablePromptUseWorkspaceTsdk": false,

	// Enable/disable default TypeScript formatter.
	"typescript.format.enable": true,

	// Defines space handling after a comma delimiter.
	"typescript.format.insertSpaceAfterCommaDelimiter": true,

	// Defines space handling after the constructor keyword.
	"typescript.format.insertSpaceAfterConstructor": false,

	// Defines space handling after function keyword for anonymous functions.
	"typescript.format.insertSpaceAfterFunctionKeywordForAnonymousFunctions": true,

	// Defines space handling after keywords in a control flow statement.
	"typescript.format.insertSpaceAfterKeywordsInControlFlowStatements": true,

	// Defines space handling after opening and before closing empty braces.
	"typescript.format.insertSpaceAfterOpeningAndBeforeClosingEmptyBraces": true,

	// Defines space handling after opening and before closing JSX expression braces.
	"typescript.format.insertSpaceAfterOpeningAndBeforeClosingJsxExpressionBraces": false,

	// Defines space handling after opening and before closing non-empty braces.
	"typescript.format.insertSpaceAfterOpeningAndBeforeClosingNonemptyBraces": true,

	// Defines space handling after opening and before closing non-empty brackets.
	"typescript.format.insertSpaceAfterOpeningAndBeforeClosingNonemptyBrackets": false,

	// Defines space handling after opening and before closing non-empty parenthesis.
	"typescript.format.insertSpaceAfterOpeningAndBeforeClosingNonemptyParenthesis": false,

	// Defines space handling after opening and before closing template string braces.
	"typescript.format.insertSpaceAfterOpeningAndBeforeClosingTemplateStringBraces": false,

	// Defines space handling after a semicolon in a for statement.
	"typescript.format.insertSpaceAfterSemicolonInForStatements": true,

	// Defines space handling after type assertions in TypeScript.
	"typescript.format.insertSpaceAfterTypeAssertion": false,

	// Defines space handling after a binary operator.
	"typescript.format.insertSpaceBeforeAndAfterBinaryOperators": true,

	// Defines space handling before function argument parentheses.
	"typescript.format.insertSpaceBeforeFunctionParenthesis": false,

	// Defines whether an open brace is put onto a new line for control blocks or not.
	"typescript.format.placeOpenBraceOnNewLineForControlBlocks": false,

	// Defines whether an open brace is put onto a new line for functions or not.
	"typescript.format.placeOpenBraceOnNewLineForFunctions": false,

	// Defines handling of optional semicolons. Requires using TypeScript 3.7 or newer in the workspace.
	//  - ignore: Don't insert or remove any semicolons.
	//  - insert: Insert semicolons at statement ends.
	//  - remove: Remove unnecessary semicolons.
	"typescript.format.semicolons": "ignore",

	// Enable/disable implementations CodeLens. This CodeLens shows the implementers of an interface.
	"typescript.implementationsCodeLens.enabled": false,

	// Sets the locale used to report JavaScript and TypeScript errors. Default of `null` uses VS Code's locale.
	"typescript.locale": null,

	// Specifies the path to the npm executable used for Automatic Type Acquisition.
	"typescript.npm": null,

	// Preferred path style for auto imports.
	//  - shortest: Prefers a non-relative import only if one is available that has fewer path segments than a relative import.
	//  - relative: Prefers a relative path to the imported file location.
	//  - non-relative: Prefers a non-relative import based on the `baseUrl` or `paths` configured in your `jsconfig.json` / `tsconfig.json`.
	//  - project-relative: Prefers a non-relative import only if the relative import path would leave the package or project directory. Requires using TypeScript 4.2+ in the workspace.
	"typescript.preferences.importModuleSpecifier": "shortest",

	// Preferred path ending for auto imports.
	//  - auto: Use project settings to select a default.
	//  - minimal: Shorten `./component/index.js` to `./component`.
	//  - index: Shorten `./component/index.js` to `./component/index`.
	//  - js: Do not shorten path endings; include the `.js` extension.
	"typescript.preferences.importModuleSpecifierEnding": "auto",

	// Enable/disable searching `package.json` dependencies for available auto imports.
	//  - auto: Search dependencies based on estimated performance impact.
	//  - on: Always search dependencies.
	//  - off: Never search dependencies.
	"typescript.preferences.includePackageJsonAutoImports": "auto",

	// Preferred quote style to use for quick fixes: `single` quotes, `double` quotes, or `auto` infer quote type from existing imports.
	"typescript.preferences.quoteStyle": "auto",

	// The setting 'typescript.preferences.renameShorthandProperties' has been deprecated in favor of 'typescript.preferences.useAliasesForRenames'
	// Enable/disable introducing aliases for object shorthand properties during renames. Requires using TypeScript 3.4 or newer in the workspace.
	"typescript.preferences.renameShorthandProperties": true,

	// Enable/disable introducing aliases for object shorthand properties during renames. Requires using TypeScript 3.4 or newer in the workspace.
	"typescript.preferences.useAliasesForRenames": true,

	// Enable/disable references CodeLens in TypeScript files.
	"typescript.referencesCodeLens.enabled": false,

	// Enable/disable references CodeLens on all functions in TypeScript files.
	"typescript.referencesCodeLens.showOnAllFunctions": false,

	// Report style checks as warnings.
	"typescript.reportStyleChecksAsWarnings": true,

	// Enable/disable auto import suggestions.
	"typescript.suggest.autoImports": true,

	// Complete functions with their parameter signature.
	"typescript.suggest.completeFunctionCalls": false,

	// Enable/disable suggestion to complete JSDoc comments.
	"typescript.suggest.completeJSDocs": true,

	// Enabled/disable autocomplete suggestions.
	"typescript.suggest.enabled": true,

	// Enable/disable showing completions on potentially undefined values that insert an optional chain call. Requires TS 3.7+ and strict null checks to be enabled.
	"typescript.suggest.includeAutomaticOptionalChainCompletions": true,

	// Enable/disable generating `@return` annotations for JSDoc templates. Requires using TypeScript 4.2+ in the workspace.
	"typescript.suggest.jsdoc.generateReturns": true,

	// Enable/disable suggestions for paths in import statements and require calls.
	"typescript.suggest.paths": true,

	// Enable/disable suggestion diagnostics for TypeScript files in the editor.
	"typescript.suggestionActions.enabled": true,

	// Enabled/disable occasional surveys that help us improve VS Code's JavaScript and TypeScript support.
	"typescript.surveys.enabled": true,

	// Controls auto detection of tsc tasks.
	//  - on: Create both build and watch tasks.
	//  - off: Disable this feature.
	//  - build: Only create single run compile tasks.
	//  - watch: Only create compile and watch tasks.
	"typescript.tsc.autoDetect": "on",

	// Specifies the folder path to the tsserver and lib*.d.ts files under a TypeScript install to use for IntelliSense, for example: `./node_modules/typescript/lib`.
	// 
	// - When specified as a user setting, the TypeScript version from `typescript.tsdk` automatically replaces the built-in TypeScript version.
	// - When specified as a workspace setting, `typescript.tsdk` allows you to switch to use that workspace version of TypeScript for IntelliSense with the `TypeScript: Select TypeScript version` command.
	// 
	// See the [TypeScript documentation](https://code.visualstudio.com/docs/typescript/typescript-compiling#_using-newer-typescript-versions) for more detail about managing TypeScript versions.
	"typescript.tsdk": null,

	// Enables tracing TS server performance to a directory. These trace files can be used to diagnose TS Server performance issues. The log may contain file paths, source code, and other potentially sensitive information from your project.
	"typescript.tsserver.enableTracing": false,

	// (Experimental) Enables project wide error reporting.
	"typescript.tsserver.experimental.enableProjectDiagnostics": false,

	// Enables logging of the TS server to a file. This log can be used to diagnose TS Server issues. The log may contain file paths, source code, and other potentially sensitive information from your project.
	"typescript.tsserver.log": "off",

	// Set the maximum amount of memory (in MB) to allocate to the TypeScript server process
	"typescript.tsserver.maxTsServerMemory": 3072,

	// Additional paths to discover TypeScript Language Service plugins.
	"typescript.tsserver.pluginPaths": [],

	// Enables tracing of messages sent to the TS server. This trace can be used to diagnose TS Server issues. The trace may contain file paths, source code, and other potentially sensitive information from your project.
	"typescript.tsserver.trace": "off",

	// Enable/disable spawning a separate TypeScript server that can more quickly respond to syntax related operations, such as calculating folding or computing document symbols. Requires using TypeScript 3.4.0 or newer in the workspace.
	"typescript.tsserver.useSeparateSyntaxServer": true,

	// Configure which watching strategies should be used to keep track of files and directories. Requires using TypeScript 3.8+ in the workspace.
	"typescript.tsserver.watchOptions": {},

	// Enable/disable automatic updating of import paths when you rename or move a file in VS Code.
	//  - prompt: Prompt on each rename.
	//  - always: Always update paths automatically.
	//  - never: Never rename paths and don't prompt.
	"typescript.updateImportsOnFileMove.enabled": "prompt",

	// Enable/disable TypeScript validation.
	"typescript.validate.enable": true,

	// Controls which files are searched by [go to symbol in workspace](https://code.visualstudio.com/docs/editor/editingevolved#_open-symbol-by-name).
	//  - allOpenProjects: Search all open JavaScript or TypeScript projects for symbols. Requires using TypeScript 3.9 or newer in the workspace.
	//  - currentProject: Only search for symbols in the current JavaScript or TypeScript project.
	"typescript.workspaceSymbols.scope": "allOpenProjects",

	// Configures when the error peek view is automatically opened.
	//  - failureAnywhere: Open automatically no matter where the failure is.
	//  - failureInVisibleDocument: Open automatically when a test fails in a visible document.
	"testing.automaticallyOpenPeekView": "failureInVisibleDocument",

	// Controls whether to automatically open the peek view during auto-run mode.
	"testing.automaticallyOpenPeekViewDuringAutoRun": false,

	// How long to wait, in milliseconds, after a test is marked as outdated and starting a new run.
	"testing.autoRun.delay": 1000,

	// Controls which tests are automatically run.
	//  - all: Automatically runs all discovered test when auto-run is toggled. Re-runs individual tests when they are changed.
	//  - rerun: Re-runs individual tests when they are changed. Will not automatically run any tests that have not been already executed.
	"testing.autoRun.mode": "all",

	// Insert semicolon at end of line when completing CSS properties.
	"css.completion.completePropertyWithSemicolon": true,

	// By default, VS Code triggers property value completion after selecting a CSS property. Use this setting to disable this behavior.
	"css.completion.triggerPropertyValueCompletion": true,

	// A list of relative file paths pointing to JSON files following the [custom data format](https://github.com/microsoft/vscode-css-languageservice/blob/master/docs/customData.md).
	// 
	// VS Code loads custom data on startup to enhance its CSS support for the custom CSS properties, at directives, pseudo classes and pseudo elements you specify in the JSON files.
	// 
	// The file paths are relative to workspace and only workspace folder settings are considered.
	"css.customData": [],

	// Show tag and attribute documentation in CSS hovers.
	"css.hover.documentation": true,

	// Show references to MDN in CSS hovers.
	"css.hover.references": true,

	// Invalid number of parameters.
	"css.lint.argumentsInColorFunction": "error",

	// Do not use `width` or `height` when using `padding` or `border`.
	"css.lint.boxModel": "ignore",

	// When using a vendor-specific prefix make sure to also include all other vendor-specific properties.
	"css.lint.compatibleVendorPrefixes": "ignore",

	// Do not use duplicate style definitions.
	"css.lint.duplicateProperties": "ignore",

	// Do not use empty rulesets.
	"css.lint.emptyRules": "warning",

	// Avoid using `float`. Floats lead to fragile CSS that is easy to break if one aspect of the layout changes.
	"css.lint.float": "ignore",

	// `@font-face` rule must define `src` and `font-family` properties.
	"css.lint.fontFaceProperties": "warning",

	// Hex colors must consist of three or six hex numbers.
	"css.lint.hexColorLength": "error",

	// Selectors should not contain IDs because these rules are too tightly coupled with the HTML.
	"css.lint.idSelector": "ignore",

	// IE hacks are only necessary when supporting IE7 and older.
	"css.lint.ieHack": "ignore",

	// Avoid using `!important`. It is an indication that the specificity of the entire CSS has gotten out of control and needs to be refactored.
	"css.lint.important": "ignore",

	// Import statements do not load in parallel.
	"css.lint.importStatement": "ignore",

	// Property is ignored due to the display. E.g. with `display: inline`, the `width`, `height`, `margin-top`, `margin-bottom`, and `float` properties have no effect.
	"css.lint.propertyIgnoredDueToDisplay": "warning",

	// The universal selector (`*`) is known to be slow.
	"css.lint.universalSelector": "ignore",

	// Unknown at-rule.
	"css.lint.unknownAtRules": "warning",

	// Unknown property.
	"css.lint.unknownProperties": "warning",

	// Unknown vendor specific property.
	"css.lint.unknownVendorSpecificProperties": "ignore",

	// A list of properties that are not validated against the `unknownProperties` rule.
	"css.lint.validProperties": [],

	// When using a vendor-specific prefix, also include the standard property.
	"css.lint.vendorPrefix": "warning",

	// No unit for zero needed.
	"css.lint.zeroUnits": "ignore",

	// Traces the communication between VS Code and the CSS language server.
	"css.trace.server": "off",

	// Enables or disables all validations.
	"css.validate": true,

	// Insert semicolon at end of line when completing CSS properties.
	"less.completion.completePropertyWithSemicolon": true,

	// By default, VS Code triggers property value completion after selecting a CSS property. Use this setting to disable this behavior.
	"less.completion.triggerPropertyValueCompletion": true,

	// Show tag and attribute documentation in LESS hovers.
	"less.hover.documentation": true,

	// Show references to MDN in LESS hovers.
	"less.hover.references": true,

	// Invalid number of parameters.
	"less.lint.argumentsInColorFunction": "error",

	// Do not use `width` or `height` when using `padding` or `border`.
	"less.lint.boxModel": "ignore",

	// When using a vendor-specific prefix make sure to also include all other vendor-specific properties.
	"less.lint.compatibleVendorPrefixes": "ignore",

	// Do not use duplicate style definitions.
	"less.lint.duplicateProperties": "ignore",

	// Do not use empty rulesets.
	"less.lint.emptyRules": "warning",

	// Avoid using `float`. Floats lead to fragile CSS that is easy to break if one aspect of the layout changes.
	"less.lint.float": "ignore",

	// `@font-face` rule must define `src` and `font-family` properties.
	"less.lint.fontFaceProperties": "warning",

	// Hex colors must consist of three or six hex numbers.
	"less.lint.hexColorLength": "error",

	// Selectors should not contain IDs because these rules are too tightly coupled with the HTML.
	"less.lint.idSelector": "ignore",

	// IE hacks are only necessary when supporting IE7 and older.
	"less.lint.ieHack": "ignore",

	// Avoid using `!important`. It is an indication that the specificity of the entire CSS has gotten out of control and needs to be refactored.
	"less.lint.important": "ignore",

	// Import statements do not load in parallel.
	"less.lint.importStatement": "ignore",

	// Property is ignored due to the display. E.g. with `display: inline`, the `width`, `height`, `margin-top`, `margin-bottom`, and `float` properties have no effect.
	"less.lint.propertyIgnoredDueToDisplay": "warning",

	// The universal selector (`*`) is known to be slow.
	"less.lint.universalSelector": "ignore",

	// Unknown at-rule.
	"less.lint.unknownAtRules": "warning",

	// Unknown property.
	"less.lint.unknownProperties": "warning",

	// Unknown vendor specific property.
	"less.lint.unknownVendorSpecificProperties": "ignore",

	// A list of properties that are not validated against the `unknownProperties` rule.
	"less.lint.validProperties": [],

	// When using a vendor-specific prefix, also include the standard property.
	"less.lint.vendorPrefix": "warning",

	// No unit for zero needed.
	"less.lint.zeroUnits": "ignore",

	// Enables or disables all validations.
	"less.validate": true,

	// Insert semicolon at end of line when completing CSS properties.
	"scss.completion.completePropertyWithSemicolon": true,

	// By default, VS Code triggers property value completion after selecting a CSS property. Use this setting to disable this behavior.
	"scss.completion.triggerPropertyValueCompletion": true,

	// Show tag and attribute documentation in SCSS hovers.
	"scss.hover.documentation": true,

	// Show references to MDN in SCSS hovers.
	"scss.hover.references": true,

	// Invalid number of parameters.
	"scss.lint.argumentsInColorFunction": "error",

	// Do not use `width` or `height` when using `padding` or `border`.
	"scss.lint.boxModel": "ignore",

	// When using a vendor-specific prefix make sure to also include all other vendor-specific properties.
	"scss.lint.compatibleVendorPrefixes": "ignore",

	// Do not use duplicate style definitions.
	"scss.lint.duplicateProperties": "ignore",

	// Do not use empty rulesets.
	"scss.lint.emptyRules": "warning",

	// Avoid using `float`. Floats lead to fragile CSS that is easy to break if one aspect of the layout changes.
	"scss.lint.float": "ignore",

	// `@font-face` rule must define `src` and `font-family` properties.
	"scss.lint.fontFaceProperties": "warning",

	// Hex colors must consist of three or six hex numbers.
	"scss.lint.hexColorLength": "error",

	// Selectors should not contain IDs because these rules are too tightly coupled with the HTML.
	"scss.lint.idSelector": "ignore",

	// IE hacks are only necessary when supporting IE7 and older.
	"scss.lint.ieHack": "ignore",

	// Avoid using `!important`. It is an indication that the specificity of the entire CSS has gotten out of control and needs to be refactored.
	"scss.lint.important": "ignore",

	// Import statements do not load in parallel.
	"scss.lint.importStatement": "ignore",

	// Property is ignored due to the display. E.g. with `display: inline`, the `width`, `height`, `margin-top`, `margin-bottom`, and `float` properties have no effect.
	"scss.lint.propertyIgnoredDueToDisplay": "warning",

	// The universal selector (`*`) is known to be slow.
	"scss.lint.universalSelector": "ignore",

	// Unknown at-rule.
	"scss.lint.unknownAtRules": "warning",

	// Unknown property.
	"scss.lint.unknownProperties": "warning",

	// Unknown vendor specific property.
	"scss.lint.unknownVendorSpecificProperties": "ignore",

	// A list of properties that are not validated against the `unknownProperties` rule.
	"scss.lint.validProperties": [],

	// When using a vendor-specific prefix, also include the standard property.
	"scss.lint.vendorPrefix": "warning",

	// No unit for zero needed.
	"scss.lint.zeroUnits": "ignore",

	// Enables or disables all validations.
	"scss.validate": true,

	// When enabled, automatically checks extensions for updates. If an extension has an update, it is marked as outdated in the Extensions view. The updates are fetched from a Microsoft online service.
	"extensions.autoCheckUpdates": true,

	// When enabled, automatically installs updates for extensions. The updates are fetched from a Microsoft online service.
	"extensions.autoUpdate": true,

	// When enabled, editors with extension details will be automatically closed upon navigating away from the Extensions View.
	"extensions.closeExtensionDetailsOnViewChange": false,

	// When an extension is listed here, a confirmation prompt will not be shown when that extension handles a URI.
	"extensions.confirmedUriHandlerExtensionIds": [],

	// When enabled, the notifications for extension recommendations will not be shown.
	"extensions.ignoreRecommendations": false,

	// This setting is deprecated. Use extensions.ignoreRecommendations setting to control recommendation notifications. Use Extensions view's visibility actions to hide Recommended view by default.
	// 
	"extensions.showRecommendationsOnlyOnDemand": false,

	// Enable web worker extension host.
	"extensions.webWorker": false,

	// Enable/disable the ability of smart scrolling in the output view. Smart scrolling allows you to lock scrolling automatically when you click in the output view and unlocks when you click in the last line.
	"output.smartScroll.enabled": true,

	// List of extensions to be ignored while synchronizing. The identifier of an extension is always `${publisher}.${name}`. For example: `vscode.csharp`.
	"settingsSync.ignoredExtensions": [],

	// Configure settings to be ignored while synchronizing.
	"settingsSync.ignoredSettings": [],

	// Synchronize keybindings for each platform.
	"settingsSync.keybindingsPerPlatform": true,

	// When enabled notebook breadcrumbs contain code cells.
	"notebook.breadcrumbs.showCodeCells": true,

	// Where the cell toolbar should be shown, or whether it should be hidden.
	"notebook.cellToolbarLocation": "right",

	// Whether to use the enhanced text diff editor for notebook.
	"notebook.diff.enablePreview": true,

	// Hide Metadata Differences
	"notebook.diff.ignoreMetadata": false,

	// Hide Outputs Differences
	"notebook.diff.ignoreOutputs": false,

	// Priority list for output mime types
	"notebook.displayOrder": [],

	// When enabled notebook outline shows code cells.
	"notebook.outline.showCodeCells": false,

	// Whether the cell status bar should be shown.
	"notebook.showCellStatusBar": true,

	// Customizes what kind of terminal to launch.
	//  - integrated: Use VS Code's integrated terminal.
	//  - external: Use the configured external terminal.
	"terminal.explorerKind": "integrated",

	// Customizes which terminal to run on Linux.
	"terminal.external.linuxExec": "xterm",

	// Customizes which terminal application to run on macOS.
	"terminal.external.osxExec": "Terminal.app",

	// Customizes which terminal to run on Windows.
	"terminal.external.windowsExec": "C:\\Windows\\System32\\cmd.exe",

	// Whether or not to allow chord keybindings in the terminal. Note that when this is true and the keystroke results in a chord it will bypass `terminal.integrated.commandsToSkipShell`, setting this to false is particularly useful when you want ctrl+k to go to your shell (not VS Code).
	"terminal.integrated.allowChords": true,

	// Whether to allow menubar mnemonics (eg. alt+f) to trigger the open the menubar. Note that this will cause all alt keystrokes to skip the shell when true. This does nothing on macOS.
	"terminal.integrated.allowMnemonics": false,

	// If enabled, alt/option + click will reposition the prompt cursor to underneath the mouse when `editor.multiCursorModifier` is set to `'alt'` (the default value). This may not work reliably depending on your shell.
	"terminal.integrated.altClickMovesCursor": true,

	// A path that when set will override `terminal.integrated.shell.linux` and ignore `shellArgs` values for automation-related terminal usage like tasks and debug.
	"terminal.integrated.automationShell.linux": null,

	// A path that when set will override `terminal.integrated.shell.osx` and ignore `shellArgs` values for automation-related terminal usage like tasks and debug.
	"terminal.integrated.automationShell.osx": null,

	// A path that when set will override `terminal.integrated.shell.windows` and ignore `shellArgs` values for automation-related terminal usage like tasks and debug.
	"terminal.integrated.automationShell.windows": null,

	// A set of command IDs whose keybindings will not be sent to the shell but instead always be handled by VS Code. This allows keybindings that would normally be consumed by the shell to act instead the same as when the terminal is not focused, for example `Ctrl+P` to launch Quick Open.
	// 
	// &nbsp;
	// 
	// Many commands are skipped by default. To override a default and pass that command's keybinding to the shell instead, add the command prefixed with the `-` character. For example add `-workbench.action.quickOpen` to allow `Ctrl+P` to reach the shell.
	// 
	// &nbsp;
	// 
	// The following list of default skipped commands is truncated when viewed in Settings Editor. To see the full list, [open the default settings JSON](command:workbench.action.openRawDefaultSettings 'Open Default Settings (JSON)') and search for the first command from the list below.
	// 
	// &nbsp;
	// 
	// Default Skipped Commands:
	// 
	// - editor.action.toggleTabFocusMode
	// - workbench.action.debug.continue
	// - workbench.action.debug.pause
	// - workbench.action.debug.restart
	// - workbench.action.debug.run
	// - workbench.action.debug.start
	// - workbench.action.debug.stepInto
	// - workbench.action.debug.stepOut
	// - workbench.action.debug.stepOver
	// - workbench.action.debug.stop
	// - workbench.action.firstEditorInGroup
	// - workbench.action.focusActiveEditorGroup
	// - workbench.action.focusEighthEditorGroup
	// - workbench.action.focusFifthEditorGroup
	// - workbench.action.focusFirstEditorGroup
	// - workbench.action.focusFourthEditorGroup
	// - workbench.action.focusLastEditorGroup
	// - workbench.action.focusNextPart
	// - workbench.action.focusPreviousPart
	// - workbench.action.focusSecondEditorGroup
	// - workbench.action.focusSeventhEditorGroup
	// - workbench.action.focusSixthEditorGroup
	// - workbench.action.focusThirdEditorGroup
	// - workbench.action.lastEditorInGroup
	// - workbench.action.navigateDown
	// - workbench.action.navigateLeft
	// - workbench.action.navigateRight
	// - workbench.action.navigateUp
	// - workbench.action.nextEditor
	// - workbench.action.nextEditorInGroup
	// - workbench.action.nextPanelView
	// - workbench.action.nextSideBarView
	// - workbench.action.openNextRecentlyUsedEditor
	// - workbench.action.openNextRecentlyUsedEditorInGroup
	// - workbench.action.openPreviousRecentlyUsedEditor
	// - workbench.action.openPreviousRecentlyUsedEditorInGroup
	// - workbench.action.previousEditor
	// - workbench.action.previousEditorInGroup
	// - workbench.action.previousPanelView
	// - workbench.action.previousSideBarView
	// - workbench.action.quickOpen
	// - workbench.action.quickOpenLeastRecentlyUsedEditor
	// - workbench.action.quickOpenLeastRecentlyUsedEditorInGroup
	// - workbench.action.quickOpenPreviousEditor
	// - workbench.action.quickOpenPreviousRecentlyUsedEditor
	// - workbench.action.quickOpenPreviousRecentlyUsedEditorInGroup
	// - workbench.action.quickOpenView
	// - workbench.action.showCommands
	// - workbench.action.tasks.build
	// - workbench.action.tasks.reRunTask
	// - workbench.action.tasks.restartTask
	// - workbench.action.tasks.runTask
	// - workbench.action.tasks.showLog
	// - workbench.action.tasks.showTasks
	// - workbench.action.tasks.terminate
	// - workbench.action.tasks.test
	// - workbench.action.terminal.clear
	// - workbench.action.terminal.clearSelection
	// - workbench.action.terminal.copySelection
	// - workbench.action.terminal.deleteToLineStart
	// - workbench.action.terminal.deleteWordLeft
	// - workbench.action.terminal.deleteWordRight
	// - workbench.action.terminal.findNext
	// - workbench.action.terminal.findPrevious
	// - workbench.action.terminal.focus
	// - workbench.action.terminal.focusAtIndex1
	// - workbench.action.terminal.focusAtIndex2
	// - workbench.action.terminal.focusAtIndex3
	// - workbench.action.terminal.focusAtIndex4
	// - workbench.action.terminal.focusAtIndex5
	// - workbench.action.terminal.focusAtIndex6
	// - workbench.action.terminal.focusAtIndex7
	// - workbench.action.terminal.focusAtIndex8
	// - workbench.action.terminal.focusAtIndex9
	// - workbench.action.terminal.focusFind
	// - workbench.action.terminal.focusNext
	// - workbench.action.terminal.focusNextPane
	// - workbench.action.terminal.focusPrevious
	// - workbench.action.terminal.focusPreviousPane
	// - workbench.action.terminal.hideFind
	// - workbench.action.terminal.kill
	// - workbench.action.terminal.moveToLineEnd
	// - workbench.action.terminal.moveToLineStart
	// - workbench.action.terminal.navigationModeExit
	// - workbench.action.terminal.navigationModeFocusNext
	// - workbench.action.terminal.navigationModeFocusPrevious
	// - workbench.action.terminal.new
	// - workbench.action.terminal.newInActiveWorkspace
	// - workbench.action.terminal.paste
	// - workbench.action.terminal.resizePaneDown
	// - workbench.action.terminal.resizePaneLeft
	// - workbench.action.terminal.resizePaneRight
	// - workbench.action.terminal.resizePaneUp
	// - workbench.action.terminal.runActiveFile
	// - workbench.action.terminal.runSelectedText
	// - workbench.action.terminal.scrollDown
	// - workbench.action.terminal.scrollDownPage
	// - workbench.action.terminal.scrollToBottom
	// - workbench.action.terminal.scrollToNextCommand
	// - workbench.action.terminal.scrollToPreviousCommand
	// - workbench.action.terminal.scrollToTop
	// - workbench.action.terminal.scrollUp
	// - workbench.action.terminal.scrollUpPage
	// - workbench.action.terminal.selectAll
	// - workbench.action.terminal.selectToNextCommand
	// - workbench.action.terminal.selectToNextLine
	// - workbench.action.terminal.selectToPreviousCommand
	// - workbench.action.terminal.selectToPreviousLine
	// - workbench.action.terminal.sendSequence
	// - workbench.action.terminal.split
	// - workbench.action.terminal.splitInActiveWorkspace
	// - workbench.action.terminal.toggleFindCaseSensitive
	// - workbench.action.terminal.toggleFindRegex
	// - workbench.action.terminal.toggleFindWholeWord
	// - workbench.action.terminal.toggleTerminal
	// - workbench.action.toggleFullScreen
	// - workbench.action.toggleMaximizedPanel
	// - workbench.action.togglePanel
	"terminal.integrated.commandsToSkipShell": [],

	// Controls whether to confirm on exit if there are active terminal sessions.
	"terminal.integrated.confirmOnExit": false,

	// Controls whether text selected in the terminal will be copied to the clipboard.
	"terminal.integrated.copyOnSelection": false,

	// Controls whether the terminal cursor blinks.
	"terminal.integrated.cursorBlinking": false,

	// Controls the style of terminal cursor.
	"terminal.integrated.cursorStyle": "block",

	// Controls the width of the cursor when `terminal.integrated.cursorStyle` is set to `line`.
	"terminal.integrated.cursorWidth": 1,

	// An explicit start path where the terminal will be launched, this is used as the current working directory (cwd) for the shell process. This may be particularly useful in workspace settings if the root directory is not a convenient cwd.
	"terminal.integrated.cwd": "",

	// Controls whether to detect and set the `$LANG` environment variable to a UTF-8 compliant option since VS Code's terminal only supports UTF-8 encoded data coming from the shell.
	//  - auto: Set the `$LANG` environment variable if the existing variable does not exist or it does not end in `'.UTF-8'`.
	//  - off: Do not set the `$LANG` environment variable.
	//  - on: Always set the `$LANG` environment variable.
	"terminal.integrated.detectLocale": "auto",

	// Controls whether bold text in the terminal will always use the "bright" ANSI color variant.
	"terminal.integrated.drawBoldTextInBrightColors": true,

	// Controls whether the terminal bell is enabled.
	"terminal.integrated.enableBell": false,

	// Whether to enable file links in the terminal. Links can be slow when working on a network drive in particular because each file link is verified against the file system. Changing this will take effect only in new terminals.
	"terminal.integrated.enableFileLinks": true,

	// Persist terminal sessions for the workspace across window reloads.
	"terminal.integrated.enablePersistentSessions": true,

	// Object with environment variables that will be added to the VS Code process to be used by the terminal on Linux. Set to `null` to delete the environment variable.
	"terminal.integrated.env.linux": {},

	// Object with environment variables that will be added to the VS Code process to be used by the terminal on macOS. Set to `null` to delete the environment variable.
	"terminal.integrated.env.osx": {},

	// Object with environment variables that will be added to the VS Code process to be used by the terminal on Windows. Set to `null` to delete the environment variable.
	"terminal.integrated.env.windows": {},

	// Whether to display the environment changes indicator on each terminal which explains whether extensions have made, or want to make changes to the terminal's environment.
	//  - off: Disable the indicator.
	//  - on: Enable the indicator.
	//  - warnonly: Only show the warning indicator when a terminal's environment is 'stale', not the information indicator that shows a terminal has had its environment modified by an extension.
	"terminal.integrated.environmentChangesIndicator": "warnonly",

	// Whether to relaunch terminals automatically if extension want to contribute to their environment and have not been interacted with yet.
	"terminal.integrated.environmentChangesRelaunch": true,

	// An experimental setting that aims to improve link detection in the terminal by improving when links are detected and by enabling shared link detection with the editor. Currently this only supports web links.
	"terminal.integrated.experimentalLinkProvider": true,

	// An experimental setting that will use the terminal title event for the dropdown title. This setting will only apply to new terminals.
	"terminal.integrated.experimentalUseTitleEvent": false,

	// Scrolling speed multiplier when pressing `Alt`.
	"terminal.integrated.fastScrollSensitivity": 5,

	// Controls the font family of the terminal, this defaults to `editor.fontFamily`'s value.
	"terminal.integrated.fontFamily": "",

	// Controls the font size in pixels of the terminal.
	"terminal.integrated.fontSize": 12,

	// The font weight to use within the terminal for non-bold text. Accepts "normal" and "bold" keywords or numbers between 1 and 1000.
	"terminal.integrated.fontWeight": "normal",

	// The font weight to use within the terminal for bold text. Accepts "normal" and "bold" keywords or numbers between 1 and 1000.
	"terminal.integrated.fontWeightBold": "bold",

	// Whether new shells should inherit their environment from VS Code. This is not supported on Windows.
	"terminal.integrated.inheritEnv": true,

	// Controls the letter spacing of the terminal, this is an integer value which represents the amount of additional pixels to add between characters.
	"terminal.integrated.letterSpacing": 0,

	// Controls the line height of the terminal, this number is multiplied by the terminal font size to get the actual line-height in pixels.
	"terminal.integrated.lineHeight": 1,

	// Experimental: local echo will be disabled when any of these program names are found in the terminal title.
	"terminal.integrated.localEchoExcludePrograms": [
		"vim",
		"vi",
		"nano",
		"tmux"
	],

	// Experimental: length of network delay, in milliseconds, where local edits will be echoed on the terminal without waiting for server acknowledgement. If '0', local echo will always be on, and if '-1' it will be disabled.
	"terminal.integrated.localEchoLatencyThreshold": 30,

	// Experimental: terminal style of locally echoed text; either a font style or an RGB color.
	"terminal.integrated.localEchoStyle": "dim",

	// Controls whether to force selection when using Option+click on macOS. This will force a regular (line) selection and disallow the use of column selection mode. This enables copying and pasting using the regular terminal selection, for example, when mouse mode is enabled in tmux.
	"terminal.integrated.macOptionClickForcesSelection": false,

	// Controls whether to treat the option key as the meta key in the terminal on macOS.
	"terminal.integrated.macOptionIsMeta": false,

	// When set the foreground color of each cell will change to try meet the contrast ratio specified. Example values:
	// 
	// - 1: The default, do nothing.
	// - 4.5: [WCAG AA compliance (minimum)](https://www.w3.org/TR/UNDERSTANDING-WCAG20/visual-audio-contrast-contrast.html).
	// - 7: [WCAG AAA compliance (enhanced)](https://www.w3.org/TR/UNDERSTANDING-WCAG20/visual-audio-contrast7.html).
	// - 21: White on black or black on white.
	"terminal.integrated.minimumContrastRatio": 1,

	// A multiplier to be used on the `deltaY` of mouse wheel scroll events.
	"terminal.integrated.mouseWheelScrollSensitivity": 1,

	// The Linux profiles to present when creating a new terminal via the terminal dropdown. When set, these will override the default detected profiles. They are comprised of a `path` and optional `args`.
	"terminal.integrated.profiles.linux": {
		"bash": {
			"path": "bash"
		},
		"zsh": {
			"path": "zsh"
		},
		"fish": {
			"path": "fish"
		},
		"tmux": {
			"path": "tmux"
		},
		"pwsh": {
			"path": "pwsh"
		}
	},

	// The macOS profiles to present when creating a new terminal via the terminal dropdown. When set, these will override the default detected profiles. They are comprised of a `path` and optional `args`.
	"terminal.integrated.profiles.osx": {
		"bash": {
			"path": "bash"
		},
		"zsh": {
			"path": "zsh"
		},
		"fish": {
			"path": "fish"
		},
		"tmux": {
			"path": "tmux"
		},
		"pwsh": {
			"path": "pwsh"
		}
	},

	// The Windows profiles to present when creating a new terminal via the terminal dropdown. Set to null to exclude them, use the `source` property to use the default detected configuration. Or, set the `path` and optional `args`.
	"terminal.integrated.profiles.windows": {
		"PowerShell": {
			"source": "PowerShell"
		},
		"Command Prompt": {
			"path": [
				"${env:windir}\\Sysnative\\cmd.exe",
				"${env:windir}\\System32\\cmd.exe"
			],
			"args": []
		},
		"Git Bash": {
			"source": "Git Bash"
		}
	},

	// Controls how the terminal is rendered.
	//  - auto: Let VS Code guess which renderer to use.
	//  - canvas: Use the standard GPU/canvas-based renderer.
	//  - dom: Use the fallback DOM-based renderer.
	//  - experimentalWebgl: Use the experimental webgl-based renderer. Note that this has some [known issues](https://github.com/xtermjs/xterm.js/issues?q=is%3Aopen+is%3Aissue+label%3Aarea%2Faddon%2Fwebgl).
	"terminal.integrated.rendererType": "auto",

	// Controls how terminal reacts to right click.
	//  - default: Show the context menu.
	//  - copyPaste: Copy when there is a selection, otherwise paste.
	//  - paste: Paste on right click.
	//  - selectWord: Select the word under the cursor and show the context menu.
	"terminal.integrated.rightClickBehavior": "selectWord",

	// Controls the maximum amount of lines the terminal keeps in its buffer.
	"terminal.integrated.scrollback": 1000,

	// Dispatches most keybindings to the terminal instead of the workbench, overriding `terminal.integrated.commandsToSkipShell`, which can be used alternatively for fine tuning.
	"terminal.integrated.sendKeybindingsToShell": false,

	// The path of the shell that the terminal uses on Linux (default: /bin/bash). [Read more about configuring the shell](https://code.visualstudio.com/docs/editor/integrated-terminal#_configuration).
	"terminal.integrated.shell.linux": null,

	// The path of the shell that the terminal uses on macOS (default: /bin/bash). [Read more about configuring the shell](https://code.visualstudio.com/docs/editor/integrated-terminal#_configuration).
	"terminal.integrated.shell.osx": null,

	// The path of the shell that the terminal uses on Windows (default: cmd.exe). [Read more about configuring the shell](https://code.visualstudio.com/docs/editor/integrated-terminal#_configuration).
	"terminal.integrated.shell.windows": null,

	// The command line arguments to use when on the Linux terminal. [Read more about configuring the shell](https://code.visualstudio.com/docs/editor/integrated-terminal#_configuration).
	"terminal.integrated.shellArgs.linux": [],

	// The command line arguments to use when on the macOS terminal. [Read more about configuring the shell](https://code.visualstudio.com/docs/editor/integrated-terminal#_configuration).
	"terminal.integrated.shellArgs.osx": [
		"-l"
	],

	// The command line arguments to use when on the Windows terminal. [Read more about configuring the shell](https://code.visualstudio.com/docs/editor/integrated-terminal#_configuration).
	"terminal.integrated.shellArgs.windows": [],

	// Controls whether to show the alert "The terminal process terminated with exit code" when exit code is non-zero.
	"terminal.integrated.showExitAlert": true,

	// Controls the working directory a split terminal starts with.
	//  - workspaceRoot: A new split terminal will use the workspace root as the working directory. In a multi-root workspace a choice for which root folder to use is offered.
	//  - initial: A new split terminal will use the working directory that the parent terminal started with.
	//  - inherited: On macOS and Linux, a new split terminal will use the working directory of the parent terminal. On Windows, this behaves the same as initial.
	"terminal.integrated.splitCwd": "inherited",

	// Controls what version of unicode to use when evaluating the width of characters in the terminal. If you experience emoji or other wide characters not taking up the right amount of space or backspace either deleting too much or too little then you may want to try tweaking this setting.
	//  - 6: Version 6 of unicode, this is an older version which should work better on older systems.
	//  - 11: Version 11 of unicode, this version provides better support on modern systems that use modern versions of unicode.
	"terminal.integrated.unicodeVersion": "11",

	// Controls whether or not WSL distros are shown in the terminal dropdown
	"terminal.integrated.useWslProfiles": true,

	// Whether to use ConPTY for Windows terminal process communication (requires Windows 10 build number 18309+). Winpty will be used if this is false.
	"terminal.integrated.windowsEnableConpty": true,

	// A string containing all characters to be considered word separators by the double click to select word feature.
	"terminal.integrated.wordSeparators": " ()[]{}',\"`─",

	// Controls enablement of `provideTasks` for all task provider extension. If the Tasks: Run Task command is slow, disabling auto detect for task providers may help. Individual extensions may also provide settings that disable auto detection.
	"task.autoDetect": "on",

	// Configures whether to show the problem matcher prompt when running a task. Set to `true` to never prompt, or use a dictionary of task types to turn off prompting only for specific task types.
	"task.problemMatchers.neverPrompt": false,

	// Controls whether to show the task detail for tasks that have a detail in task quick picks, such as Run Task.
	"task.quickOpen.detail": true,

	// Controls the number of recent items tracked in task quick open dialog.
	"task.quickOpen.history": 30,

	// Causes the Tasks: Run Task command to use the slower "show all" behavior instead of the faster two level picker where tasks are grouped by provider.
	"task.quickOpen.showAll": false,

	// Controls whether the task quick pick is skipped when there is only one task to pick from.
	"task.quickOpen.skip": false,

	// Save all dirty editors before running a task.
	//  - always: Always saves all editors before running.
	//  - never: Never saves editors before running.
	//  - prompt: Prompts whether to save editors before running.
	"task.saveBeforeRun": "always",

	// Configures whether a warning is shown when a provider is slow
	"task.slowProviderWarning": true,

	// Controls whether Problems view should automatically reveal files when opening them.
	"problems.autoReveal": true,

	// Show Errors & Warnings on files and folder.
	"problems.decorations.enabled": true,

	// When enabled shows the current problem in the status bar.
	"problems.showCurrentInStatus": false,

	// Enable/disable navigation breadcrumbs.
	"breadcrumbs.enabled": true,

	// Controls whether and how file paths are shown in the breadcrumbs view.
	//  - on: Show the file path in the breadcrumbs view.
	//  - off: Do not show the file path in the breadcrumbs view.
	//  - last: Only show the last element of the file path in the breadcrumbs view.
	"breadcrumbs.filePath": "on",

	// Render breadcrumb items with icons.
	"breadcrumbs.icons": true,

	// When enabled breadcrumbs show `array`-symbols.
	"breadcrumbs.showArrays": true,

	// When enabled breadcrumbs show `boolean`-symbols.
	"breadcrumbs.showBooleans": true,

	// When enabled breadcrumbs show `class`-symbols.
	"breadcrumbs.showClasses": true,

	// When enabled breadcrumbs show `constant`-symbols.
	"breadcrumbs.showConstants": true,

	// When enabled breadcrumbs show `constructor`-symbols.
	"breadcrumbs.showConstructors": true,

	// When enabled breadcrumbs show `enumMember`-symbols.
	"breadcrumbs.showEnumMembers": true,

	// When enabled breadcrumbs show `enum`-symbols.
	"breadcrumbs.showEnums": true,

	// When enabled breadcrumbs show `event`-symbols.
	"breadcrumbs.showEvents": true,

	// When enabled breadcrumbs show `field`-symbols.
	"breadcrumbs.showFields": true,

	// When enabled breadcrumbs show `file`-symbols.
	"breadcrumbs.showFiles": true,

	// When enabled breadcrumbs show `function`-symbols.
	"breadcrumbs.showFunctions": true,

	// When enabled breadcrumbs show `interface`-symbols.
	"breadcrumbs.showInterfaces": true,

	// When enabled breadcrumbs show `key`-symbols.
	"breadcrumbs.showKeys": true,

	// When enabled breadcrumbs show `method`-symbols.
	"breadcrumbs.showMethods": true,

	// When enabled breadcrumbs show `module`-symbols.
	"breadcrumbs.showModules": true,

	// When enabled breadcrumbs show `namespace`-symbols.
	"breadcrumbs.showNamespaces": true,

	// When enabled breadcrumbs show `null`-symbols.
	"breadcrumbs.showNull": true,

	// When enabled breadcrumbs show `number`-symbols.
	"breadcrumbs.showNumbers": true,

	// When enabled breadcrumbs show `object`-symbols.
	"breadcrumbs.showObjects": true,

	// When enabled breadcrumbs show `operator`-symbols.
	"breadcrumbs.showOperators": true,

	// When enabled breadcrumbs show `package`-symbols.
	"breadcrumbs.showPackages": true,

	// When enabled breadcrumbs show `property`-symbols.
	"breadcrumbs.showProperties": true,

	// When enabled breadcrumbs show `string`-symbols.
	"breadcrumbs.showStrings": true,

	// When enabled breadcrumbs show `struct`-symbols.
	"breadcrumbs.showStructs": true,

	// When enabled breadcrumbs show `typeParameter`-symbols.
	"breadcrumbs.showTypeParameters": true,

	// When enabled breadcrumbs show `variable`-symbols.
	"breadcrumbs.showVariables": true,

	// Controls whether and how symbols are shown in the breadcrumbs view.
	//  - on: Show all symbols in the breadcrumbs view.
	//  - off: Do not show symbols in the breadcrumbs view.
	//  - last: Only show the current symbol in the breadcrumbs view.
	"breadcrumbs.symbolPath": "on",

	// Controls how symbols are sorted in the breadcrumbs outline view.
	//  - position: Show symbol outline in file position order.
	//  - name: Show symbol outline in alphabetical order.
	//  - type: Show symbol outline in symbol type order.
	"breadcrumbs.symbolSortOrder": "position",

	// Enable crash reports to be sent to a Microsoft online service. 
	// This option requires restart to take effect.
	"telemetry.enableCrashReporter": true,

	// Enable usage data and errors to be sent to a Microsoft online service. Read our privacy statement [here](https://go.microsoft.com/fwlink/?LinkId=786907).
	"telemetry.enableTelemetry": true,

	// Render Outline Elements with Icons.
	"outline.icons": true,

	// Use badges for Errors & Warnings.
	"outline.problems.badges": true,

	// Use colors for Errors & Warnings.
	"outline.problems.colors": true,

	// Show Errors & Warnings on Outline Elements.
	"outline.problems.enabled": true,

	// When enabled outline shows `array`-symbols.
	"outline.showArrays": true,

	// When enabled outline shows `boolean`-symbols.
	"outline.showBooleans": true,

	// When enabled outline shows `class`-symbols.
	"outline.showClasses": true,

	// When enabled outline shows `constant`-symbols.
	"outline.showConstants": true,

	// When enabled outline shows `constructor`-symbols.
	"outline.showConstructors": true,

	// When enabled outline shows `enumMember`-symbols.
	"outline.showEnumMembers": true,

	// When enabled outline shows `enum`-symbols.
	"outline.showEnums": true,

	// When enabled outline shows `event`-symbols.
	"outline.showEvents": true,

	// When enabled outline shows `field`-symbols.
	"outline.showFields": true,

	// When enabled outline shows `file`-symbols.
	"outline.showFiles": true,

	// When enabled outline shows `function`-symbols.
	"outline.showFunctions": true,

	// When enabled outline shows `interface`-symbols.
	"outline.showInterfaces": true,

	// When enabled outline shows `key`-symbols.
	"outline.showKeys": true,

	// When enabled outline shows `method`-symbols.
	"outline.showMethods": true,

	// When enabled outline shows `module`-symbols.
	"outline.showModules": true,

	// When enabled outline shows `namespace`-symbols.
	"outline.showNamespaces": true,

	// When enabled outline shows `null`-symbols.
	"outline.showNull": true,

	// When enabled outline shows `number`-symbols.
	"outline.showNumbers": true,

	// When enabled outline shows `object`-symbols.
	"outline.showObjects": true,

	// When enabled outline shows `operator`-symbols.
	"outline.showOperators": true,

	// When enabled outline shows `package`-symbols.
	"outline.showPackages": true,

	// When enabled outline shows `property`-symbols.
	"outline.showProperties": true,

	// When enabled outline shows `string`-symbols.
	"outline.showStrings": true,

	// When enabled outline shows `struct`-symbols.
	"outline.showStructs": true,

	// When enabled outline shows `typeParameter`-symbols.
	"outline.showTypeParameters": true,

	// When enabled outline shows `variable`-symbols.
	"outline.showVariables": true,

	// An array of Timeline sources that should be excluded from the Timeline view.
	"timeline.excludeSources": null,

	// Experimental. Controls whether the Timeline view will load the next page of items when you scroll to the end of the list.
	"timeline.pageOnScroll": false,

	// The number of items to show in the Timeline view by default and when loading more items. Setting to `null` (the default) will automatically choose a page size based on the visible area of the Timeline view.
	"timeline.pageSize": null,

	// Configure settings to be overridden for [ansible] language.
	"[ansible]":  {
		"gitlens.codeLens.scopes": [
				"document"
		]
	},

	// Configure settings to be overridden for [azure-pipelines] language.
	"[azure-pipelines]":  {
		"gitlens.codeLens.scopes": [
				"document"
		]
	},

	// Configure settings to be overridden for [c] language.
	"[c]":  {
		"editor.wordBasedSuggestions": false,
		"editor.suggest.insertMode": "replace",
		"editor.semanticHighlighting.enabled": true
	},

	// Configure settings to be overridden for [cpp] language.
	"[cpp]":  {
		"editor.wordBasedSuggestions": false,
		"editor.suggest.insertMode": "replace",
		"editor.semanticHighlighting.enabled": true
	},

	// Configure settings to be overridden for [css] language.
	"[css]":  {
		"editor.suggest.insertMode": "replace",
		"gitlens.codeLens.scopes": [
				"document"
		]
	},

	// Configure settings to be overridden for [cuda-cpp] language.
	"[cuda-cpp]":  {
		"editor.wordBasedSuggestions": false,
		"editor.suggest.insertMode": "replace",
		"editor.semanticHighlighting.enabled": true
	},

	// Configure settings to be overridden for [dart] language.
	"[dart]":  {
		"editor.tabSize": 2,
		"editor.insertSpaces": true,
		"editor.detectIndentation": false,
		"editor.suggest.insertMode": "replace"
	},

	// Configure settings to be overridden for [django-html] language.
	"[django-html]":  {
		"editor.quickSuggestions": {
				"other": true,
				"comments": true,
				"strings": true
		}
	},

	// Configure settings to be overridden for [dockercompose] language.
	"[dockercompose]":  {
		"editor.quickSuggestions": {
				"other": true,
				"comments": false,
				"strings": true
		}
	},

	// Configure settings to be overridden for [dockerfile] language.
	"[dockerfile]":  {
		"editor.quickSuggestions": {
				"strings": true
		}
	},

	// Configure settings to be overridden for [git-commit] language.
	"[git-commit]":  {
		"editor.rulers": [
				72
		],
		"workbench.editor.restoreViewState": false
	},

	// Configure settings to be overridden for [git-rebase] language.
	"[git-rebase]":  {
		"workbench.editor.restoreViewState": false
	},

	// Configure settings to be overridden for [go] language.
	"[go]":  {
		"editor.insertSpaces": false,
		"editor.formatOnSave": true,
		"editor.codeActionsOnSave": {
				"source.organizeImports": true
		}
	},

	// Configure settings to be overridden for [handlebars] language.
	"[handlebars]":  {
		"editor.suggest.insertMode": "replace"
	},

	// Configure settings to be overridden for [html] language.
	"[html]":  {
		"editor.suggest.insertMode": "replace",
		"gitlens.codeLens.scopes": [
				"document"
		]
	},

	// Configure settings to be overridden for [http] language.
	"[http]":  {
		"editor.quickSuggestions": {
				"other": true,
				"comments": false,
				"strings": true
		}
	},

	// Configure settings to be overridden for [java] language.
	"[java]":  {
		"editor.suggest.snippetsPreventQuickSuggestions": false
	},

	// Configure settings to be overridden for [json] language.
	"[json]":  {
		"editor.quickSuggestions": {
				"strings": true
		},
		"editor.suggest.insertMode": "replace",
		"gitlens.codeLens.scopes": [
				"document"
		]
	},

	// Configure settings to be overridden for [jsonc] language.
	"[jsonc]":  {
		"editor.quickSuggestions": {
				"strings": true
		},
		"editor.suggest.insertMode": "replace",
		"gitlens.codeLens.scopes": [
				"document"
		]
	},

	// Configure settings to be overridden for [latex] language.
	"[latex]":  {
		"editor.formatOnPaste": false,
		"editor.suggestSelection": "recentlyUsedByPrefix"
	},

	// Configure settings to be overridden for [less] language.
	"[less]":  {
		"editor.suggest.insertMode": "replace",
		"gitlens.codeLens.scopes": [
				"document"
		]
	},

	// Configure settings to be overridden for [Log] language.
	"[Log]":  {
		"editor.wordWrap": "off"
	},

	// Configure settings to be overridden for [makefile] language.
	"[makefile]":  {
		"editor.insertSpaces": false
	},

	// Configure settings to be overridden for [markdown] language.
	"[markdown]":  {
		"editor.wordWrap": "on",
		"editor.quickSuggestions": false
	},

	// Configure settings to be overridden for [postcss] language.
	"[postcss]":  {
		"gitlens.codeLens.scopes": [
				"document"
		]
	},

	// Configure settings to be overridden for [python] language.
	"[python]":  {
		"gitlens.codeLens.symbolScopes": [
				"!Module"
		]
	},

	// Configure settings to be overridden for [scss] language.
	"[scss]":  {
		"editor.suggest.insertMode": "replace",
		"gitlens.codeLens.scopes": [
				"document"
		]
	},

	// Configure settings to be overridden for [search-result] language.
	"[search-result]":  {
		"editor.lineNumbers": "off"
	},

	// Configure settings to be overridden for [shellscript] language.
	"[shellscript]":  {
		"files.eol": "\n"
	},

	// Configure settings to be overridden for [stylus] language.
	"[stylus]":  {
		"gitlens.codeLens.scopes": [
				"document"
		]
	},

	// Configure settings to be overridden for [vue] language.
	"[vue]":  {
		"gitlens.codeLens.scopes": [
				"document"
		]
	},

	// Configure settings to be overridden for [yaml] language.
	"[yaml]":  {
		"editor.insertSpaces": true,
		"editor.tabSize": 2,
		"editor.autoIndent": "keep",
		"gitlens.codeLens.scopes": [
				"document"
		],
		"editor.quickSuggestions": {
				"other": true,
				"comments": false,
				"strings": true
		}
	},

	// When enabled, new running processes are detected and ports that they listen on are automatically forwarded.
	"remote.autoForwardPorts": true,

	// Sets the source from which ports are automatically forwarded when `remote.autoForwardPorts` is true. On Windows and Mac remotes, the `process` option has no effect and `output` will be used. Requires a reload to take effect.
	//  - process: Ports will be automatically forwarded when discovered by watching for processes that are started and include a port.
	//  - output: Ports will be automatically forwarded when discovered by reading terminal and debug output. Not all processes that use ports will print to the integrated terminal or debug console, so some ports will be missed. Ports forwarded based on output will not be "un-forwarded" until reload or until the port is closed by the user in the Ports view.
	"remote.autoForwardPortsSource": "process",

	// When enabled extensions are downloaded locally and installed on remote.
	"remote.downloadExtensionsLocally": false,

	// Override the kind of an extension. `ui` extensions are installed and run on the local machine while `workspace` extensions are run on the remote. By overriding an extension's default kind using this setting, you specify if that extension should be installed and enabled locally or remotely.
	"remote.extensionKind": {
		"pub.name": [
			"ui"
		]
	},

	// Set default properties that are applied to all ports that don't get properties from the setting `remote.portsAttributes`. For example:
	// 
	// ```
	// {
	//   "onAutoForward": "ignore"
	// }
	// ```
	"remote.otherPortsAttributes": {},

	// Set properties that are applied when a specific port number is forwarded. For example:
	// 
	// ```
	// "3000": {
	//   "label": "Application"
	// },
	// "40000-55000": {
	//   "onAutoForward": "ignore"
	// },
	// ".+\\/server.js": {
	//  "onAutoForward": "openPreview"
	// }
	// ```
	"remote.portsAttributes": {},

	// Restores the ports you forwarded in a workspace.
	"remote.restoreForwardedPorts": true,

	// An array of languages where Emmet abbreviations should not be expanded.
	"emmet.excludeLanguages": [
		"markdown"
	],

	// Path to a folder containing Emmet profiles and snippets.
	"emmet.extensionsPath": [],

	// Enable Emmet abbreviations in languages that are not supported by default. Add a mapping here between the language and Emmet supported language.
	//  For example: `{"vue-html": "html", "javascript": "javascriptreact"}`
	"emmet.includeLanguages": {},

	// When set to `false`, the whole file is parsed to determine if current position is valid for expanding Emmet abbreviations. When set to `true`, only the content around the current position in CSS/SCSS/Less files is parsed.
	"emmet.optimizeStylesheetParsing": true,

	// Preferences used to modify behavior of some actions and resolvers of Emmet.
	"emmet.preferences": {},

	// Shows possible Emmet abbreviations as suggestions. Not applicable in stylesheets or when emmet.showExpandedAbbreviation is set to `"never"`.
	"emmet.showAbbreviationSuggestions": true,

	// Shows expanded Emmet abbreviations as suggestions.
	// The option `"inMarkupAndStylesheetFilesOnly"` applies to html, haml, jade, slim, xml, xsl, css, scss, sass, less and stylus.
	// The option `"always"` applies to all parts of the file regardless of markup/css.
	"emmet.showExpandedAbbreviation": "always",

	// If `true`, then Emmet suggestions will show up as snippets allowing you to order them as per `editor.snippetSuggestions` setting.
	"emmet.showSuggestionsAsSnippets": false,

	// Define profile for specified syntax or use your own profile with specific rules.
	"emmet.syntaxProfiles": {},

	// When enabled, Emmet abbreviations are expanded when pressing TAB.
	"emmet.triggerExpansionOnTab": false,

	// Variables to be used in Emmet snippets
	"emmet.variables": {},

	// Controls whether force push (with or without lease) is enabled.
	"git.allowForcePush": false,

	// Controls whether commits without running pre-commit and commit-msg hooks are allowed.
	"git.allowNoVerifyCommit": false,

	// Always show the Staged Changes resource group.
	"git.alwaysShowStagedChangesResourceGroup": false,

	// Controls the signoff flag for all commits.
	"git.alwaysSignOff": false,

	// When set to true, commits will automatically be fetched from the default remote of the current Git repository. Setting to `all` will fetch from all remotes.
	"git.autofetch": false,

	// Duration in seconds between each automatic git fetch, when `git.autofetch` is enabled.
	"git.autofetchPeriod": 180,

	// Whether auto refreshing is enabled.
	"git.autorefresh": true,

	// Configures when repositories should be automatically detected.
	//  - true: Scan for both subfolders of the current opened folder and parent folders of open files.
	//  - false: Disable automatic repository scanning.
	//  - subFolders: Scan for subfolders of the currently opened folder.
	//  - openEditors: Scan for parent folders of open files.
	"git.autoRepositoryDetection": true,

	// Stash any changes before pulling and restore them after successful pull.
	"git.autoStash": false,

	// Controls the sort order for branches.
	"git.branchSortOrder": "committerdate",

	// A regular expression to validate new branch names.
	"git.branchValidationRegex": "",

	// The character to replace whitespace in new branch names.
	"git.branchWhitespaceChar": "-",

	// Controls what type of git refs are listed when running `Checkout to...`.
	"git.checkoutType": [
		"local",
		"remote",
		"tags"
	],

	// Always confirm the creation of empty commits for the 'Git: Commit Empty' command.
	"git.confirmEmptyCommits": true,

	// Controls whether to ask for confirmation before force-pushing.
	"git.confirmForcePush": true,

	// Controls whether to ask for confirmation before commiting without verification.
	"git.confirmNoVerifyCommit": true,

	// Confirm before synchronizing git repositories.
	"git.confirmSync": true,

	// Controls the Git count badge.
	//  - all: Count all changes.
	//  - tracked: Count only tracked changes.
	//  - off: Turn off counter.
	"git.countBadge": "all",

	// Controls whether Git contributes colors and badges to the Explorer and the Open Editors view.
	"git.decorations.enabled": true,

	// The default location to clone a git repository.
	"git.defaultCloneDirectory": null,

	// Controls whether to automatically detect git submodules.
	"git.detectSubmodules": true,

	// Controls the limit of git submodules detected.
	"git.detectSubmodulesLimit": 10,

	// Enables commit signing with GPG or X.509.
	"git.enableCommitSigning": false,

	// Whether git is enabled.
	"git.enabled": true,

	// Commit all changes when there are no staged changes.
	"git.enableSmartCommit": false,

	// Controls whether the Git Sync command appears in the status bar.
	"git.enableStatusBarSync": true,

	// When enabled, fetch all branches when pulling. Otherwise, fetch just the current one.
	"git.fetchOnPull": false,

	// Follow push all tags when running the sync command.
	"git.followTagsWhenSync": false,

	// This setting is now deprecated, please use `github.gitAuthentication` instead.
	// 
	"git.githubAuthentication": null,

	// List of git repositories to ignore.
	"git.ignoredRepositories": [],

	// Ignores the legacy Git warning.
	"git.ignoreLegacyWarning": false,

	// Ignores the warning when there are too many changes in a repository.
	"git.ignoreLimitWarning": false,

	// Ignores the warning when Git is missing.
	"git.ignoreMissingGitWarning": false,

	// Ignores the warning when it looks like the branch might have been rebased when pulling.
	"git.ignoreRebaseWarning": false,

	// Ignore modifications to submodules in the file tree.
	"git.ignoreSubmodules": false,

	// Ignores the warning when Git 2.25 - 2.26 is installed on Windows.
	"git.ignoreWindowsGit27Warning": false,

	// Controls when to show commit message input validation.
	"git.inputValidation": "warn",

	// Controls the commit message length threshold for showing a warning.
	"git.inputValidationLength": 72,

	// Controls the commit message subject length threshold for showing a warning. Unset it to inherit the value of `config.inputValidationLength`.
	"git.inputValidationSubjectLength": 50,

	// Controls whether to open a repository automatically after cloning.
	//  - always: Always open in current window.
	//  - alwaysNewWindow: Always open in a new window.
	//  - whenNoFolderOpen: Only open in current window when no folder is opened.
	//  - prompt: Always prompt for action.
	"git.openAfterClone": "prompt",

	// Controls whether the diff editor should be opened when clicking a change. Otherwise the regular editor will be opened.
	"git.openDiffOnClick": true,

	// Path and filename of the git executable, e.g. `C:\Program Files\Git\bin\git.exe` (Windows). This can also be an array of string values containing multiple paths to look up.
	"git.path": null,

	// Runs a git command after a successful commit.
	//  - none: Don't run any command after a commit.
	//  - push: Run 'Git Push' after a successful commit.
	//  - sync: Run 'Git Sync' after a successful commit.
	"git.postCommitCommand": "none",

	// Controls whether Git should check for unsaved files before committing.
	//  - always: Check for any unsaved files.
	//  - staged: Check only for unsaved staged files.
	//  - never: Disable this check.
	"git.promptToSaveFilesBeforeCommit": "always",

	// Controls whether Git should check for unsaved files before stashing changes.
	//  - always: Check for any unsaved files.
	//  - staged: Check only for unsaved staged files.
	//  - never: Disable this check.
	"git.promptToSaveFilesBeforeStash": "always",

	// Prune when fetching.
	"git.pruneOnFetch": false,

	// Fetch all tags when pulling.
	"git.pullTags": true,

	// Force git to use rebase when running the sync command.
	"git.rebaseWhenSync": false,

	// Controls whether to require explicit Git user configuration or allow Git to guess if missing.
	"git.requireGitUserConfig": true,

	// List of paths to search for git repositories in.
	"git.scanRepositories": [],

	// Controls whether to show the commit input in the Git source control panel.
	"git.showCommitInput": true,

	// Controls whether to show an inline Open File action in the Git changes view.
	"git.showInlineOpenFileAction": true,

	// Controls whether git actions should show progress.
	"git.showProgress": true,

	// Controls whether to show a notification when a push is successful.
	"git.showPushSuccessNotification": false,

	// Control which changes are automatically staged by Smart Commit.
	//  - all: Automatically stage all changes.
	//  - tracked: Automatically stage tracked changes only.
	"git.smartCommitChanges": "all",

	// Suggests to enable smart commit (commit all changes when there are no staged changes).
	"git.suggestSmartCommit": true,

	// Controls whether a notification comes up when running the Sync action, which allows the user to cancel the operation.
	"git.supportCancellation": false,

	// Controls whether to enable VS Code to be the authentication handler for git processes spawned in the integrated terminal. Note: terminals need to be restarted to pick up a change in this setting.
	"git.terminalAuthentication": true,

	// Controls which date to use for items in the Timeline view.
	//  - committed: Use the committed date
	//  - authored: Use the authored date
	"git.timeline.date": "committed",

	// Controls whether to show the commit author in the Timeline view.
	"git.timeline.showAuthor": true,

	// Controls how untracked changes behave.
	//  - mixed: All changes, tracked and untracked, appear together and behave equally.
	//  - separate: Untracked changes appear separately in the Source Control view. They are also excluded from several actions.
	//  - hidden: Untracked changes are hidden and excluded from several actions.
	"git.untrackedChanges": "mixed",

	// Controls whether to use the message from the commit input box as the default stash message.
	"git.useCommitInputAsStashMessage": false,

	// Controls whether force pushing uses the safer force-with-lease variant.
	"git.useForcePushWithLease": true,

	// Controls whether to enable automatic GitHub authentication for git commands within VS Code.
	"github.gitAuthentication": true,

	// Controls whether auto detection of Grunt tasks is on or off. Default is on.
	"grunt.autoDetect": "on",

	// Controls whether auto detection of Gulp tasks is on or off. Default is on.
	"gulp.autoDetect": "on",

	// Controls whether auto detection of Jake tasks is on or off. Default is on.
	"jake.autoDetect": "on",

	// Whether to automatically navigate to the next merge conflict after resolving a merge conflict.
	"merge-conflict.autoNavigateNextConflict.enabled": false,

	// Create a CodeLens for merge conflict blocks within editor.
	"merge-conflict.codeLens.enabled": true,

	// Create decorators for merge conflict blocks within editor.
	"merge-conflict.decorators.enabled": true,

	// Controls where the diff view should be opened when comparing changes in merge conflicts.
	//  - Current: Open the diff view in the current editor group.
	//  - Beside: Open the diff view next to the current editor group.
	//  - Below: Open the diff view below the current editor group.
	"merge-conflict.diffViewPosition": "Current",

	// Configures which processes to automatically attach and debug when `debug.node.autoAttach` is on. A Node process launched with the `--inspect` flag will always be attached to, regardless of this setting.
	//  - always: Auto attach to every Node.js process launched in the terminal.
	//  - smart: Auto attach when running scripts that aren't in a node_modules folder.
	//  - onlyWithFlag: Only auto attach when the `--inspect` is given.
	//  - disabled: Auto attach is disabled and not shown in status bar.
	"debug.javascript.autoAttachFilter": "disabled",

	// Configures glob patterns for determining when to attach in "smart" `debug.javascript.autoAttachFilter` mode. `$KNOWN_TOOLS$` is replaced with a list of names of common test and code runners. [Read more on the VS Code docs](https://code.visualstudio.com/docs/nodejs/nodejs-debugging#_auto-attach-smart-patterns).
	"debug.javascript.autoAttachSmartPattern": [
		"${workspaceFolder}/**",
		"!**/node_modules/**",
		"**/$KNOWN_TOOLS$/**"
	],

	// Configures whether property getters will be expanded automatically. If this is false, the getter will appear as `get propertyName` and will only be evaluated when you click on it.
	"debug.javascript.autoExpandGetters": false,

	// When debugging a remote web app, configures whether to automatically tunnel the remote server to your local machine.
	"debug.javascript.automaticallyTunnelRemoteServer": true,

	// Whether to stop when conditional breakpoints throw an error. Note: your launch.json `type` must be prefixed with `pwa-` to use this, such as `pwa-node`.
	"debug.javascript.breakOnConditionalError": false,

	// Where a "Run" and "Debug" code lens should be shown in your npm scripts. It may be on "all", scripts, on "top" of the script section, or "never".
	"debug.javascript.codelens.npmScripts": "top",

	// Options used when debugging open links clicked from inside the JavaScript Debug Terminal. Can be set to "off" to disable this behavior, or "always" to enable debugging in all terminals.
	"debug.javascript.debugByLinkOptions": "on",

	// The default `runtimeExecutable` used for launch configurations, if unspecified. This can be used to config custom paths to Node.js or browser installations.
	"debug.javascript.defaultRuntimeExecutable": {
		"pwa-node": "node"
	},

	// Default options used when debugging a process through the `Debug: Attach to Node.js Process` command
	"debug.javascript.pickAndAttachOptions": {},

	// Request options to use when loading resources, such as source maps, in the debugger. You may need to configure this if your sourcemaps require authentication or use a self-signed certificate, for instance. Options are used to create a request using the [`got`](https://github.com/sindresorhus/got) library.
	// 
	// A common case to disable certificate verification can be done by passing `{ "https": { "rejectUnauthorized": false } }`.
	"debug.javascript.resourceRequestOptions": {},

	// Whether to suggest pretty printing JavaScript code that looks minified when you step into it.
	"debug.javascript.suggestPrettyPrinting": true,

	// Default launch options for the JavaScript debug terminal and npm scripts.
	"debug.javascript.terminalOptions": {},

	// Configures whether sourcemapped file where the original file can't be read will automatically be unmapped. If this is false (default), a prompt is shown.
	"debug.javascript.unmapMissingSources": false,

	// Use the new in-preview JavaScript debugger for Node.js and Chrome.
	"debug.javascript.usePreview": true,

	// Controls whether to show a warning when the 'useWSL' attribute is used.
	"debug.node.showUseWslIsDeprecatedWarning": true,

	// Controls whether 'Peek References' or 'Find References' is invoked when selecting code lens references
	//  - peek: Show references in peek editor.
	//  - view: Show references in separate view.
	"references.preferredLocation": "peek",

	// Controls whether npm scripts should be automatically detected.
	"npm.autoDetect": "on",

	// Enable running npm scripts contained in a folder from the Explorer context menu.
	"npm.enableRunFromFolder": false,

	// The NPM Script Explorer is now available in 'Views' menu in the Explorer in all folders.
	// Enable an explorer view for npm scripts when there is no top-level 'package.json' file.
	"npm.enableScriptExplorer": false,

	// Configure glob patterns for folders that should be excluded from automatic script detection.
	"npm.exclude": "",

	// Fetch data from https://registry.npmjs.org and https://registry.bower.io to provide auto-completion and information on hover features on npm dependencies.
	"npm.fetchOnlinePackageInfo": true,

	// The package manager used to run scripts.
	//  - auto: Auto-detect which package manager to use for running scripts based on lock files and installed package managers.
	//  - npm: Use npm as the package manager for running scripts.
	//  - yarn: Use yarn as the package manager for running scripts.
	//  - pnpm: Use pnpm as the package manager for running scripts.
	"npm.packageManager": "auto",

	// Run npm commands with the `--silent` option.
	"npm.runSilent": false,

	// The default click action used in the npm scripts explorer: `open` or `run`, the default is `open`.
	"npm.scriptExplorerAction": "open",

	// Enable/disable the floating indicator that shows when focused in the simple browser.
	"simpleBrowser.focusLockIndicator.enabled": true,

	// Use `bookmarks.lineBackground` in `workbench.colorCustomizations` instead
	// Background color of the decoration. Use rgba() and define transparent background colors to play well with other decorations. Ex.: rgba(21, 126, 251, 0.1)
	"bookmarks.backgroundLineColor": "",

	// Path to another image to be presented as Bookmark
	"bookmarks.gutterIconPath": "",

	// Specifies how labels are suggested when creating bookmarks
	//  - dontUse: Don't use the selection (original behavior)
	//  - useWhenSelected: Use the selected text (if available) directly, no confirmation required
	//  - suggestWhenSelected: Suggests the selected text (if available). You still need to confirm.
	//  - suggestWhenSelectedOrLineWhenNoSelected: Suggests the selected text (if available) or the entire line (when has no selection). You still need to confirm.
	"bookmarks.label.suggestion": "dontUse",

	// Specifies how multi cursor handles already bookmarked lines
	//  - allLinesAtOnce: Creates bookmarks in all selected lines at once, if at least one of the lines don't have a bookmark
	//  - eachLineIndependently: Literally toggles a bookmark in each line, instead of making all lines equals
	"bookmarks.multicursor.toggleMode": "allLinesAtOnce",

	// Allow navigation look for bookmarks in all files in the project, instead of only the current
	"bookmarks.navigateThroughAllFiles": true,

	// Allow bookmarks to be saved (and restored) locally in the opened Project/Folder instead of VS Code
	"bookmarks.saveBookmarksInProject": false,

	// Specifies whether Bookmarks commands are displayed on the context menu
	"bookmarks.showCommandsInContextMenu": true,

	// Specifies wheher the Side Bar show be displayed expanded
	"bookmarks.sideBar.expanded": false,

	// Use a workaround for formatters like Prettier, which does not notify on document changes and messes Bookmark's Sticky behavior
	"bookmarks.useWorkaroundForFormatters": false,

	// Allow navigation to wrap around at the first and last bookmarks in scope (current file or all files)
	"bookmarks.wrapNavigation": true,

	// Use `numberedBookmarks.lineBackground` in `workbench.colorCustomizations` instead
	// Specify the background color to use on a bookmarked line
	"numberedBookmarks.backgroundLineColor": "",

	// Specify the color to use on gutter icon (fill color)
	"numberedBookmarks.gutterIconFillColor": "#00ff25",

	// Specify the color to use on gutter icon (number color)
	"numberedBookmarks.gutterIconNumberColor": "#000",

	// Allow navigation look for bookmarks in all files in the project, instead of only the current
	"numberedBookmarks.navigateThroughAllFiles": "false",

	// Allow bookmarks to be saved (and restored) locally in the opened Project/Folder instead of VS Code
	"numberedBookmarks.saveBookmarksInProject": false,

	// Controls whether to show a warning when a bookmark is not defined
	"numberedBookmarks.showBookmarkNotDefinedWarning": false,

	// Indicates the base folders to search for any folder projects
	"projectManager.any.baseFolders": [],

	// Indicates folders to be ignored, like "node_modules", "out", "typings", "test"
	"projectManager.any.ignoredFolders": [
		"node_modules",
		"out",
		"typings",
		"test"
	],

	// Indicates the maximum depth of folder recursion to search for projects. Any value below 1 means there is no limit
	"projectManager.any.maxDepthRecursion": 4,

	// Should cache the VSCode, Git and SVN projects found?
	"projectManager.cacheProjectsBetweenSessions": true,

	// Should check for invalid paths before listing, showing a message below the project name?
	"projectManager.checkInvalidPathsBeforeListing": true,

	// Should filter projects through full path?
	"projectManager.filterOnFullPath": false,

	// Indicates the base folders to search for Git projects
	"projectManager.git.baseFolders": [],

	// Indicates folders to be ignored, like "node_modules", "out", "typings", "test"
	"projectManager.git.ignoredFolders": [
		"node_modules",
		"out",
		"typings",
		"test",
		".haxelib"
	],

	// Indicates the maximum depth of folder recursion to search for projects. Any value below 1 means there is no limit
	"projectManager.git.maxDepthRecursion": 4,

	// List the projects grouped by...(Favorites, VSCode, Git, Mercurial and SVN)
	"projectManager.groupList": false,

	// Indicates the base folders to search for Mercurial projects
	"projectManager.hg.baseFolders": [],

	// Indicates folders to be ignored, like "node_modules", "out", "typings", "test"
	"projectManager.hg.ignoredFolders": [
		"node_modules",
		"out",
		"typings",
		"test",
		".haxelib"
	],

	// Indicates the maximum depth of folder recursion to search for projects. Any value below 1 means there is no limit
	"projectManager.hg.maxDepthRecursion": 4,

	// Should ignore projects found inside other projects?
	"projectManager.ignoreProjectsWithinProjects": false,

	// Indicates if the New Window command open the project in current window, when empty.
	//  - always: Whenever you call the Open in New Window command, it will open in the current window, if empty
	//  - onlyUsingCommandPalette: Only open in the current window if you use the Command Palette
	//  - onlyUsingSideBar: Only open in the current window if you use the Side Bar
	//  - never: Works as today. The Open in New Window command will always open in New Window
	"projectManager.openInCurrenWindowIfEmpty": "always",

	// Should the project be opened using a New Window when you click the Status Bar?
	"projectManager.openInNewWindowWhenClickingInStatusBar": false,

	// Indicates an alternative location where the `projects.json` file is stored
	"projectManager.projectsLocation": "",

	// Should the current project be hidden in the list of available projects?
	"projectManager.removeCurrentProjectFromList": true,

	// Should display the project name in the Status Bar?
	"projectManager.showProjectNameInStatusBar": true,

	// List the projects sorted by...(Saved, Name, Path or Recent)
	"projectManager.sortList": "Name",

	// Indicates the base folders to search for SVN projects
	"projectManager.svn.baseFolders": [],

	// Indicates folders to be ignored, like "node_modules", "out", "typings", "test"
	"projectManager.svn.ignoredFolders": [
		"node_modules",
		"out",
		"typings",
		"test"
	],

	// Indicates the maximum depth of folder recursion to search for projects. Any value below 1 means there is no limit
	"projectManager.svn.maxDepthRecursion": 4,

	// Indicates the base folders to search for VSCode projects
	"projectManager.vscode.baseFolders": [],

	// Indicates folders to be ignored, like "node_modules", "out", "typings", "test"
	"projectManager.vscode.ignoredFolders": [
		"node_modules",
		"out",
		"typings",
		"test"
	],

	// Indicates the maximum depth of folder recursion to search for projects. Any value below 1 means there is no limit
	"projectManager.vscode.maxDepthRecursion": 4,

	// Array of object with data to connect server on run editor or change workspace
	"database.connections": [],

	// Activates the i18n features for snippets (eg.: _(""))
	"django.i18n": true,

	// Seldom show notifications about this extension
	"django.showContributeNotification": true,

	// Exclude Python snippets by their file name. Can be 'import', 'postgres'...
	"django.snippets.exclude": [
		"cms",
		"wagtail"
	],

	// Activates the Python snippets
	"django.snippets.use": true,

	// Resolves `ArrayAccess` and `Traversable` implementations that are unioned with a typed array to generic syntax. eg `ArrayAccessOrTraversable|ElementType[]` => `ArrayAccessOrTraversable<mixed, ElementType>`.
	"intelephense.compatibility.correctForArrayAccessArrayAndTraversableArrayUnionTypes": true,

	// Resolves `BaseClass|static` union types to `static` instead of `BaseClass`.
	"intelephense.compatibility.correctForBaseClassStaticUnionTypes": true,

	// Global namespace constants and functions will be fully qualified (prefixed with a backslash).
	"intelephense.completion.fullyQualifyGlobalConstantsAndFunctions": false,

	// Use declarations will be automatically inserted for namespaced classes, traits, interfaces, functions, and constants.
	"intelephense.completion.insertUseDeclaration": true,

	// The maximum number of completion items returned per request.
	"intelephense.completion.maxItems": 100,

	// Method and function completions will include parentheses and trigger parameter hints.
	"intelephense.completion.triggerParameterHints": true,

	// Enables argument count diagnostics.
	"intelephense.diagnostics.argumentCount": true,

	// Enables deprecated diagnostics.
	"intelephense.diagnostics.deprecated": true,

	// Enables duplicate symbol diagnostics.
	"intelephense.diagnostics.duplicateSymbols": true,

	// Enables diagnostics in embedded languages.
	"intelephense.diagnostics.embeddedLanguages": true,

	// Enables diagnostics.
	"intelephense.diagnostics.enable": true,

	// Enables reporting of problems associated with method and class implementations. For example, unimplemented methods or method signature incompatibilities.
	"intelephense.diagnostics.implementationErrors": true,

	// Enables reporting of various language constraint errors.
	"intelephense.diagnostics.languageConstraints": true,

	// Controls when diagnostics are run.
	//  - onType: Diagnostics will run as changes are made to the document.
	//  - onSave: Diagnostics will run when the document is saved.
	"intelephense.diagnostics.run": "onType",

	// Enables diagnostics on type compatibility of arguments, property assignments, and return statements where types have been declared.
	"intelephense.diagnostics.typeErrors": true,

	// Enables undefined class constant diagnostics.
	"intelephense.diagnostics.undefinedClassConstants": true,

	// Enables undefined constant diagnostics.
	"intelephense.diagnostics.undefinedConstants": true,

	// Enables undefined function diagnostics.
	"intelephense.diagnostics.undefinedFunctions": true,

	// Enables undefined method diagnostics.
	"intelephense.diagnostics.undefinedMethods": true,

	// Enables undefined static property diagnostics.
	"intelephense.diagnostics.undefinedProperties": true,

	// DEPRECATED. Use the setting for each symbol category.
	"intelephense.diagnostics.undefinedSymbols": true,

	// Enables undefined class, interface and trait diagnostics.
	"intelephense.diagnostics.undefinedTypes": true,

	// Enables undefined variable diagnostics.
	"intelephense.diagnostics.undefinedVariables": true,

	// Enables unexpected token diagnostics.
	"intelephense.diagnostics.unexpectedTokens": true,

	// Enables unused variable, private member, and import diagnostics.
	"intelephense.diagnostics.unusedSymbols": true,

	// The directory of the entry point to the application (directory of index.php). Can be absolute or relative to the workspace folder. Used for resolving script inclusion and path suggestions.
	"intelephense.environment.documentRoot": "",

	// The include paths (as individual path items) as defined in the include_path ini setting or paths to external libraries. Can be absolute or relative to the workspace folder. Used for resolving script inclusion and/or adding external symbols to folder.
	"intelephense.environment.includePaths": [],

	// A semver compatible string that represents the target PHP version. Used for providing version appropriate suggestions and diagnostics. PHP 5.3.0 and greater supported.
	"intelephense.environment.phpVersion": "8.0.0",

	// When enabled '<?' will be parsed as a PHP open tag. Defaults to false.
	"intelephense.environment.shortOpenTag": false,

	// Configure glob patterns to make files available for language server features. Inherits from files.associations.
	"intelephense.files.associations": [
		"*.php",
		"*.phtml"
	],

	// Configure glob patterns to exclude certain files and folders from all language server features. Inherits from files.exclude.
	"intelephense.files.exclude": [
		"**/.git/**",
		"**/.svn/**",
		"**/.hg/**",
		"**/CVS/**",
		"**/.DS_Store/**",
		"**/node_modules/**",
		"**/bower_components/**",
		"**/vendor/**/{Tests,tests}/**",
		"**/.history/**",
		"**/vendor/**/vendor/**"
	],

	// Maximum file size in bytes.
	"intelephense.files.maxSize": 1000000,

	// Controls formatting style of braces
	//  - psr12: PHP-FIG PSR-2 and PSR-12 style. A mix of Allman and K&R
	//  - allman: Allman. Opening brace on the next line.
	//  - k&r: K&R (1TBS). Opening brace on the same line.
	"intelephense.format.braces": "psr12",

	// Enables formatting.
	"intelephense.format.enable": true,

	// DEPRECATED. Don't use this. Go to command palette and search for enter licence key.
	"intelephense.licenceKey": "",

	// Maximum memory (in MB) that the server should use. On some systems this may only have effect when runtime has been set. Minimum 256.
	"intelephense.maxMemory": 0,

	// An object that describes the format of generated class/interface/trait phpdoc. The following snippet variables are available: SYMBOL_NAME; SYMBOL_KIND; SYMBOL_TYPE; SYMBOL_NAMESPACE.
	"intelephense.phpdoc.classTemplate": {
		"summary": "$1",
		"tags": [
			"@package ${1:$SYMBOL_NAMESPACE}"
		]
	},

	// An object that describes the format of generated function/method phpdoc. The following snippet variables are available: SYMBOL_NAME; SYMBOL_KIND; SYMBOL_TYPE; SYMBOL_NAMESPACE.
	"intelephense.phpdoc.functionTemplate": {
		"summary": "$1",
		"tags": [
			"@param ${1:$SYMBOL_TYPE} $SYMBOL_NAME $2",
			"@return ${1:$SYMBOL_TYPE} $2",
			"@throws ${1:$SYMBOL_TYPE} $2"
		]
	},

	// An object that describes the format of generated property phpdoc. The following snippet variables are available: SYMBOL_NAME; SYMBOL_KIND; SYMBOL_TYPE; SYMBOL_NAMESPACE.
	"intelephense.phpdoc.propertyTemplate": {
		"summary": "$1",
		"tags": [
			"@var ${1:$SYMBOL_TYPE}"
		]
	},

	// Adds `@return void` to auto generated phpdoc for definitions that do not return a value.
	"intelephense.phpdoc.returnVoid": true,

	// 
	//  - snippet: Auto generated phpdoc is returned in snippet format. Templates are partially resolved by evaluating phpdoc specific variables only.
	//  - text: Auto generated phpdoc is returned as plain text. Templates are resolved completely by the server.
	"intelephense.phpdoc.textFormat": "snippet",

	// Fully qualified names will be used for types when true. When false short type names will be used and imported where appropriate. Overrides intelephense.completion.insertUseDeclaration.
	"intelephense.phpdoc.useFullyQualifiedNames": false,

	// Glob patterns matching files and folders that should be excluded from references search.
	"intelephense.references.exclude": [
		"**/vendor/**"
	],

	// Glob patterns matching files and folders that should be excluded when renaming symbols. Rename operation will fail if the symbol definition is found in the excluded files/folders.
	"intelephense.rename.exclude": [
		"**/vendor/**"
	],

	// Path to a Node.js executable. Use this if you wish to use a different version of Node.js. Defaults to Node.js shipped with VSCode.
	"intelephense.runtime": "",

	// Configure stub files for built in symbols and common extensions. The default setting includes PHP core and all bundled extensions.
	"intelephense.stubs": [
		"apache",
		"bcmath",
		"bz2",
		"calendar",
		"com_dotnet",
		"Core",
		"ctype",
		"curl",
		"date",
		"dba",
		"dom",
		"enchant",
		"exif",
		"FFI",
		"fileinfo",
		"filter",
		"fpm",
		"ftp",
		"gd",
		"gettext",
		"gmp",
		"hash",
		"iconv",
		"imap",
		"intl",
		"json",
		"ldap",
		"libxml",
		"mbstring",
		"meta",
		"mysqli",
		"oci8",
		"odbc",
		"openssl",
		"pcntl",
		"pcre",
		"PDO",
		"pdo_ibm",
		"pdo_mysql",
		"pdo_pgsql",
		"pdo_sqlite",
		"pgsql",
		"Phar",
		"posix",
		"pspell",
		"readline",
		"Reflection",
		"session",
		"shmop",
		"SimpleXML",
		"snmp",
		"soap",
		"sockets",
		"sodium",
		"SPL",
		"sqlite3",
		"standard",
		"superglobals",
		"sysvmsg",
		"sysvsem",
		"sysvshm",
		"tidy",
		"tokenizer",
		"xml",
		"xmlreader",
		"xmlrpc",
		"xmlwriter",
		"xsl",
		"Zend OPcache",
		"zip",
		"zlib"
	],

	// Anonymous usage and crash data will be sent to Azure Application Insights. Inherits from telemetry.enableTelemetry.
	"intelephense.telemetry.enabled": null,

	// Traces the communication between VSCode and the intelephense language server.
	"intelephense.trace.server": "off",

	// For import command. The declaration type used for require()
	"npm-intellisense.importDeclarationType": "const",

	// For import command. Use import statements instead of require()
	"npm-intellisense.importES6": true,

	// For import command. The linebreak used after the snippet
	"npm-intellisense.importLinebreak": ";\r\n",

	// For import command. The type of quotes to use in the snippet
	"npm-intellisense.importQuotes": "'",

	// (experimental) Enables path intellisense in subfolders of modules
	"npm-intellisense.packageSubfoldersIntellisense": false,

	// Look for package.json inside nearest directory instead of workspace root
	"npm-intellisense.recursivePackageJsonLookup": true,

	// Scans devDependencies as well
	"npm-intellisense.scanDevDependencies": false,

	// shows build in node modules like 'path' of 'fs'
	"npm-intellisense.showBuildInLibs": false,

	// Sets an absolute path to the current workspace
	"path-intellisense.absolutePathToWorkspace": true,

	// Automatically adds slash after directory
	"path-intellisense.autoSlashAfterDirectory": false,

	// Adds the file extension to a import statements
	"path-intellisense.extensionOnImport": false,

	// Mappings for paths
	"path-intellisense.mappings": {},

	// Show hidden files
	"path-intellisense.showHiddenFiles": false,

	// The C compiler path (e.g: /usr/bin/gcc or C:\MinGW\bin\gcc.exe)
	"c-cpp-compile-run.c-compiler": "gcc",

	// The C flags: e.g. -Wall. default: -Wall -Wextra
	"c-cpp-compile-run.c-flags": "-Wall -Wextra",

	// The Cpp compiler path (e.g: /usr/bin/g++ or C:\MinGW\bin\g++.exe)
	"c-cpp-compile-run.cpp-compiler": "g++",

	// The Cpp flags: e.g. -Wall. default: -Wall -Wextra
	"c-cpp-compile-run.cpp-flags": "-Wall -Wextra",

	// Whether should run in an external terminal
	"c-cpp-compile-run.run-args": "",

	// Whether should run in an external terminal
	"c-cpp-compile-run.run-in-external-terminal": false,

	// Whether should save the file before compiling
	"c-cpp-compile-run.save-before-compile": true,

	// Whether should show notifications
	"c-cpp-compile-run.should-show-notifications": true,

	// Additional file extensions that should be analyzed (usually used in combination with analyzer plugins).
	"dart.additionalAnalyzerFileExtensions": [],

	// Whether to send analytics such as startup timings, frequency of use of features and analysis server crashes.
	"dart.allowAnalytics": true,

	// Whether to consider files ending `_test.dart` that are outside of the test directory as tests. This should be enabled if you put tests inside the `lib` directory of your Flutter app so they will be run with `flutter test` and not `flutter run`.
	"dart.allowTestsOutsideTestFolder": false,

	// An array of paths to be excluded from Dart analysis. This option should usually be set at the Workspace level. Excluded folders will also be ignored when detecting project types.
	"dart.analysisExcludedFolders": [],

	// Whether to use folding data from the Dart analysis server instead of the built-in VS Code indent-based folding.
	"dart.analysisServerFolding": true,

	// Whether to enable analysis for AngularDart templates (requires the Angular analyzer plugin to be enabled in `analysis_options.yaml`).
	"dart.analyzeAngularTemplates": true,

	// Additional arguments to pass to the Dart analysis server.
	"dart.analyzerAdditionalArgs": [],

	// The port number to be used for the Dart analyzer diagnostic server.
	"dart.analyzerDiagnosticsPort": null,

	// The path to a log file for very detailed logging in the Dart analysis server that may be useful when trying to diagnose analysis server issues.
	"dart.analyzerInstrumentationLogFile": null,

	// The path to a log file for communication between Dart Code and the analysis server.
	"dart.analyzerLogFile": null,

	// The path to a custom Dart analysis server.
	"dart.analyzerPath": null,

	// An SSH host to run the analysis server.
	// This can be useful when modifying code on a remote machine using SSHFS.
	"dart.analyzerSshHost": null,

	// The port number to be used for the Dart analysis server VM service.
	"dart.analyzerVmServicePort": null,

	// Whether to include symbols that have not been imported in the code completion list and automatically insert the required import when selecting them (requires restart).
	"dart.autoImportCompletions": true,

	// Additional args to pass to the `build_runner` when building/watching/serving.
	"dart.buildRunnerAdditionalArgs": [],

	// Whether to check you are using the latest version of the Dart SDK at startup.
	"dart.checkForSdkUpdates": true,

	// Whether to show annotations against constructor, method invocations and lists that span multiple lines.
	"dart.closingLabels": true,

	// Whether to insert parentheses and parameter placeholders during code completions when using LSP. This feature is automatically disabled if commit characters are enabled.
	"dart.completeFunctionCalls": true,

	// The protocol to use for the Dart Debug Extension backend service and injected client. Using WebSockets can improve performance but may fail when connecting through some proxy servers.
	"dart.debugExtensionBackendProtocol": "ws",

	// Whether to mark external pub package libraries (including `package:flutter`) as debuggable, enabling stepping into them while debugging.
	"dart.debugExternalLibraries": false,

	// Whether to mark Dart SDK libraries (`dart:*`) as debuggable, enabling stepping into them while debugging.
	"dart.debugSdkLibraries": false,

	// Whether to launch external DevTools windows using Chrome or the system default browser.
	"dart.devToolsBrowser": "chrome",

	// The path to a low-traffic log file for the Dart DevTools service.
	"dart.devToolsLogFile": null,

	// The port number to be used for the Dart DevTools.
	"dart.devToolsPort": null,

	// Whether to try to reuse existing DevTools windows instead of launching new ones. Only works for instances of DevTools launched by the DevTools server on the local machine.
	"dart.devToolsReuseWindows": true,

	// The theme to use for Dart DevTools.
	"dart.devToolsTheme": "dark",

	// An array of glob patterns that should be excluded for formatting. The pattern is matched against the absolute path of the file. Use `**/test/**` to skip formatting for all test directories.
	"dart.doNotFormat": [],

	// Whether to load [Dart DevTools](https://dart.dev/tools/dart-devtools) embedded inside VS Code.
	"dart.embedDevTools": true,

	// Whether to automatically commit the selected completion item when pressing certain keys such as . , ( and [. This setting does not currently apply to LSP, see `dart.previewCommitCharacters`.
	"dart.enableCompletionCommitCharacters": false,

	// Whether to enable the [dart_style](https://pub.dev/packages/dart_style) formatter for Dart code.
	"dart.enableSdkFormatter": true,

	// Whether to include Dart and Flutter snippets in code completion.
	"dart.enableSnippets": true,

	// Additional environment variables to be added to all Dart/Flutter processes spawned by the Dart and Flutter extensions.
	"dart.env": {},

	// Whether to evaluate getters in order to display them in debug views (such as the Variables, Watch and Hovers views).
	"dart.evaluateGettersInDebugViews": true,

	// Whether to call toString() on objects when rendering them in debug views (such as the Variables, Watch and Hovers views). Only applies to views of 100 or fewer values for performance reasons.
	"dart.evaluateToStringInDebugViews": true,

	// The path to a low-traffic log file for basic extension and editor issues.
	"dart.extensionLogFile": null,

	// Whether to automatically run `adb connect 100.115.92.2:5555` when spawning the Flutter daemon when running on Chrome OS.
	"dart.flutterAdbConnectOnChromeOs": false,

	// Additional args to pass to all `flutter` commands.
	"dart.flutterAdditionalArgs": [],

	// Additional args to pass to the `flutter attach` command.
	"dart.flutterAttachAdditionalArgs": [],

	// The programming language to use for Android apps when creating new projects using the 'Flutter: New Application Project' command.
	"dart.flutterCreateAndroidLanguage": "kotlin",

	// The programming language to use for iOS apps when creating new projects using the 'Flutter: New Application Project' command.
	"dart.flutterCreateIOSLanguage": "swift",

	// Whether to use offline mode when creating new projects with the 'Flutter: New Application Project' command.
	"dart.flutterCreateOffline": false,

	// The organization responsible for your new Flutter project, in reverse domain name notation (e.g. `com.google`). This string is used in Java package names and as prefix in the iOS bundle identifier when creating new projects using the 'Flutter: New Project' command.
	"dart.flutterCreateOrganization": null,

	// Custom emulators to show in the emulator list for easier launching. If IDs match existing emulators returned by Flutter, the custom emulators will override them.
	"dart.flutterCustomEmulators": [],

	// The path to a log file for the `flutter daemon` service, which provides information about connected devices to show in the status bar.
	"dart.flutterDaemonLogFile": null,

	// Whether to show Flutter icons and colors in the editor gutter.
	"dart.flutterGutterIcons": true,

	// Whether to automatically send a Hot Reload request during a debug session when saving files.
	// 
	// - `never` - do not reload when saving.
	// - `always` - reload for all saves, manual or automatic.
	// - `manual` - only reload for manual saves (requires pressing Save explicitly if using autosave).
	"dart.flutterHotReloadOnSave": "manual",

	// Whether to automatically send a Hot Restart request during a debug session when saving files if Hot Reload is not available but Hot Restart is.
	"dart.flutterHotRestartOnSave": true,

	// Whether to show the Flutter Outline tree in the sidebar.
	"dart.flutterOutline": true,

	// Additional args to pass to the `flutter run` command.
	"dart.flutterRunAdditionalArgs": [],

	// The path to a log file for `flutter run`, which is used to launch Flutter apps from VS Code. This is useful when trying to diagnose issues with apps launching (or failing to) on simulators and devices. Use `${name}` in the log file name to prevent concurrent debug sessions overwriting each others logs.
	"dart.flutterRunLogFile": null,

	// The path to a directory to save Flutter screenshots.
	"dart.flutterScreenshotPath": null,

	// The location of the Flutter SDK to use. If blank, Dart Code will attempt to find it from the project directory, `FLUTTER_ROOT` environment variable and the `PATH` environment variable.
	"dart.flutterSdkPath": null,

	// An array of paths that either directly point to a Flutter SDK or the parent directory of multiple Flutter SDKs. When set, the version number in the status bar can be used to quickly switch between SDKs.
	"dart.flutterSdkPaths": [],

	// Whether to set newly connected devices as the current device in Flutter projects.
	"dart.flutterSelectDeviceWhenConnected": true,

	// When to show the Flutter headless web-server device. This requires using the Dart Debug extension for Chrome and is usually only used for remote environments where Chrome is not available such as browser/cloud-based IDEs (requires restart).
	// 
	// - `remote` - only show when connected to a remote.
	// - `always` - always show, even for local sessions.
	"dart.flutterShowWebServerDevice": "remote",

	// Whether to use Flutter's [structured error support](https://medium.com/flutter/improving-flutters-error-messages-e098513cecf9) for improved error display.
	"dart.flutterStructuredErrors": true,

	// Additional args to pass to the `flutter test` command.
	"dart.flutterTestAdditionalArgs": [],

	// The path to a log file for `flutter test`, which is used to run unit tests from VS Code. This is useful when trying to diagnose issues with unit test executions. Use `${name}` in the log file name to prevent concurrent debug sessions overwriting each others logs.
	"dart.flutterTestLogFile": null,

	// Whether to pass `--track-widget-creation` to Flutter apps (required to support 'Inspect Widget'). This setting is always ignored when running in Profile or Release mode.
	"dart.flutterTrackWidgetCreation": true,

	// Sets the [Web renderer](https://flutter.dev/docs/development/tools/web-renderers) used for Flutter web apps.
	// 
	// - `auto` - allow Flutter to pick the best renderer based on the users device.
	// - `html` - always use the HTML renderer.
	// - `canvaskit` - always use the CanvasKit renderer.
	"dart.flutterWebRenderer": "auto",

	// Determines how to display Hot Restart and Hot Reload progress.
	"dart.hotReloadProgress": "notification",

	// Whether to insert argument placeholders during code completions. This feature is automatically disabled when `enableCompletionCommitCharacters` is enabled.
	"dart.insertArgumentPlaceholders": true,

	// The maximum length of a line of code. This is used by the document formatter.
	"dart.lineLength": 80,

	// Whether to enable [Snippet support in LSP TextEdits](https://github.com/rust-analyzer/rust-analyzer/blob/979e788957ced1957ee9ac1da70fb97abf9fe2b1/docs/dev/lsp-extensions.md#snippet-textedit).
	"dart.lspSnippetTextEdits": true,

	// The maximum length of a line in the log file. Lines longer than this will be truncated and suffixed with an ellipsis.
	"dart.maxLogLineLength": 2000,

	// Whether to show a notification the first few times an analysis server exception occurs.
	"dart.notifyAnalyzerErrors": true,

	// Whether to automatically open DevTools at the start of a debug session.
	"dart.openDevTools": "never",

	// When to automatically switch focus to the test list (array to support multiple values).
	"dart.openTestView": [
		"testRunStart"
	],

	// EXPERIMENTAL: Whether to look for custom script definitions at `dart/config/intellij-plugins/flutter.json` in Bazel workspaces. Currently supported for macOS and Linux only.
	"dart.previewBazelWorkspaceCustomScripts": false,

	// EXPERIMENTAL: Whether to enable commit characters for the LSP server. In a future release, the dart.enableCompletionCommitCharacters setting will also apply to LSP.
	"dart.previewCommitCharacters": false,

	// Whether to enable the [Flutter UI Guides preview](https://dartcode.org/releases/v3-1/#preview-flutter-ui-guides).
	"dart.previewFlutterUiGuides": false,

	// Whether to enable custom tracking of Flutter UI guidelines (to hide some latency of waiting for the next Flutter Outline).
	"dart.previewFlutterUiGuidesCustomTracking": false,

	// Whether to perform hot reload on save based on a filesystem watcher for Dart files rather than using VS Code's `onDidSave` event. This allows reloads to trigger when external tools modify Dart source files.
	"dart.previewHotReloadOnSaveWatcher": false,

	// Whether to run the analyzer in [LSP mode](https://microsoft.github.io/language-server-protocol/) (requires restart).
	"dart.previewLsp": null,

	// Whether to prompt to get packages when opening a project with out of date packages.
	"dart.promptToGetPackages": true,

	// Whether to prompt before running if there are errors in your project. Test scripts will be excluded from the check unless they're the script being run.
	"dart.promptToRunIfErrors": true,

	// Additional args to pass to all pub commands.
	"dart.pubAdditionalArgs": [],

	// The path to a log file for Dart test runs. This is useful when trying to diagnose issues with unit test executions. Use `${name}` in the log file name to prevent concurrent debug sessions overwriting each others logs.
	"dart.pubTestLogFile": null,

	// Whether to automatically run `pub get` whenever `pubspec.yaml` is saved.
	"dart.runPubGetOnPubspecChanges": true,

	// The location of the Dart SDK to use for analyzing and executing code. If blank, Dart Code will attempt to find it from the `PATH` environment variable. When editing a Flutter project, the version of Dart included in the Flutter SDK is used in preference.
	"dart.sdkPath": null,

	// An array of paths that either directly point to a Dart SDK or the parent directory of multiple Dart SDKs. When set, the version number in the status bar can be used to quickly switch between SDKs.
	"dart.sdkPaths": [],

	// Whether to eagerly run DevTools for Flutter workspaces and share the spawned server with `flutter run`.
	"dart.shareDevToolsWithFlutter": true,

	// Whether to show logs from the `dart:developer` `log()` function in the debug console.
	"dart.showDartDeveloperLogs": true,

	// Whether to show CodeLens actions in the editor for opening online DartPad samples.
	"dart.showDartPadSampleCodeLens": true,

	// Whether to show DevTools buttons in the Debug toolbar.
	"dart.showDevToolsDebugToolBarButtons": true,

	// Whether to show quick fixes for ignoring hints and lints.
	"dart.showIgnoreQuickFixes": true,

	// Whether to show notifications for widget errors that offer Inspect Widget links. This requires that the `dart.shareDevToolsWithFlutter` setting is also enabled.
	"dart.showInspectorNotificationsForWidgetErrors": true,

	// Whether to show CodeLens actions in the editor for quick running / debugging scripts with main functions.
	"dart.showMainCodeLens": true,

	// Whether to show skipped tests in the test tree.
	"dart.showSkippedTests": true,

	// Whether to show CodeLens actions in the editor for quick running / debugging tests.
	"dart.showTestCodeLens": true,

	// Whether to show TODOs in the Problems list.
	"dart.showTodos": true,

	// Whether to automatically trigger signature help when pressing keys such as , and (.
	"dart.triggerSignatureHelpAutomatically": false,

	// Whether to automatically update imports when moving or renaming files. Currently only supports single file moves / renames.
	"dart.updateImportsOnRename": true,

	// Whether to use specific ports for the VM service and DevTools when running in Chrome OS. This is required to connect from the native Chrome OS browser but will prevent apps from launching if the ports are already in-use (for example if trying to run a second app).
	"dart.useKnownChromeOSPorts": true,

	// Additional args to pass to the Dart VM when running/debugging command line apps.
	"dart.vmAdditionalArgs": [],

	// The path to a log file for communication between Dart Code and the VM service. This is useful when trying to diagnose issues with debugging such as missed breakpoints. Use `${name}` in the log file name to prevent concurrent debug sessions overwriting each others logs.
	"dart.vmServiceLogFile": null,

	// Whether to show a warning when modifying files in the [system package cache](https://dart.dev/tools/pub/glossary#system-cache) directory.
	"dart.warnWhenEditingFilesInPubCache": true,

	// Whether to show a warning when modifying files outside of the workspace.
	"dart.warnWhenEditingFilesOutsideWorkspace": true,

	// The path to a log file for communication between Dart Code and the webdev daemon. This is useful when trying to diagnose issues with launching web apps. Use `${name`} in the log file name to prevent concurrent debug sessions overwriting each others logs.
	"dart.webDaemonLogFile": null,

	// markdownlint config object
	"markdownlint.config": {},

	// Array of paths for custom rules to include when linting
	"markdownlint.customRules": [],

	// Array of workspace paths that load custom rules without prompting
	"markdownlint.customRulesAlwaysAllow": [],

	// Array of file names and glob expressions to ignore when linting
	"markdownlint.ignore": [],

	// Run the linter on save (onSave) or on type (onType)
	"markdownlint.run": "onType",

	// Always show the ESlint status bar item.
	"eslint.alwaysShowStatus": false,

	// The setting is deprecated. Use editor.codeActionsOnSave instead with a source.fixAll.eslint member.
	// Turns auto fix on save on or off.
	"eslint.autoFixOnSave": false,

	// 
	"eslint.codeAction.disableRuleComment": {
		"enable": true,
		"location": "separateLine"
	},

	// 
	"eslint.codeAction.showDocumentation": {
		"enable": true
	},

	// Specifies the code action mode. Possible values are 'all' and 'problems'.
	//  - all: Fixes all possible problems in the file. This option might take some time.
	//  - problems: Only fixes reported problems that have non overlapping textual edits. This options runs a lot faster.
	"eslint.codeActionsOnSave.mode": "all",

	// Enables ESLint debug mode (same as --debug on the command line)
	"eslint.debug": false,

	// This setting is deprecated. Disable ESLint using the extensions viewlet.
	// Controls whether eslint is enabled or not.
	"eslint.enable": true,

	// Enables ESLint as a formatter.
	"eslint.format.enable": false,

	// Controls whether a task for linting the whole workspace will be available.
	"eslint.lintTask.enable": false,

	// Command line options applied when running the task for linting the whole workspace (see https://eslint.org/docs/user-guide/command-line-interface).
	"eslint.lintTask.options": ".",

	// Whether ESlint should migrate auto fix on save settings.
	"eslint.migration.2_x": "on",

	// The value of NODE_ENV to use when running eslint tasks.
	"eslint.nodeEnv": null,

	// A path added to NODE_PATH when resolving the eslint module.
	"eslint.nodePath": null,

	// Whether ESLint should issue a warning on ignored files.
	"eslint.onIgnoredFiles": "off",

	// The eslint options object to provide args normally passed to eslint when executed from a command line (see http://eslint.org/docs/developer-guide/nodejs-api#cliengine).
	"eslint.options": {},

	// The package manager you use to install node modules.
	"eslint.packageManager": "npm",

	// An array of language ids for which the extension should probe if support is installed.
	"eslint.probe": [
		"javascript",
		"javascriptreact",
		"typescript",
		"typescriptreact",
		"html",
		"vue",
		"markdown"
	],

	// This option is deprecated. Use eslint.lintTask.enable instead.
	// Controls whether a task for linting the whole workspace will be available.
	"eslint.provideLintTask": false,

	// Turns on quiet mode, which ignores warnings.
	"eslint.quiet": false,

	// Override the severity of one or more rules reported by this extension, regardless of the project's ESLint config. Use globs to apply default severities for multiple rules.
	"eslint.rules.customizations": [],

	// Run the linter on save (onSave) or on type (onType)
	"eslint.run": "onType",

	// The location of the node binary to run ESLint under.
	// 
	// - When specified as a user/machine setting, the Node version from `eslint.runtime` automatically replaces the built-in version.
	// - When specified as a workspace setting, `eslint.runtime` allows you to switch to use that version with the `ESLint: Select Node version` command.
	"eslint.runtime": null,

	// Traces the communication between VSCode and the eslint linter service.
	"eslint.trace.server": "off",

	// An array of language ids which should be validated by ESLint. If not installed ESLint will show an error.
	"eslint.validate": [],

	// 
	"eslint.workingDirectories": [],

	// Set whether all modules can be imported.
	"pythonPreview.allowAllModules": true,

	// Set code and navigation area width.
	"pythonPreview.codAndNavWidth": 510,

	// Control the font family used in the code display area.
	"pythonPreview.code.fontFamily": "Andale mono, monospace",

	// Control the font size in pixels in the code display area.
	"pythonPreview.code.fontSize": 15,

	// Control the line height used in the code.
	"pythonPreview.code.lineHeight": 1.2,

	// Control the font family used in the code footer docs.
	"pythonPreview.codeFooterDocs.fontFamily": "verdana, arial, helvetica, sans-serif",

	// Control the font size in pixels used in the code footer docs.
	"pythonPreview.codeFooterDocs.fontSize": 12,

	// Render functions with a 'func' prefix and not type label.
	"pythonPreview.compactFuncLabels": false,

	// Display all stack frames that have ever exited rather than only currently on the stack.
	"pythonPreview.cumulativeMode": true,

	// Control the background color used in dict, class and instance key in vscode dark theme.
	"pythonPreview.dark.dict-class-instKey.bgColor": "#f9906f",

	// Control the background color used in dict, class and instance value in vscode dark theme.
	"pythonPreview.dark.dict-class-instVal.bgColor": "#b35c44",

	// Control the color used in highlighted arrow in vscode dark theme.
	"pythonPreview.dark.highlightedArrow.color": "#005583",

	// Control the background color used in highlighted stack frame in vscode dark theme.
	"pythonPreview.dark.highlightedStackFrame.bgColor": "#800080",

	// Control the background color used in list, tuple and set in vscode dark theme.
	"pythonPreview.dark.list-tuple-setTbl.bgColor": "#ca6924",

	// Set how heap objects should be rendered. "true" render all heap objects at the top level. Otherwise, nest heap objects.
	"pythonPreview.disableHeapNesting": false,

	// Control the font family used in the python preview.
	"pythonPreview.fontFamily": "verdana, arial, helvetica, sans-serif",

	// Control the font size in pixels used in the python preview.
	"pythonPreview.fontSize": 16,

	// Control the font family used in the heap object.
	"pythonPreview.heapObject.fontFamily": "verdana, arial, helvetica, sans-serif",

	// Control the font size in pixels used in the heap object.
	"pythonPreview.heapObject.fontSize": 14,

	// Hide the code display.
	"pythonPreview.hideCode": false,

	// Control the background color used in dict, class and instance key in vscode high-contrast theme.
	"pythonPreview.high-contrast.dict-class-instKey.bgColor": "#f9906f",

	// Control the background color used in dict, class and instance value in vscode high-contrast theme.
	"pythonPreview.high-contrast.dict-class-instVal.bgColor": "#b35c44",

	// Control the color used in highlighted stack frame in vscode high-contrast theme.
	"pythonPreview.high-contrast.highlightedArrow.color": "#005583",

	// Control the background color used in highlighted stack frame in vscode high-contrast theme.
	"pythonPreview.high-contrast.highlightedStackFrame.bgColor": "#ff7500",

	// Control the background color used in list, tuple and set in vscode high-contrast theme.
	"pythonPreview.high-contrast.list-tuple-setTbl.bgColor": "#ca6924",

	// Control the font family used in the lang display area.
	"pythonPreview.langDisplay.fontFamily": "verdana, arial, helvetica, sans-serif",

	// Control the font size in pixels used in the lang display area.
	"pythonPreview.langDisplay.fontSize": 14,

	// Control the font family used in the arrow legend.
	"pythonPreview.legend.fontFamily": "verdana, arial, helvetica, sans-serif",

	// Control the font size in pixels used in the arrow legend.
	"pythonPreview.legend.fontSize": 12,

	// Control the background color used in dict, class and instance key in vscode light theme.
	"pythonPreview.light.dict-class-instKey.bgColor": "#faebbf",

	// Control the background color used in dict, class and instance value in vscode light theme.
	"pythonPreview.light.dict-class-instVal.bgColor": "#ffffc6",

	// Control the color used in highlighted arrow in vscode light theme.
	"pythonPreview.light.highlightedArrow.color": "#005583",

	// Control the background color used in highlighted stack frame in vscode light theme.
	"pythonPreview.light.highlightedStackFrame.bgColor": "#e9f1f6",

	// Control the background color used in list, tuple and set in vscode light theme.
	"pythonPreview.light.list-tuple-setTbl.bgColor": "#ffffc6",

	// Set the max number of executed lines, in order to against infinite loops.
	"pythonPreview.maxExecutedLines": 1000,

	// Control the font family used int the print output docs.
	"pythonPreview.printOutputDocs.fontFamily": "verdana, arial, helvetica, sans-serif",

	// Control the font size in pixels in the print output docs.
	"pythonPreview.printOutputDocs.fontSize": 12,

	// Control the font family used in the python stdout window.
	"pythonPreview.pyStdout.fontFamily": "Andale mono, monospace",

	// Control the font size in pixels used in the python stdout window.
	"pythonPreview.pyStdout.fontSize": 14,

	// Control the font size in pixels used in the function return value.
	"pythonPreview.retVal.fontSize": 12,

	// Display frame and parent frame labels for all functions.
	"pythonPreview.showAllFrameLabels": false,

	// Control the font family used in the stack header and heap header.
	"pythonPreview.stackAndHeapHeader.fontFamily": "erdana, arial, helvetica, sans-serif",

	// Control the font size in pixels used in the stack header and heap header.
	"pythonPreview.stackAndHeapHeader.fontSize": 14,

	// Control the font family used in the stack frame.
	"pythonPreview.stackFrame.fontFamily": "verdana, arial, helvetica, sans-serif",

	// Control the font size in pixels used in the stack frame.
	"pythonPreview.stackFrame.fontSize": 14,

	// Control the font family used in the stack frame header.
	"pythonPreview.stackFrameHeader.fontFamily": "verdana, arial, helvetica, sans-serif",

	// Control the font size in pixels used in the stack frame header.
	"pythonPreview.stackFrameHeader.fontSize": 14,

	// Render refrences using textual memory labels rather than as jsPlumb arrows.
	"pythonPreview.textualMemoryLabels": false,

	// Enable debug logging for the python-preview extension.
	"pythonPreview.trace": "off",

	// Control the font family used in the type label of heap object.
	"pythonPreview.typeLabel.fontFamily": "verdana, arial, helvetica, sans-serif",

	// Control the font size in pixels used in the type label of heap object.
	"pythonPreview.typeLabel.fontSize": 12,

	// Enables the XML Document view in the explorer for XML documents.
	"xmlTools.enableXmlTreeView": true,

	// Enables auto-reveal of elements in the XML Document view when a start tag is clicked in the editor.
	"xmlTools.enableXmlTreeViewCursorSync": false,

	// Enables attribute and child element counts in the XML Document view.
	"xmlTools.enableXmlTreeViewMetadata": true,

	// Enforces a space before the forward slash at the end of a self-closing XML tag.
	"xmlTools.enforcePrettySelfClosingTagOnFormat": false,

	// Ignore default xmlns attributes when evaluating XPath.
	"xmlTools.ignoreDefaultNamespace": true,

	// Remember the last XPath query used.
	"xmlTools.persistXPathQuery": true,

	// Remove XML comments during minification.
	"xmlTools.removeCommentsOnMinify": false,

	// Put each attribute on a new line when formatting XML. Overrides `xmlTools.splitXmlnsOnFormat` if set to `true`.
	"xmlTools.splitAttributesOnFormat": false,

	// Put each xmlns attribute on a new line when formatting XML.
	"xmlTools.splitXmlnsOnFormat": true,

	// Supported XML Formatters: classic
	"xmlTools.xmlFormatterImplementation": "v2",

	// Arguments to be passed to the XQuery execution engine.
	"xmlTools.xqueryExecutionArguments": [
		"-xquery",
		"$(script)",
		"-in",
		"$(input)",
		"-out",
		"$(input).output.xml"
	],

	// The full path to the executable to run when executing XQuery scripts.
	"xmlTools.xqueryExecutionEngine": "",

	// The maximum number of input files to enumerate when executing XQuery scripts.
	"xmlTools.xqueryExecutionInputLimit": 100,

	// The pattern used to search for input XML files when executing XQuery scripts.
	"xmlTools.xqueryExecutionInputSearchPattern": "**/*.xml",

	// Specifies the length of abbreviated commit SHAs
	"gitlens.advanced.abbreviatedShaLength": 7,

	// Specifies whether to copy full or abbreviated commit SHAs to the clipboard. Abbreviates to the length of `gitlens.advanced.abbreviatedShaLength`.
	"gitlens.advanced.abbreviateShaOnCopy": false,

	// Specifies additional arguments to pass to the `git blame` command
	"gitlens.advanced.blame.customArguments": null,

	// Specifies the time (in milliseconds) to wait before re-blaming an unsaved document after an edit. Use 0 to specify an infinite wait
	"gitlens.advanced.blame.delayAfterEdit": 5000,

	// Specifies the maximum document size (in lines) allowed to be re-blamed after an edit while still unsaved. Use 0 to specify no maximum
	"gitlens.advanced.blame.sizeThresholdAfterEdit": 5000,

	// Specifies whether git output will be cached — changing the default is not recommended
	"gitlens.advanced.caching.enabled": true,

	// Specifies the order by which commits will be shown. If unspecified, commits will be shown in reverse chronological order
	//  - null: Shows commits in reverse chronological order
	//  - date: Shows commits in reverse chronological order of the commit timestamp
	//  - author-date: Shows commits in reverse chronological order of the author timestamp
	//  - topo: Shows commits in reverse chronological order of the commit timestamp, but avoids intermixing multiple lines of history
	"gitlens.advanced.commitOrdering": null,

	// Specifies an optional external diff tool to use when comparing files. Must be a configured [Git difftool](https://git-scm.com/docs/git-config#Documentation/git-config.txt-difftool).
	"gitlens.advanced.externalDiffTool": null,

	// Specifies an optional external diff tool to use when comparing directories. Must be a configured [Git difftool](https://git-scm.com/docs/git-config#Documentation/git-config.txt-difftool).
	"gitlens.advanced.externalDirectoryDiffTool": null,

	// Specifies whether file histories will follow renames — will affect how merge commits are shown in histories
	"gitlens.advanced.fileHistoryFollowsRenames": false,

	// Specifies whether file histories will show commits from all branches
	"gitlens.advanced.fileHistoryShowAllBranches": false,

	// Specifies the maximum number of items to show in a list. Use 0 to specify no maximum
	"gitlens.advanced.maxListItems": 200,

	// Specifies the maximum number of items to show in a search. Use 0 to specify no maximum
	"gitlens.advanced.maxSearchItems": 200,

	// Specifies which messages should be suppressed
	"gitlens.advanced.messages": {
		"suppressCommitHasNoPreviousCommitWarning": false,
		"suppressCommitNotFoundWarning": false,
		"suppressCreatePullRequestPrompt": false,
		"suppressDebugLoggingWarning": false,
		"suppressFileNotUnderSourceControlWarning": false,
		"suppressGitDisabledWarning": false,
		"suppressGitMissingWarning": false,
		"suppressGitVersionWarning": false,
		"suppressImproperWorkspaceCasingWarning": false,
		"suppressLineUncommittedWarning": false,
		"suppressNoRepositoryWarning": false,
		"suppressRebaseSwitchToTextWarning": false
	},

	// Specifies whether to dismiss quick pick menus when focus is lost (if not, press `ESC` to dismiss)
	"gitlens.advanced.quickPick.closeOnFocusOut": true,

	// Specifies how many folders deep to search for repositories
	"gitlens.advanced.repositorySearchDepth": 1,

	// Specifies the amount (percent) of similarity a deleted and added file pair must have to be considered a rename
	"gitlens.advanced.similarityThreshold": null,

	// Deprecated. This setting is no longer used
	// Deprecated. This setting is no longer used
	"gitlens.advanced.useSymmetricDifferenceNotation": null,

	// Specifies autolinks to external resources in commit messages. Use `<num>` as the variable for the reference number
	"gitlens.autolinks": null,

	// Specifies whether to show avatar images in the gutter blame annotations
	"gitlens.blame.avatars": true,

	// Specifies whether to compact (deduplicate) matching adjacent gutter blame annotations
	"gitlens.blame.compact": true,

	// Specifies how to format absolute dates (e.g. using the `${date}` token) in gutter blame annotations. See the [Moment.js docs](https://momentjs.com/docs/#/displaying/format/) for valid formats
	"gitlens.blame.dateFormat": null,

	// Specifies the format of the gutter blame annotations. See [_Commit Tokens_](https://github.com/eamodio/vscode-gitlens/wiki/Custom-Formatting#commit-tokens) in the GitLens docs. Date formatting is controlled by the `gitlens.blame.dateFormat` setting
	"gitlens.blame.format": "${message|50?} ${agoOrDate|14-}",

	// Specifies whether to provide a heatmap indicator in the gutter blame annotations
	"gitlens.blame.heatmap.enabled": true,

	// Specifies where the heatmap indicators will be shown in the gutter blame annotations
	//  - left: Adds a heatmap indicator on the left edge of the gutter blame annotations
	//  - right: Adds a heatmap indicator on the right edge of the gutter blame annotations
	"gitlens.blame.heatmap.location": "right",

	// Specifies whether to highlight lines associated with the current line
	"gitlens.blame.highlight.enabled": true,

	// Specifies where the associated line highlights will be shown
	"gitlens.blame.highlight.locations": [
		"gutter",
		"line",
		"overview"
	],

	// Specifies whether to ignore whitespace when comparing revisions during blame operations
	"gitlens.blame.ignoreWhitespace": false,

	// Specifies whether gutter blame annotations will be separated by a small gap
	"gitlens.blame.separateLines": true,

	// Specifies how the gutter blame annotations will be toggled
	//  - file: Toggles each file individually
	//  - window: Toggles the window, i.e. all files at once
	"gitlens.blame.toggleMode": "file",

	// Specifies where the indicators of the gutter changes annotations will be shown
	"gitlens.changes.locations": [
		"gutter",
		"overview"
	],

	// Specifies how the gutter changes annotations will be toggled
	//  - file: Toggles each file individually
	//  - window: Toggles the window, i.e. all files at once
	"gitlens.changes.toggleMode": "file",

	// Specifies the command to be executed when an _authors_ code lens is clicked
	"gitlens.codeLens.authors.command": "gitlens.toggleFileBlame",

	// Specifies whether to provide an _authors_ code lens, showing number of authors of the file or code block and the most prominent author (if there is more than one)
	"gitlens.codeLens.authors.enabled": true,

	// Specifies whether to provide any Git code lens, by default. Use the `Toggle Git Code Lens` command (`gitlens.toggleCodeLens`) to toggle the Git code lens on and off for the current window
	"gitlens.codeLens.enabled": true,

	// Specifies whether to provide any Git code lens on symbols that span only a single line
	"gitlens.codeLens.includeSingleLineSymbols": false,

	// Specifies the command to be executed when a _recent change_ code lens is clicked
	"gitlens.codeLens.recentChange.command": "gitlens.showQuickCommitFileDetails",

	// Specifies whether to provide a _recent change_ code lens, showing the author and date of the most recent commit for the file or code block
	"gitlens.codeLens.recentChange.enabled": true,

	// Specifies where Git code lens will be shown in the document
	"gitlens.codeLens.scopes": [
		"document",
		"containers"
	],

	// Deprecated. Use the per-language `gitlens.codeLens.scopes#` and `#gitlens.codeLens.symbolScopes` settings instead
	// 
	"gitlens.codeLens.scopesByLanguage": null,

	// Specifies a set of document symbols where Git code lens will or will not be shown in the document. Prefix with `!` to avoid providing a Git code lens for the symbol. Must be a member of `SymbolKind`
	"gitlens.codeLens.symbolScopes": [],

	// Specifies how to format absolute dates (e.g. using the `${date}` token) for the current line blame annotation. See the [Moment.js docs](https://momentjs.com/docs/#/displaying/format/) for valid formats
	"gitlens.currentLine.dateFormat": null,

	// Specifies whether to provide a blame annotation for the current line, by default. Use the `Toggle Line Blame Annotations` command (`gitlens.toggleLineBlame`) to toggle the annotations on and off for the current window
	"gitlens.currentLine.enabled": true,

	// Specifies the format of the current line blame annotation. See [_Commit Tokens_](https://github.com/eamodio/vscode-gitlens/wiki/Custom-Formatting#commit-tokens) in the GitLens docs. Date formatting is controlled by the `gitlens.currentLine.dateFormat` setting
	"gitlens.currentLine.format": "${author, }${agoOrDate}${' via 'pullRequest}${ • message|50?}",

	// Specifies whether to provide information about the Pull Request (if any) that introduced the commit in the current line blame annotation. Requires a connection to a supported remote service (e.g. GitHub)
	"gitlens.currentLine.pullRequests.enabled": true,

	// Specifies whether the current line blame annotation can be scrolled into view when it is outside the viewport. **NOTE**: Setting this to `false` will inhibit the hovers from showing over the annotation; Set `gitlens.hovers.currentLine.over` to `line` to enable the hovers to show anywhere over the line.
	"gitlens.currentLine.scrollable": true,

	// Specifies debug mode
	"gitlens.debug": false,

	// Specifies how absolute dates will be formatted by default. See the [Moment.js docs](https://momentjs.com/docs/#/displaying/format/) for valid formats
	"gitlens.defaultDateFormat": null,

	// Specifies how short absolute dates will be formatted by default. See the [Moment.js docs](https://momentjs.com/docs/#/displaying/format/) for valid formats
	"gitlens.defaultDateShortFormat": null,

	// Specifies whether commit dates should use the authored or committed date
	//  - authored: Uses the date when the changes were authored (i.e. originally written)
	//  - committed: Uses the date when the changes were committed
	"gitlens.defaultDateSource": "authored",

	// Specifies how dates will be displayed by default
	//  - relative: e.g. 1 day ago
	//  - absolute: e.g. July 25th, 2018 7:18pm
	"gitlens.defaultDateStyle": "relative",

	// Specifies the style of the gravatar default (fallback) images
	//  - identicon: A geometric pattern
	//  - mp: A simple, cartoon-style silhouetted outline of a person (does not vary by email hash)
	//  - monsterid: A monster with different colors, faces, etc
	//  - retro: 8-bit arcade-style pixelated faces
	//  - robohash: A robot with different colors, faces, etc
	//  - wavatar: A face with differing features and backgrounds
	"gitlens.defaultGravatarsStyle": "robohash",

	// Specifies how times will be formatted by default. See the [Moment.js docs](https://momentjs.com/docs/#/displaying/format/) for valid formats
	"gitlens.defaultTimeFormat": null,

	// Specifies whether the file annotations button in the editor title shows a menu or immediately toggles the specified file annotations
	//  - null: Shows a menu to choose which file annotations to toggle
	//  - blame: Toggles gutter blame annotations
	//  - heatmap: Toggles gutter heatmap annotations
	//  - changes: Toggles gutter changes annotations
	"gitlens.fileAnnotations.command": null,

	// Specifies whether to dismiss the _Git Command Palette_ when focus is lost (if not, press `ESC` to dismiss)
	"gitlens.gitCommands.closeOnFocusOut": true,

	// Specifies whether to match all or any commit message search patterns
	"gitlens.gitCommands.search.matchAll": false,

	// Specifies whether to match commit search patterns with or without regard to casing
	"gitlens.gitCommands.search.matchCase": false,

	// Specifies whether to match commit search patterns using regular expressions
	"gitlens.gitCommands.search.matchRegex": true,

	// Specifies whether to show the commit search results directly in the quick pick menu, in the Side Bar, or will be based on the context
	"gitlens.gitCommands.search.showResultsInSideBar": null,

	// Deprecated. This setting has been renamed to `gitlens.gitCommands.search.showResultsInSideBar`
	// 
	"gitlens.gitCommands.search.showResultsInView": null,

	// Specifies which (and when) Git commands will skip the confirmation step, using the format: `git-command-name:(menu|command)`
	"gitlens.gitCommands.skipConfirmations": [
		"fetch:command",
		"stash-push:command",
		"switch:command"
	],

	// Specifies how Git commands are sorted in the _Git Command Palette_
	//  - name: Sorts commands by name
	//  - usage: Sorts commands by last used date
	"gitlens.gitCommands.sortBy": "usage",

	// Specifies the age of the most recent change (in days) after which the gutter heatmap annotations will be cold rather than hot (i.e. will use `gitlens.heatmap.coldColor#` instead of `#gitlens.heatmap.hotColor`)
	"gitlens.heatmap.ageThreshold": 90,

	// Specifies the base color of the gutter heatmap annotations when the most recent change is older (cold) than the `gitlens.heatmap.ageThreshold` value
	"gitlens.heatmap.coldColor": "#0a60f6",

	// Specifies the base color of the gutter heatmap annotations when the most recent change is newer (hot) than the `gitlens.heatmap.ageThreshold` value
	"gitlens.heatmap.hotColor": "#f66a0a",

	// Specifies where the indicators of the gutter heatmap annotations will be shown
	"gitlens.heatmap.locations": [
		"gutter",
		"overview"
	],

	// Specifies how the gutter heatmap annotations will be toggled
	//  - file: Toggles each file individually
	//  - window: Toggles the window, i.e. all files at once
	"gitlens.heatmap.toggleMode": "file",

	// Specifies whether to provide a _changes (diff)_ hover for all lines when showing blame annotations
	"gitlens.hovers.annotations.changes": true,

	// Specifies whether to provide a _commit details_ hover for all lines when showing blame annotations
	"gitlens.hovers.annotations.details": true,

	// Specifies whether to provide any hovers when showing blame annotations
	"gitlens.hovers.annotations.enabled": true,

	// Specifies when to trigger hovers when showing blame annotations
	//  - annotation: Only shown when hovering over the line annotation
	//  - line: Shown when hovering anywhere over the line
	"gitlens.hovers.annotations.over": "line",

	// Specifies whether to automatically link external resources in commit messages
	"gitlens.hovers.autolinks.enabled": true,

	// Specifies whether to lookup additional details about automatically link external resources in commit messages. Requires a connection to a supported remote service (e.g. GitHub)
	"gitlens.hovers.autolinks.enhanced": true,

	// Specifies whether to show avatar images in hovers
	"gitlens.hovers.avatars": true,

	// Specifies the size of the avatar images in hovers
	"gitlens.hovers.avatarSize": 32,

	// Specifies whether to show just the changes to the line or the set of related changes in the _changes (diff)_ hover
	//  - line: Shows only the changes to the line
	//  - hunk: Shows the set of related changes
	"gitlens.hovers.changesDiff": "line",

	// Specifies whether to provide a _changes (diff)_ hover for the current line
	"gitlens.hovers.currentLine.changes": true,

	// Specifies whether to provide a _commit details_ hover for the current line
	"gitlens.hovers.currentLine.details": true,

	// Specifies whether to provide any hovers for the current line
	"gitlens.hovers.currentLine.enabled": true,

	// Specifies when to trigger hovers for the current line
	//  - annotation: Only shown when hovering over the line annotation
	//  - line: Shown when hovering anywhere over the line
	"gitlens.hovers.currentLine.over": "annotation",

	// Specifies the format (in markdown) of the _commit details_ hover. See [_Commit Tokens_](https://github.com/eamodio/vscode-gitlens/wiki/Custom-Formatting#commit-tokens) in the GitLens docs
	"gitlens.hovers.detailsMarkdownFormat": "${avatar} &nbsp;__${author}__, ${ago}${' via 'pullRequest} &nbsp; _(${date})_ \n\n${message}\n\n${commands}",

	// Specifies whether to provide any hovers
	"gitlens.hovers.enabled": true,

	// Specifies whether to provide information about the Pull Request (if any) that introduced the commit in the hovers. Requires a connection to a supported remote service (e.g. GitHub)
	"gitlens.hovers.pullRequests.enabled": true,

	// Deprecated. Use the [Insiders edition](https://marketplace.visualstudio.com/items?itemName=eamodio.gitlens-insiders) of GitLens instead
	// 
	"gitlens.insiders": null,

	// Specifies whether to enable rich integrations with any supported remote services
	"gitlens.integrations.enabled": true,

	// Specifies the keymap to use for GitLens shortcut keys
	//  - alternate: Adds an alternate set of shortcut keys that start with `Alt` (⌥ on macOS)
	//  - chorded: Adds a chorded set of shortcut keys that start with `Ctrl+Alt+G` (`⌥⌘G` on macOS)
	//  - none: No shortcut keys will be added
	"gitlens.keymap": "chorded",

	// Specifies whether to allow guest access to GitLens features when using Visual Studio Live Share
	"gitlens.liveshare.allowGuestAccess": true,

	// Specifies which commands will be added to which menus
	"gitlens.menus": {
		"editor": {
			"blame": false,
			"clipboard": true,
			"compare": true,
			"history": false,
			"remote": false
		},
		"editorGroup": {
			"blame": true,
			"compare": true
		},
		"editorTab": {
			"clipboard": true,
			"compare": true,
			"history": true,
			"remote": true
		},
		"explorer": {
			"clipboard": true,
			"compare": true,
			"history": true,
			"remote": true
		},
		"scm": {
			"authors": true
		},
		"scmGroupInline": {
			"stash": true
		},
		"scmGroup": {
			"compare": true,
			"openClose": true,
			"stash": true
		},
		"scmItem": {
			"clipboard": true,
			"compare": true,
			"history": true,
			"remote": false,
			"stash": true
		}
	},

	// Specifies the active GitLens mode, if any
	"gitlens.mode.active": "",

	// Specifies the active GitLens mode alignment in the status bar
	//  - left: Aligns to the left
	//  - right: Aligns to the right
	"gitlens.mode.statusBar.alignment": "right",

	// Specifies whether to provide the active GitLens mode in the status bar
	"gitlens.mode.statusBar.enabled": true,

	// Specifies the user-defined GitLens modes
	"gitlens.modes": {
		"zen": {
			"name": "Zen",
			"statusBarItemName": "Zen",
			"description": "for a zen-like experience, disables many visual features",
			"codeLens": false,
			"currentLine": false,
			"hovers": false,
			"statusBar": false
		},
		"review": {
			"name": "Review",
			"statusBarItemName": "Reviewing",
			"description": "for reviewing code, enables many visual features",
			"codeLens": true,
			"currentLine": true,
			"hovers": true
		}
	},

	// Specifies how much (if any) output will be sent to the GitLens output channel
	//  - silent: Logs nothing
	//  - errors: Logs only errors
	//  - verbose: Logs all errors, warnings, and messages
	//  - debug: Logs all errors, warnings, and messages with extra context useful for debugging
	"gitlens.outputLevel": "errors",

	// Specifies the configuration of a partner integration
	"gitlens.partners": null,

	// Specifies user-defined remote (code-hosting) services or custom domains for built-in remote services
	"gitlens.remotes": null,

	// Specifies whether to show the Welcome (Quick Setup) experience on first install
	"gitlens.showWelcomeOnInstall": true,

	// Specifies whether to show the What's New notification after upgrading to new feature releases
	"gitlens.showWhatsNewAfterUpgrades": true,

	// Specifies how branches are sorted in quick pick menus and views
	//  - date:desc: Sorts branches by the most recent commit date in descending order
	//  - date:asc: Sorts branches by the most recent commit date in ascending order
	//  - name:asc: Sorts branches by name in ascending order
	//  - name:desc: Sorts branches by name in descending order
	"gitlens.sortBranchesBy": "date:desc",

	// Specifies how contributors are sorted in quick pick menus and views
	//  - count:desc: Sorts contributors by commit count in descending order
	//  - count:asc: Sorts contributors by commit count in ascending order
	//  - date:desc: Sorts contributors by the most recent commit date in descending order
	//  - date:asc: Sorts contributors by the most recent commit date in ascending order
	//  - name:asc: Sorts contributors by name in ascending order
	//  - name:desc: Sorts contributors by name in descending order
	"gitlens.sortContributorsBy": "count:desc",

	// Specifies how tags are sorted in quick pick menus and views
	//  - date:desc: Sorts tags by date in descending order
	//  - date:asc: Sorts tags by date in ascending order
	//  - name:asc: Sorts tags by name in ascending order
	//  - name:desc: Sorts tags by name in descending order
	"gitlens.sortTagsBy": "date:desc",

	// Specifies the blame alignment in the status bar
	//  - left: Aligns to the left
	//  - right: Aligns to the right
	"gitlens.statusBar.alignment": "right",

	// Specifies the command to be executed when the blame status bar item is clicked
	//  - gitlens.toggleFileBlame: Toggles file blame
	//  - gitlens.toggleFileHeatmap: Toggles file heatmap
	//  - gitlens.toggleFileChanges: Toggles file changes since before the commit
	//  - gitlens.toggleFileChangesOnly: Toggles file changes from the commit
	//  - gitlens.toggleCodeLens: Toggles Git code lens
	//  - gitlens.diffWithPrevious: Compares the current line commit with the previous
	//  - gitlens.diffWithWorking: Compares the current line commit with the working tree
	//  - gitlens.revealCommitInView: Reveals the commit in the Side Bar
	//  - gitlens.showCommitsInView: Searches for the commit
	//  - gitlens.showQuickCommitDetails: Shows a commit details quick pick menu
	//  - gitlens.showQuickCommitFileDetails: Shows a commit file details quick pick menu
	//  - gitlens.showQuickFileHistory: Shows a file history quick pick menu
	//  - gitlens.showQuickRepoHistory: Shows a branch history quick pick menu
	//  - gitlens.openCommitOnRemote: Opens the commit on the remote service (when available)
	//  - gitlens.copyRemoteCommitUrl: Copies the remote commit url to the clipboard (when available)
	//  - gitlens.openFileOnRemote: Opens the file revision on the remote service (when available)
	//  - gitlens.copyRemoteFileUrl: Copies the remote file url to the clipboard (when available)
	"gitlens.statusBar.command": "gitlens.showQuickCommitDetails",

	// Specifies how to format absolute dates (e.g. using the `${date}` token) in the blame information in the status bar. See the [Moment.js docs](https://momentjs.com/docs/#/displaying/format/) for valid formats
	"gitlens.statusBar.dateFormat": null,

	// Specifies whether to provide blame information in the status bar
	"gitlens.statusBar.enabled": true,

	// Specifies the format of the blame information in the status bar. See [_Commit Tokens_](https://github.com/eamodio/vscode-gitlens/wiki/Custom-Formatting#commit-tokens) in the GitLens docs. Date formatting is controlled by the `gitlens.statusBar.dateFormat` setting
	"gitlens.statusBar.format": "${author}, ${agoOrDate}${' via 'pullRequest}",

	// Specifies whether to provide information about the Pull Request (if any) that introduced the commit in the status bar. Requires a connection to a supported remote service (e.g. GitHub)
	"gitlens.statusBar.pullRequests.enabled": true,

	// Specifies whether to avoid clearing the previous blame information when changing lines to reduce status bar "flashing"
	"gitlens.statusBar.reduceFlicker": true,

	// Specifies the string to be shown in place of the _authors_ code lens when there are unsaved changes
	"gitlens.strings.codeLens.unsavedChanges.authorsOnly": "$(ellipsis)",

	// Specifies the string to be shown in place of both the _recent change_ and _authors_ code lens when there are unsaved changes
	"gitlens.strings.codeLens.unsavedChanges.recentChangeAndAuthors": "$(ellipsis)",

	// Specifies the string to be shown in place of the _recent change_ code lens when there are unsaved changes
	"gitlens.strings.codeLens.unsavedChanges.recentChangeOnly": "$(ellipsis)",

	// Specifies whether to enable terminal links &mdash; autolinks in the integrated terminal to quickly jump to more details for commits, branches, tags, and more
	"gitlens.terminalLinks.enabled": true,

	// Specifies whether to show avatar images instead of commit (or status) icons in the _Branches_ view
	"gitlens.views.branches.avatars": true,

	// Specifies how the _Branches_ view will display branches
	//  - list: Displays branches as a list
	//  - tree: Displays branches as a tree when branch names contain slashes `/`
	"gitlens.views.branches.branches.layout": "tree",

	// Specifies whether to compact (flatten) unnecessary file nesting in the _Branches_ view. Only applies when `gitlens.views.branches.files.layout` is set to `tree` or `auto`
	"gitlens.views.branches.files.compact": true,

	// Specifies how the _Branches_ view will display files
	//  - auto: Automatically switches between displaying files as a `tree` or `list` based on the `gitlens.views.branches.files.threshold` value and the number of files at each nesting level
	//  - list: Displays files as a list
	//  - tree: Displays files as a tree
	"gitlens.views.branches.files.layout": "auto",

	// Specifies when to switch between displaying files as a `tree` or `list` based on the number of files in a nesting level in the _Branches_ view. Only applies when `gitlens.views.branches.files.layout` is set to `auto`
	"gitlens.views.branches.files.threshold": 5,

	// Specifies whether to query for pull requests associated with branches and commits in the _Branches_ view. Requires a connection to a supported remote service (e.g. GitHub)
	"gitlens.views.branches.pullRequests.enabled": true,

	// Specifies whether to show pull requests (if any) associated with branches in the _Branches_ view. Requires a connection to a supported remote service (e.g. GitHub)
	"gitlens.views.branches.pullRequests.showForBranches": true,

	// Specifies whether to show pull requests (if any) associated with commits in the _Branches_ view. Requires a connection to a supported remote service (e.g. GitHub)
	"gitlens.views.branches.pullRequests.showForCommits": true,

	// Specifies whether to reveal branches in the _Branches_ view, otherwise they revealed in the _Repositories_ view
	"gitlens.views.branches.reveal": true,

	// Specifies whether to show a comparison of the branch with a user-selected reference (branch, tag. etc) in the _Branches_ view
	"gitlens.views.branches.showBranchComparison": "branch",

	// Deprecated. Use `gitlens.views.formats.commits.description` instead
	// 
	"gitlens.views.commitDescriptionFormat": null,

	// Deprecated. Use `gitlens.views.formats.files.description` instead
	// 
	"gitlens.views.commitFileDescriptionFormat": null,

	// Deprecated. Use `gitlens.views.formats.files.label` instead
	// 
	"gitlens.views.commitFileFormat": null,

	// Deprecated. Use `gitlens.views.commits.files.label` instead
	// 
	"gitlens.views.commitFormat": null,

	// Specifies whether to show avatar images instead of commit (or status) icons in the _Commits_ view
	"gitlens.views.commits.avatars": true,

	// Specifies whether to compact (flatten) unnecessary file nesting in the _Commits_ view. Only applies when `gitlens.views.commits.files.layout` is set to `tree` or `auto`
	"gitlens.views.commits.files.compact": true,

	// Specifies how the _Commits_ view will display files
	//  - auto: Automatically switches between displaying files as a `tree` or `list` based on the `gitlens.views.commits.files.threshold` value and the number of files at each nesting level
	//  - list: Displays files as a list
	//  - tree: Displays files as a tree
	"gitlens.views.commits.files.layout": "auto",

	// Specifies when to switch between displaying files as a `tree` or `list` based on the number of files in a nesting level in the _Commits_ view. Only applies when `gitlens.views.commits.files.layout` is set to `auto`
	"gitlens.views.commits.files.threshold": 5,

	// Specifies whether to query for pull requests associated with the current branch and commits in the _Commits_ view. Requires a connection to a supported remote service (e.g. GitHub)
	"gitlens.views.commits.pullRequests.enabled": true,

	// Specifies whether to show pull requests (if any) associated with the current branch in the _Commits_ view. Requires a connection to a supported remote service (e.g. GitHub)
	"gitlens.views.commits.pullRequests.showForBranches": true,

	// Specifies whether to show pull requests (if any) associated with commits in the _Commits_ view. Requires a connection to a supported remote service (e.g. GitHub)
	"gitlens.views.commits.pullRequests.showForCommits": true,

	// Specifies whether to reveal commits in the _Commits_ view, otherwise they revealed in the _Repositories_ view
	"gitlens.views.commits.reveal": true,

	// Specifies whether to show a comparison of the current branch or the working tree with a user-selected reference (branch, tag. etc) in the _Commits_ view
	"gitlens.views.commits.showBranchComparison": "working",

	// Specifies whether to show avatar images instead of commit (or status) icons in the _Contributors_ view
	"gitlens.views.contributors.avatars": true,

	// Specifies whether to compact (flatten) unnecessary file nesting in the _Contributors_ view. Only applies when `gitlens.views.contributors.files.layout` is set to `tree` or `auto`
	"gitlens.views.contributors.files.compact": true,

	// Specifies how the _Contributors_ view will display files
	//  - auto: Automatically switches between displaying files as a `tree` or `list` based on the `gitlens.views.contributors.files.threshold` value and the number of files at each nesting level
	//  - list: Displays files as a list
	//  - tree: Displays files as a tree
	"gitlens.views.contributors.files.layout": "auto",

	// Specifies when to switch between displaying files as a `tree` or `list` based on the number of files in a nesting level in the _Contributors_ view. Only applies when `gitlens.views.contributors.files.layout` is set to `auto`
	"gitlens.views.contributors.files.threshold": 5,

	// Specifies whether to query for pull requests associated with branches and commits in the _Contributors_ view. Requires a connection to a supported remote service (e.g. GitHub)
	"gitlens.views.contributors.pullRequests.enabled": true,

	// Specifies whether to show pull requests (if any) associated with commits in the _Contributors_ view. Requires a connection to a supported remote service (e.g. GitHub)
	"gitlens.views.contributors.pullRequests.showForCommits": true,

	// Specifies whether to show commits from all branches in the _Contributors_ view
	"gitlens.views.contributors.showAllBranches": false,

	// Specifies the default number of items to show in a view list. Use 0 to specify no limit
	"gitlens.views.defaultItemLimit": 10,

	// Specifies whether to show avatar images instead of status icons in the _File History_ view
	"gitlens.views.fileHistory.avatars": true,

	// Specifies whether to compact (flatten) unnecessary file nesting in the _File History_ view. Only applies to folder history and when `gitlens.views.fileHistory.files.layout` is set to `tree` or `auto`
	"gitlens.views.fileHistory.files.compact": true,

	// Specifies how the _File History_ view will display files when showing the history of a folder
	//  - auto: Automatically switches between displaying files as a `tree` or `list` based on the `gitlens.views.fileHistory.files.threshold` value and the number of files at each nesting level
	//  - list: Displays files as a list
	//  - tree: Displays files as a tree
	"gitlens.views.fileHistory.files.layout": "auto",

	// Specifies when to switch between displaying files as a `tree` or `list` based on the number of files in a nesting level in the _File History_ view. Only applies to folder history and when `gitlens.views.fileHistory.files.layout` is set to `auto`
	"gitlens.views.fileHistory.files.threshold": 5,

	// Specifies the description format of commits in the views. See [_Commit Tokens_](https://github.com/eamodio/vscode-gitlens/wiki/Custom-Formatting#commit-tokens) in the GitLens docs
	"gitlens.views.formats.commits.description": "${author, }${agoOrDate}",

	// Specifies the format of commits in the views. See [_Commit Tokens_](https://github.com/eamodio/vscode-gitlens/wiki/Custom-Formatting#commit-tokens) in the GitLens docs
	"gitlens.views.formats.commits.label": "${❰ tips ❱➤  }${message}",

	// Specifies the description format of a file in the views. See [_File Tokens_](https://github.com/eamodio/vscode-gitlens/wiki/Custom-Formatting#file-tokens) in the GitLens docs
	"gitlens.views.formats.files.description": "${directory}${  ←  originalPath}",

	// Specifies the format of a file in the views. See [_File Tokens_](https://github.com/eamodio/vscode-gitlens/wiki/Custom-Formatting#file-tokens) in the GitLens docs
	"gitlens.views.formats.files.label": "${working  }${file}",

	// Specifies the description format of stashes in the views. See [_Commit Tokens_](https://github.com/eamodio/vscode-gitlens/wiki/Custom-Formatting#commit-tokens) in the GitLens docs
	"gitlens.views.formats.stashes.description": "${agoOrDate}",

	// Specifies the format of stashes in the views. See [_Commit Tokens_](https://github.com/eamodio/vscode-gitlens/wiki/Custom-Formatting#commit-tokens) in the GitLens docs
	"gitlens.views.formats.stashes.label": "${message}",

	// Specifies whether to show avatar images instead of status icons in the _Line History_ view
	"gitlens.views.lineHistory.avatars": true,

	// Deprecated. This setting is no longer used
	// 
	"gitlens.views.lineHistory.enabled": null,

	// Specifies the number of items to show in a each page when paginating a view list. Use 0 to specify no limit
	"gitlens.views.pageItemLimit": 40,

	// Specifies whether to show avatar images instead of commit (or status) icons in the _Remotes_ view
	"gitlens.views.remotes.avatars": true,

	// Specifies how the _Remotes_ view will display branches
	//  - list: Displays branches as a list
	//  - tree: Displays branches as a tree when branch names contain slashes `/`
	"gitlens.views.remotes.branches.layout": "tree",

	// Specifies whether to compact (flatten) unnecessary file nesting in the _Remotes_ view. Only applies when `gitlens.views.remotes.files.layout` is set to `tree` or `auto`
	"gitlens.views.remotes.files.compact": true,

	// Specifies how the _Remotes_ view will display files
	//  - auto: Automatically switches between displaying files as a `tree` or `list` based on the `gitlens.views.remotes.files.threshold` value and the number of files at each nesting level
	//  - list: Displays files as a list
	//  - tree: Displays files as a tree
	"gitlens.views.remotes.files.layout": "auto",

	// Specifies when to switch between displaying files as a `tree` or `list` based on the number of files in a nesting level in the _Remotes_ view. Only applies when `gitlens.views.remotes.files.layout` is set to `auto`
	"gitlens.views.remotes.files.threshold": 5,

	// Specifies whether to query for pull requests associated with branches and commits in the _Remotes_ view. Requires a connection to a supported remote service (e.g. GitHub)
	"gitlens.views.remotes.pullRequests.enabled": true,

	// Specifies whether to show pull requests (if any) associated with branches in the _Remotes_ view. Requires a connection to a supported remote service (e.g. GitHub)
	"gitlens.views.remotes.pullRequests.showForBranches": true,

	// Specifies whether to show pull requests (if any) associated with commits in the _Remotes_ view. Requires a connection to a supported remote service (e.g. GitHub)
	"gitlens.views.remotes.pullRequests.showForCommits": true,

	// Specifies whether to reveal remotes in the _Remotes_ view, otherwise they revealed in the _Repositories_ view
	"gitlens.views.remotes.reveal": true,

	// Specifies whether to automatically refresh the _Repositories_ view when the repository or the file system changes
	"gitlens.views.repositories.autoRefresh": true,

	// Specifies whether to automatically reveal repositories in the _Repositories_ view when opening files
	"gitlens.views.repositories.autoReveal": true,

	// Specifies whether to show avatar images instead of commit (or status) icons in the _Repositories_ view
	"gitlens.views.repositories.avatars": true,

	// Specifies how the _Repositories_ view will display branches
	//  - list: Displays branches as a list
	//  - tree: Displays branches as a tree when branch names contain slashes `/`
	"gitlens.views.repositories.branches.layout": "tree",

	// Specifies whether to show a comparison of the branch with a user-selected reference (branch, tag. etc) under each branch in the _Repositories_ view
	"gitlens.views.repositories.branches.showBranchComparison": "branch",

	// Specifies whether to show the _Repositories_ view in a compact display density
	"gitlens.views.repositories.compact": false,

	// Deprecated. This setting is no longer used
	// 
	"gitlens.views.repositories.enabled": null,

	// Specifies whether to compact (flatten) unnecessary file nesting in the _Repositories_ view. Only applies when `gitlens.views.repositories.files.layout` is set to `tree` or `auto`
	"gitlens.views.repositories.files.compact": true,

	// Specifies how the _Repositories_ view will display files
	//  - auto: Automatically switches between displaying files as a `tree` or `list` based on the `gitlens.views.repositories.files.threshold` value and the number of files at each nesting level
	//  - list: Displays files as a list
	//  - tree: Displays files as a tree
	"gitlens.views.repositories.files.layout": "auto",

	// Specifies when to switch between displaying files as a `tree` or `list` based on the number of files in a nesting level in the _Repositories_ view. Only applies when `gitlens.views.repositories.files.layout` is set to `auto`
	"gitlens.views.repositories.files.threshold": 5,

	// Specifies whether to include working tree file status for each repository in the _Repositories_ view
	"gitlens.views.repositories.includeWorkingTree": false,

	// Specifies whether to query for pull requests associated with branches and commits in the _Repositories_ view. Requires a connection to a supported remote service (e.g. GitHub)
	"gitlens.views.repositories.pullRequests.enabled": true,

	// Specifies whether to show pull requests (if any) associated with branches in the _Repositories_ view. Requires a connection to a supported remote service (e.g. GitHub)
	"gitlens.views.repositories.pullRequests.showForBranches": true,

	// Specifies whether to show pull requests (if any) associated with commits in the _Repositories_ view. Requires a connection to a supported remote service (e.g. GitHub)
	"gitlens.views.repositories.pullRequests.showForCommits": true,

	// Specifies whether to show a comparison of the current branch or the working tree with a user-selected reference (branch, tag. etc) in the _Repositories_ view
	"gitlens.views.repositories.showBranchComparison": "working",

	// Specifies whether to show the branches for each repository in the _Repositories_ view
	"gitlens.views.repositories.showBranches": true,

	// Specifies whether to show the commits on the current branch for each repository in the _Repositories_ view
	"gitlens.views.repositories.showCommits": true,

	// Specifies whether to show the contributors for each repository in the _Repositories_ view
	"gitlens.views.repositories.showContributors": true,

	// Specifies whether to show the experimental incoming activity for each repository in the _Repositories_ view
	"gitlens.views.repositories.showIncomingActivity": false,

	// Specifies whether to show the remotes for each repository in the _Repositories_ view
	"gitlens.views.repositories.showRemotes": true,

	// Specifies whether to show the stashes for each repository in the _Repositories_ view
	"gitlens.views.repositories.showStashes": true,

	// Specifies whether to show the tags for each repository in the _Repositories_ view
	"gitlens.views.repositories.showTags": true,

	// Specifies whether to show the upstream status of the current branch for each repository in the _Repositories_ view
	"gitlens.views.repositories.showUpstreamStatus": true,

	// Specifies whether to show avatar images instead of commit (or status) icons in the _Search & Compare_ view
	"gitlens.views.searchAndCompare.avatars": true,

	// Specifies whether to compact (flatten) unnecessary file nesting in the _Search & Compare_ view. Only applies when `gitlens.views.searchAndCompare.files.layout` is set to `tree` or `auto`
	"gitlens.views.searchAndCompare.files.compact": true,

	// Specifies how the _Search & Compare_ view will display files
	//  - auto: Automatically switches between displaying files as a `tree` or `list` based on the `gitlens.views.searchAndCompare.files.threshold` value and the number of files at each nesting level
	//  - list: Displays files as a list
	//  - tree: Displays files as a tree
	"gitlens.views.searchAndCompare.files.layout": "auto",

	// Specifies when to switch between displaying files as a `tree` or `list` based on the number of files in a nesting level in the _Search & Compare_ view. Only applies when `gitlens.views.searchAndCompare.files.layout` is set to `auto`
	"gitlens.views.searchAndCompare.files.threshold": 5,

	// Specifies whether to query for pull requests associated with commits in the _Search & Compare_ view. Requires a connection to a supported remote service (e.g. GitHub)
	"gitlens.views.searchAndCompare.pullRequests.enabled": true,

	// Specifies whether to show pull requests (if any) associated with commits in the _Search & Compare_ view. Requires a connection to a supported remote service (e.g. GitHub)
	"gitlens.views.searchAndCompare.pullRequests.showForCommits": true,

	// Specifies whether to show relative date markers (_Less than a week ago_, _Over a week ago_, _Over a month ago_, etc) on revision (commit) histories in the views
	"gitlens.views.showRelativeDateMarkers": true,

	// Deprecated. Use `gitlens.views.formats.stashes.description` instead
	// 
	"gitlens.views.stashDescriptionFormat": null,

	// Specifies whether to compact (flatten) unnecessary file nesting in the _Stashes_ view. Only applies when `gitlens.views.stashes.files.layout` is set to `tree` or `auto`
	"gitlens.views.stashes.files.compact": true,

	// Specifies how the _Stashes_ view will display files
	//  - auto: Automatically switches between displaying files as a `tree` or `list` based on the `gitlens.views.stashes.files.threshold` value and the number of files at each nesting level
	//  - list: Displays files as a list
	//  - tree: Displays files as a tree
	"gitlens.views.stashes.files.layout": "auto",

	// Specifies when to switch between displaying files as a `tree` or `list` based on the number of files in a nesting level in the _Stashes_ view. Only applies when `gitlens.views.stashes.files.layout` is set to `auto`
	"gitlens.views.stashes.files.threshold": 5,

	// Specifies whether to reveal stashes in the _Stashes_ view, otherwise they revealed in the _Repositories_ view
	"gitlens.views.stashes.reveal": true,

	// Deprecated. Use `gitlens.views.formats.files.description` instead
	// 
	"gitlens.views.stashFileDescriptionFormat": null,

	// Deprecated. Use `gitlens.views.formats.files.label` instead
	// 
	"gitlens.views.stashFileFormat": null,

	// Deprecated. Use `gitlens.views.stashes.files.label` instead
	// 
	"gitlens.views.stashFormat": null,

	// Deprecated. Use `gitlens.views.formats.files.description` instead
	// 
	"gitlens.views.statusFileDescriptionFormat": null,

	// Deprecated. Use `gitlens.views.formats.files.label` instead
	// 
	"gitlens.views.statusFileFormat": null,

	// Specifies whether to show avatar images instead of commit (or status) icons in the _Tags_ view
	"gitlens.views.tags.avatars": true,

	// Specifies how the _Tags_ view will display tags
	//  - list: Displays tags as a list
	//  - tree: Displays tags as a tree when tags names contain slashes `/`
	"gitlens.views.tags.branches.layout": "tree",

	// Specifies whether to compact (flatten) unnecessary file nesting in the _Tags_ view. Only applies when `gitlens.views.tags.files.layout` is set to `tree` or `auto`
	"gitlens.views.tags.files.compact": true,

	// Specifies how the _Tags_ view will display files
	//  - auto: Automatically switches between displaying files as a `tree` or `list` based on the `gitlens.views.tags.files.threshold` value and the number of files at each nesting level
	//  - list: Displays files as a list
	//  - tree: Displays files as a tree
	"gitlens.views.tags.files.layout": "auto",

	// Specifies when to switch between displaying files as a `tree` or `list` based on the number of files in a nesting level in the _Tags_ view. Only applies when `gitlens.views.tags.files.layout` is set to `auto`
	"gitlens.views.tags.files.threshold": 5,

	// Specifies whether to reveal tags in the _Tags_ view, otherwise they revealed in the _Repositories_ view
	"gitlens.views.tags.reveal": true,

	// List of languages which suggestions are desired.
	"css.enabledLanguages": [
		"html"
	],

	// List of local or remote style sheets for suggestions.
	"css.styleSheets": [],

	// npm bin name
	"npm.bin": "npm",

	// Enable npm commands in the macOS touchbar.
	"npm.enableTouchbar": false,

	// Look for 'package.json' files in these directories
	"npm.includeDirectories": [],

	// Run npm commands in a terminal, otherwise shows the output in the output panel
	"npm.runInTerminal": true,

	// Look for 'package.json' in the root directory of the workspace
	"npm.useRootDirectory": true,

	// Validate installed modules
	"npm.validate.enable": true,

	// Include parentheses around a sole arrow function parameter
	"prettier.arrowParens": "always",

	// Controls the printing of spaces inside object literals
	"prettier.bracketSpacing": true,

	// Path to the prettier configuration file
	"prettier.configPath": "",

	// This feature is no longer supported. Instead, configure VS Code [default formatters](https://github.com/prettier/prettier-vscode#default-formatter) or use .prettierignore.
	// A list of languages IDs to disable this extension on
	"prettier.disableLanguages": [],

	// A list of [glob patterns](https://code.visualstudio.com/api/references/vscode-api#GlobPattern) to register Prettier formatter
	"prettier.documentSelectors": [],

	// Control whether Prettier formats quoted code embedded in the file.
	"prettier.embeddedLanguageFormatting": "auto",

	// Controls whether prettier is enabled or not.
	"prettier.enable": true,

	// Enable debug logs for troubleshooting.
	"prettier.enableDebugLogs": false,

	// Specify the end of line used by prettier
	"prettier.endOfLine": "lf",

	// Specify the global whitespace sensitivity for HTML files.
	//  Valid options:
	// - `css` - Respect the default value of CSS display property.
	// - `strict` - Whitespaces are considered sensitive.
	// - `ignores` - Whitespaces are considered insensitive.
	"prettier.htmlWhitespaceSensitivity": "css",

	// Path to a .prettierignore file
	"prettier.ignorePath": ".prettierignore",

	// Prettier can insert a special @format marker at the top of files specifying that the file has been formatted with prettier. This works well when used in tandem with the `--require-pragma` option. If there is already a docblock at the top of the file then this option will add a newline to it with the @format marker.
	"prettier.insertPragma": false,

	// If true, puts the `>` of a multi-line jsx element at the end of the last line instead of being alone on the next line
	"prettier.jsxBracketSameLine": false,

	// Use single quotes instead of double quotes in JSX
	"prettier.jsxSingleQuote": false,

	// Package manager is now automatically detected by VS Code. This setting is no longer used.
	// The package manager you use to install node modules.
	"prettier.packageManager": "npm",

	// Path to the prettier module
	"prettier.prettierPath": "",

	// Fit code within this line limit
	"prettier.printWidth": 80,

	// (Markdown) wrap prose over multiple lines
	"prettier.proseWrap": "preserve",

	// Change when properties in objects are quoted
	"prettier.quoteProps": "as-needed",

	// Require a prettier configuration file to format. See [documentation for valid configuration files](https://prettier.io/docs/en/configuration.html).
	// 
	// > _Note, untitled files will still be formatted using the VS Code prettier settings even when this setting is set._
	"prettier.requireConfig": false,

	// Prettier can restrict itself to only format files that contain a special comment, called a pragma, at the top of the file. This is very useful when gradually transitioning large, unformatted codebases to prettier.
	"prettier.requirePragma": false,

	// When enabled, this extension will attempt to use global npm or yarn modules if local modules cannot be resolved.
	// > _This setting can have a negative performance impact, particularly on Windows when you have attached network drives. Only enable this if you must use global modules._
	"prettier.resolveGlobalModules": false,

	// Whether to add a semicolon at the end of every line
	"prettier.semi": true,

	// If true, will use single instead of double quotes
	"prettier.singleQuote": false,

	// Number of spaces it should use per tab
	"prettier.tabWidth": 2,

	// Controls the printing of trailing commas wherever possible. Valid options:
	// - `none` - No trailing commas
	// - `es5` - Trailing commas where valid in ES5 (objects, arrays, etc)
	// - `all` - Trailing commas wherever possible (function arguments)
	"prettier.trailingComma": "es5",

	// Whether or not to take `.editorconfig` into account when parsing configuration. See the [prettier.resolveConfig](https://prettier.io/docs/en/api.html) docs for details.
	"prettier.useEditorConfig": true,

	// Indent lines with tabs
	"prettier.useTabs": false,

	// Whether or not to indent the code inside `<script>` and `<style>` tags in Vue files. Some people (like the creator of Vue) don’t indent to save an indentation level, but this might break code folding in your editor.
	"prettier.vueIndentScriptAndStyle": false,

	// If true, this extension will process files in node_modules
	"prettier.withNodeModules": false,

	// The path to a PHP 7+ executable.
	"php.executablePath": null,

	// The memory limit of the php language server. [Number][K|M|G]. Use '-1' to allow unlimited use of the RAM (default is 4G).
	"php.memoryLimit": "4095M",

	// Set the languages that the extension will be activated.  e.g. ["html","xml","php"]. Use ["*"] to activate for all languages.
	"auto-close-tag.activationOnLanguage": [
		"xml",
		"php",
		"blade",
		"ejs",
		"jinja",
		"javascript",
		"javascriptreact",
		"typescript",
		"typescriptreact",
		"plaintext",
		"markdown",
		"vue",
		"liquid",
		"erb",
		"lang-cfml",
		"cfml",
		"HTML (EEx)",
		"HTML (Eex)",
		"plist"
	],

	// Set the languages where the extension will be disabled.  e.g. ["html","xml","php"].
	"auto-close-tag.disableOnLanguage": [],

	// Whether to close self-closing tag automatically
	"auto-close-tag.enableAutoCloseSelfClosingTag": true,

	// Whether to insert close tag automatically
	"auto-close-tag.enableAutoCloseTag": true,

	// Set the tag list that would not be auto closed.
	"auto-close-tag.excludedTags": [
		"area",
		"base",
		"br",
		"col",
		"command",
		"embed",
		"hr",
		"img",
		"input",
		"keygen",
		"link",
		"meta",
		"param",
		"source",
		"track",
		"wbr"
	],

	// Enable both Visual Studio and Sublime Text mode
	"auto-close-tag.fullMode": false,

	// Auto close tag when </ is typed, same as Sublime Text 3
	"auto-close-tag.SublimeText3Mode": false,

	// Set the languages that the extension will be activated.  e.g. ["html","xml","php"] By default, it is ["*"] and will be activated for all languages.
	"auto-rename-tag.activationOnLanguage": [
		"*"
	],

	// Whether to clear previous output before each run.
	"code-runner.clearPreviousOutput": false,

	// Set the custom command to run.
	"code-runner.customCommand": "echo Hello",

	// Set the working directory.
	"code-runner.cwd": "",

	// Set the default language to run.
	"code-runner.defaultLanguage": "",

	// Whether to enable AppInsights to track user telemetry data.
	"code-runner.enableAppInsights": true,

	// Set the executor of each language.
	"code-runner.executorMap": {
		"javascript": "node",
		"java": "cd $dir && javac $fileName && java $fileNameWithoutExt",
		"c": "cd $dir && gcc $fileName -o $fileNameWithoutExt && $dir$fileNameWithoutExt",
		"cpp": "cd $dir && g++ $fileName -o $fileNameWithoutExt && $dir$fileNameWithoutExt",
		"objective-c": "cd $dir && gcc -framework Cocoa $fileName -o $fileNameWithoutExt && $dir$fileNameWithoutExt",
		"php": "php",
		"python": "python -u",
		"perl": "perl",
		"perl6": "perl6",
		"ruby": "ruby",
		"go": "go run",
		"lua": "lua",
		"groovy": "groovy",
		"powershell": "powershell -ExecutionPolicy ByPass -File",
		"bat": "cmd /c",
		"shellscript": "bash",
		"fsharp": "fsi",
		"csharp": "scriptcs",
		"vbscript": "cscript //Nologo",
		"typescript": "ts-node",
		"coffeescript": "coffee",
		"scala": "scala",
		"swift": "swift",
		"julia": "julia",
		"crystal": "crystal",
		"ocaml": "ocaml",
		"r": "Rscript",
		"applescript": "osascript",
		"clojure": "lein exec",
		"haxe": "haxe --cwd $dirWithoutTrailingSlash --run $fileNameWithoutExt",
		"rust": "cd $dir && rustc $fileName && $dir$fileNameWithoutExt",
		"racket": "racket",
		"scheme": "csi -script",
		"ahk": "autohotkey",
		"autoit": "autoit3",
		"dart": "dart",
		"pascal": "cd $dir && fpc $fileName && $dir$fileNameWithoutExt",
		"d": "cd $dir && dmd $fileName && $dir$fileNameWithoutExt",
		"haskell": "runhaskell",
		"nim": "nim compile --verbosity:0 --hints:off --run",
		"lisp": "sbcl --script",
		"kit": "kitc --run",
		"v": "v run",
		"sass": "sass --style expanded",
		"scss": "scss --style expanded",
		"less": "cd $dir && lessc $fileName $fileNameWithoutExt.css",
		"FortranFreeForm": "cd $dir && gfortran $fileName -o $fileNameWithoutExt && $dir$fileNameWithoutExt",
		"fortran-modern": "cd $dir && gfortran $fileName -o $fileNameWithoutExt && $dir$fileNameWithoutExt",
		"fortran_fixed-form": "cd $dir && gfortran $fileName -o $fileNameWithoutExt && $dir$fileNameWithoutExt",
		"fortran": "cd $dir && gfortran $fileName -o $fileNameWithoutExt && $dir$fileNameWithoutExt"
	},

	// Set the executor of each file extension.
	"code-runner.executorMapByFileExtension": {
		".vb": "cd $dir && vbc /nologo $fileName && $dir$fileNameWithoutExt",
		".vbs": "cscript //Nologo",
		".scala": "scala",
		".jl": "julia",
		".cr": "crystal",
		".ml": "ocaml",
		".exs": "elixir",
		".hx": "haxe --cwd $dirWithoutTrailingSlash --run $fileNameWithoutExt",
		".rkt": "racket",
		".scm": "csi -script",
		".ahk": "autohotkey",
		".au3": "autoit3",
		".kt": "cd $dir && kotlinc $fileName -include-runtime -d $fileNameWithoutExt.jar && java -jar $fileNameWithoutExt.jar",
		".kts": "kotlinc -script",
		".dart": "dart",
		".pas": "cd $dir && fpc $fileName && $dir$fileNameWithoutExt",
		".pp": "cd $dir && fpc $fileName && $dir$fileNameWithoutExt",
		".d": "cd $dir && dmd $fileName && $dir$fileNameWithoutExt",
		".hs": "runhaskell",
		".nim": "nim compile --verbosity:0 --hints:off --run",
		".csproj": "dotnet run --project",
		".fsproj": "dotnet run --project",
		".lisp": "sbcl --script",
		".kit": "kitc --run",
		".v": "v run",
		".vsh": "v run",
		".sass": "sass --style expanded",
		".cu": "cd $dir && nvcc $fileName -o $fileNameWithoutExt && $dir$fileNameWithoutExt"
	},

	// Set the executor by glob.
	"code-runner.executorMapByGlob": {
		"pom.xml": "cd $dir && mvn clean package"
	},

	// Whether to use the directory of the file to be executed as the working directory.
	"code-runner.fileDirectoryAsCwd": false,

	// Whether to ignore selection to always run entire file.
	"code-runner.ignoreSelection": false,

	// Set the mapping of languageId to file extension.
	"code-runner.languageIdToFileExtensionMap": {
		"bat": ".bat",
		"powershell": ".ps1",
		"typescript": ".ts"
	},

	// Whether to preserve focus on code editor after code run is triggered.
	"code-runner.preserveFocus": true,

	// Whether to respect Shebang to run code.
	"code-runner.respectShebang": true,

	// Whether to run code in Integrated Terminal.
	"code-runner.runInTerminal": false,

	// Whether to save all files before running.
	"code-runner.saveAllFilesBeforeRun": false,

	// Whether to save the current file before running.
	"code-runner.saveFileBeforeRun": false,

	// Whether to show extra execution message like [Running] ... and [Done] ...
	"code-runner.showExecutionMessage": true,

	// Whether to show 'Run Code' command in editor context menu.
	"code-runner.showRunCommandInEditorContextMenu": true,

	// Whether to show 'Run Code' command in explorer context menu.
	"code-runner.showRunCommandInExplorerContextMenu": true,

	// Whether to show 'Run Code' icon in editor title menu.
	"code-runner.showRunIconInEditorTitleMenu": true,

	// Temporary file name used in running selected code snippet. When it is set as empty, the file name will be random.
	"code-runner.temporaryFileName": "tempCodeRunnerFile",

	// For Windows system, replaces the Windows style drive letter in the command with a Unix style root when using a custom shell as the terminal, like Bash or Cgywin. Example: Setting this to '/mnt/' will replace 'C:\path' with '/mnt/c/path'
	"code-runner.terminalRoot": "",

	// Whether to enable AppInsights to track user telemetry data.
	"terminal.enableAppInsights": true,

	// Tags and options configured here will be used by the Add Tags command to add tags to struct fields. If promptForTags is true, then user will be prompted for tags and options. By default, json tags are added.
	"go.addTags": {
		"tags": "json",
		"options": "json=omitempty",
		"promptForTags": false,
		"transform": "snakecase",
		"template": ""
	},

	// Alternate tools or alternate paths for the same tools used by the Go extension. Provide either absolute path or the name of the binary in GOPATH/bin, GOROOT/bin or PATH. Useful when you want to use wrapper script for the Go tools or versioned tools from https://gopkg.in. When specified as a workspace setting, the setting is used only when the workspace is marked trusted with "Go: Toggle Workspace Trust Flag".
	"go.alternateTools": {},

	// Include unimported packages in auto-complete suggestions. Not applicable when using the language server.
	"go.autocompleteUnimportedPackages": false,

	// Flags to `go build`/`go test` used during build-on-save or running tests. (e.g. ["-ldflags='-s'"]) This is propagated to the language server if `gopls.build.buildFlags` is not specified.
	"go.buildFlags": [],

	// Compiles code on file save using 'go build' or 'go test -c'. Options are 'workspace', 'package', or 'off'.  Not applicable when using the language server's diagnostics. See 'go.languageServerExperimentalFeatures.diagnostics' setting.
	"go.buildOnSave": "package",

	// The Go build tags to use for all commands, that support a `-tags '...'` argument. When running tests, go.testTags will be used instead if it was set. This is propagated to the language server if `gopls.build.buildFlags` is not specified.
	"go.buildTags": "",

	// This option lets you choose the way to display code coverage. Choose either to highlight the complete line or to show a decorator in the gutter. You can customize the colors and borders for the former and the style for the latter.
	"go.coverageDecorator": {
		"type": "highlight",
		"coveredHighlightColor": "rgba(64,128,128,0.5)",
		"uncoveredHighlightColor": "rgba(128,64,64,0.25)",
		"coveredBorderColor": "rgba(64,128,128,0.5)",
		"uncoveredBorderColor": "rgba(128,64,64,0.25)",
		"coveredGutterStyle": "blockblue",
		"uncoveredGutterStyle": "slashyellow"
	},

	// Use these options to control whether only covered or only uncovered code or both should be highlighted after running test coverage
	"go.coverageOptions": "showBothCoveredAndUncoveredCode",

	// When generating code coverage, the value for -covermode. 'default' is the default value chosen by the 'go test' command.
	"go.coverMode": "default",

	// If true, runs 'go test -coverprofile' on save and shows test coverage.
	"go.coverOnSave": false,

	// If true, shows test coverage when Go: Test Function at cursor command is run.
	"go.coverOnSingleTest": false,

	// If true, shows test coverage when Go: Test Single File command is run.
	"go.coverOnSingleTestFile": false,

	// If true, shows test coverage when Go: Test Package command is run.
	"go.coverOnTestPackage": true,

	// When generating code coverage, should counts be shown as --374--
	"go.coverShowCounts": false,

	// Delve settings that applies to all debugging sessions. Debug configuration in the launch.json file will override these values.
	"go.delveConfig": {
		"dlvLoadConfig": {
			"followPointers": true,
			"maxVariableRecurse": 1,
			"maxStringLen": 64,
			"maxArrayValues": 64,
			"maxStructFields": -1
		},
		"apiVersion": 2,
		"showGlobalVariables": false,
		"debugAdapter": "legacy"
	},

	// If true, tests will not run concurrently. When a new test run is started, the previous will be cancelled.
	"go.disableConcurrentTests": false,

	// Pick 'godoc' or 'gogetdoc' to get documentation. Not applicable when using the language server.
	"go.docsTool": "godoc",

	// Experimental Feature: Enable/Disable entries from the context menu in the editor.
	"go.editorContextMenuCommands": {
		"toggleTestFile": true,
		"addTags": true,
		"removeTags": false,
		"fillStruct": false,
		"testAtCursor": true,
		"testFile": false,
		"testPackage": false,
		"generateTestForFunction": true,
		"generateTestForFile": false,
		"generateTestForPackage": false,
		"addImport": true,
		"testCoverage": true,
		"playground": true,
		"debugTestAtCursor": true,
		"benchmarkAtCursor": false
	},

	// Feature level setting to enable/disable code lens for references and run/debug tests
	"go.enableCodeLens": {
		"references": false,
		"runtest": true
	},

	// Flags to pass to format tool (e.g. ["-s"]). Not applicable when using the language server.
	"go.formatFlags": [],

	// Not applicable when using the language server. Choosing 'goimports', 'goreturns', or 'gofumports' will add missing imports and remove unused imports.
	//  - default: If the language server is enabled, format via the language server, which already supports gofmt, goimports, goreturns, and gofumpt. Otherwise, goimports.
	//  - gofmt: Formats the file according to the standard Go style.
	//  - goimports: Organizes imports and formats the file with gofmt.
	//  - goformat: Configurable gofmt, see https://github.com/mbenkmann/goformat.
	//  - gofumpt: Stricter version of gofmt, see https://github.com/mvdan/gofumpt.
	//  - gofumports: Applies gofumpt formatting and organizes imports.
	"go.formatTool": "default",

	// Additional command line flags to pass to `gotests` for generating tests.
	"go.generateTestsFlags": [],

	// Enable gocode's autobuild feature. Not applicable when using the language server.
	"go.gocodeAutoBuild": false,

	// Additional flags to pass to gocode. Not applicable when using the language server.
	"go.gocodeFlags": [
		"-builtin",
		"-ignore-case",
		"-unimported-packages"
	],

	// Used to determine the Go package lookup rules for completions by gocode. Only applies when using nsf/gocode. Latest versions of the Go extension uses mdempsky/gocode by default. Not applicable when using the language server.
	"go.gocodePackageLookupMode": "go",

	// Specify GOPATH here to override the one that is set as environment variable. The inferred GOPATH from workspace root overrides this, if go.inferGopath is set to true. When specified as a workspace setting, the setting is used only when the workspace is marked trusted with "Go: Toggle Workspace Trust Flag".
	"go.gopath": null,

	// Specifies the GOROOT to use when no environment variable is set. When specified as a workspace setting, the setting is used only when the workspace is marked trusted with "Go: Toggle Workspace Trust Flag".
	"go.goroot": null,

	// Folder names (not paths) to ignore while using Go to Symbol in Workspace feature. Not applicable when using the language server.
	"go.gotoSymbol.ignoreFolders": [],

	// If false, the standard library located at $GOROOT will be excluded while using the Go to Symbol in File feature. Not applicable when using the language server.
	"go.gotoSymbol.includeGoroot": false,

	// If false, the import statements will be excluded while using the Go to Symbol in File feature. Not applicable when using the language server.
	"go.gotoSymbol.includeImports": false,

	// Infer GOPATH from the workspace root. This is ignored when using Go Modules. When specified as a workspace setting, the setting is used only when the workspace is marked trusted with "Go: Toggle Workspace Trust Flag".
	"go.inferGopath": false,

	// If true, then `-i` flag will be passed to `go build` everytime the code is compiled. Since Go 1.10, setting this may be unnecessary unless you are in GOPATH mode and do not use the language server.
	"go.installDependenciesWhenBuilding": false,

	// Temporary flag to enable/disable diagnostics from the language server. This setting will be deprecated soon. Please see and response to [Issue 50](https://github.com/golang/vscode-go/issues/50).
	"go.languageServerExperimentalFeatures": {
		"diagnostics": true
	},

	// Flags like -rpc.trace and -logfile to be used while running the language server.
	"go.languageServerFlags": [],

	// Flags to pass to Lint tool (e.g. ["-min_confidence=.8"])
	"go.lintFlags": [],

	// Lints code on file save using the configured Lint tool. Options are 'file', 'package', 'workspace' or 'off'.
	"go.lintOnSave": "package",

	// Specifies Lint tool name.
	"go.lintTool": "staticcheck",

	// Use gotype on the file currently being edited and report any semantic or syntactic errors found after configured delay. Not applicable when using the language server.
	"go.liveErrors": {
		"enabled": false,
		"delay": 500
	},

	// The logging level the extension logs at, defaults to 'error'
	"go.logging.level": "error",

	// The flags configured here will be passed through to command `goplay`
	"go.playground": {
		"openbrowser": true,
		"share": true,
		"run": true
	},

	// Tags and options configured here will be used by the Remove Tags command to remove tags to struct fields. If promptForTags is true, then user will be prompted for tags and options. By default, all tags and options will be removed.
	"go.removeTags": {
		"tags": "",
		"options": "",
		"promptForTags": false
	},

	// Absolute path to a file containing environment variables definitions. File contents should be of the form key=value.
	"go.testEnvFile": null,

	// Environment variables that will be passed to the process that runs the Go tests
	"go.testEnvVars": {},

	// Flags to pass to `go test`. If null, then buildFlags will be used. This is not propagated to the language server.
	"go.testFlags": null,

	// Run 'go test' on save for current package. It is not advised to set this to `true` when you have Auto Save enabled.
	"go.testOnSave": false,

	// The Go build tags to use for when running tests. If null, then buildTags will be used.
	"go.testTags": null,

	// Specifies the timeout for go test in ParseDuration format.
	"go.testTimeout": "30s",

	// Environment variables that will be passed to the tools that run the Go tools (e.g. CGO_CFLAGS)
	"go.toolsEnvVars": {},

	// Location to install the Go tools that the extension depends on if you don't want them in your GOPATH. When specified as a workspace setting, the setting is used only when the workspace is marked trusted with "Go: Toggle Workspace Trust Flag".
	"go.toolsGopath": null,

	// Automatically update the tools used by the extension, without prompting the user.
	"go.toolsManagement.autoUpdate": false,

	// Specify whether to prompt about new versions of Go and the Go tools (currently, only `gopls`) the extension depends on
	//  - proxy: keeps notified of new releases by checking the Go module proxy (GOPROXY)
	//  - local: checks only the minimum tools versions required by the extension
	//  - off: completely disables version check (not recommended)
	"go.toolsManagement.checkForUpdates": "proxy",

	// Trace the communication between VS Code and the Go language server.
	"go.trace.server": "off",

	// Complete functions with their parameter signature, including the variable type. Not propagated to the language server.
	"go.useCodeSnippetsOnFunctionSuggest": false,

	// Complete functions with their parameter signature, excluding the variable types. Use `gopls.usePlaceholders` when using the language server.
	"go.useCodeSnippetsOnFunctionSuggestWithoutType": false,

	// Use `go.toolsManagement.checkForUpdates` instead.
	// When enabled, the extension automatically checks the Go proxy if there are updates available for Go and the Go tools (at present, only gopls) it depends on and prompts the user accordingly
	"go.useGoProxyToCheckForToolUpdates": true,

	// Use the Go language server "gopls" from Google for powering language features like code navigation, completion, refactoring, formatting & diagnostics.
	"go.useLanguageServer": true,

	// Flags to pass to `go tool vet` (e.g. ["-all", "-shadow"])
	"go.vetFlags": [],

	// Vets code on file save using 'go tool vet'. Not applicable when using the language server's diagnostics. See 'go.languageServerExperimentalFeatures.diagnostics' setting.
	"go.vetOnSave": "package",

	// Configure the default Go language server ('gopls'). In most cases, configuring this section is unnecessary. See [the documentation](https://github.com/golang/tools/blob/master/gopls/doc/settings.md) for all available settings.
	"gopls": {},

	// Specifies whether column headers in CSV files are capitalized.
	"csv-preview.capitalizeHeaders": true,

	// Specifies the character used to mark comment lines in CSV files.
	"csv-preview.commentCharacter": "#",

	// Specifies whether to format numeric values in CSV files, or to treat them as strings.
	"csv-preview.formatValues": "always",

	// Specifies whether the first row in a CSV file represents column headers.
	"csv-preview.hasHeaders": true,

	// Specifies whether to display line numbers for CSV files.
	"csv-preview.lineNumbers": "none",

	// Specifies a .NET-style format string used to format numeric columns in CSV files.
	"csv-preview.numberFormat": "g2",

	// Specifies whether text piped to stdin is automatically opened as a CSV preview.
	"csv-preview.openStdin": false,

	// Specifies the optional character used to surround individual values in a CSV file.
	"csv-preview.quoteMark": "\"",

	// Specifies whether columns are automatically resized to fit the data for CSV files.
	"csv-preview.resizeColumns": "none",

	// Specifies the separator used in a CSV file (normally , but also ; is common).
	"csv-preview.separator": ",",

	// Specifies whether lines that begin with the comment character should be omitted from the CSV preview.
	"csv-preview.skipComments": false,

	// Add menu items to the editor context menu for running and debugging the tests in the current file
	"testExplorer.addToEditorContextMenu": false,

	// Show a CodeLens above each test or suite for running or debugging the tests
	"testExplorer.codeLens": true,

	// Show error messages from test failures as decorations in the editor
	"testExplorer.errorDecoration": true,

	// Provide hover messages for the error decorations in the editor
	"testExplorer.errorDecorationHover": true,

	// Show the state of each test in the editor using Gutter Decorations
	"testExplorer.gutterDecoration": true,

	// Hide the output channel used to show a test's log when the user clicks on a test whose log is empty
	"testExplorer.hideEmptyLog": true,

	// Hide the Test Explorer when no test adapters have been registered or when no tests have been found
	"testExplorer.hideWhen": "never",

	// Merge suites with the same label and parent
	"testExplorer.mergeSuites": false,

	// Retire or reset all test states whenever the test tree is reloaded
	//  - retire: Retire all test states whenever the test tree is reloaded
	//  - reset: Reset all test states whenever the test tree is reloaded
	//  - null: Don't change the test states when the test tree is reloaded
	"testExplorer.onReload": null,

	// Retire or reset all test states whenever a test run is started
	//  - retire: Retire all test states whenever a test run is started
	//  - reset: Reset all test states whenever a test run is started
	//  - null: Don't change the test states when a test run is started
	"testExplorer.onStart": null,

	// Show a button for collapsing the nodes of the test tree
	"testExplorer.showCollapseButton": true,

	// Show a button for expanding the top nodes of the test tree, recursively for the given number of levels
	"testExplorer.showExpandButton": 3,

	// Switch to the Test Explorer view whenever a test run is started
	"testExplorer.showOnRun": false,

	// Sort the tests and suites by label or location. If this is not set (or set to null), they will be shown in the order that they were received from the adapter
	//  - byLabel: sort by label
	//  - byLocation: sort by location (filename and line), if multiple tests or suites appear at the same location, they are sorted by label
	//  - byLabelWithSuitesFirst: sort by label, but always put the suites on top
	//  - byLocationWithSuitesFirst: sort by location, but always put the suites on top
	//  - null: don't sort, the tests and suites will be shown in the order that they were received from the adapter
	"testExplorer.sort": null,

	// A path to a file, or an object containing the configuration options for js-beautify. If the .jsbeautifyrc file exists in project root, it overrides this configuration.
	"beautify.config": null,

	// List of paths to ignore when using VS Code format command, including format on save. Uses glob pattern matching.
	"beautify.ignore": [],

	// Link file types to the beautifier type
	"beautify.language": {
		"js": {
			"type": [
				"javascript",
				"json",
				"jsonc"
			],
			"filename": [
				".jshintrc",
				".jsbeautifyrc"
			]
		},
		"css": [
			"css",
			"less",
			"scss"
		],
		"html": [
			"htm",
			"html"
		]
	},

	// Add line indentation around brackets(`{}`, `<>`, `[]`) in request body when pressing enter.
	"rest-client.addRequestBodyLineIndentationAroundBrackets": true,

	// Certificate paths for different hosts. The path can be absolute path or relative path(relative to workspace or current http file)
	"rest-client.certificates": {},

	// Decode escaped unicode characters in response body.
	"rest-client.decodeEscapedUnicodeCharacters": false,

	// If particular headers are omitted in request headers, these will be added as headers for each request.
	"rest-client.defaultHeaders": {
		"User-Agent": "vscode-restclient"
	},

	// Controls whether to add href link in previewed response for response whose size is larger than limit specified by `rest-client.largeResponseSizeLimitInMB`
	"rest-client.disableAddingHrefLinkForLargeResponse": true,

	// Controls whether to highlight response body for response whose size is larger than limit specified by `rest-client.largeResponseSizeLimitInMB`
	"rest-client.disableHighlightResonseBodyForLargeResponse": true,

	// Enable/disable custom variable references CodeLens in request file
	"rest-client.enableCustomVariableReferencesCodeLens": true,

	// Enable/disable sending request CodeLens in request file
	"rest-client.enableSendRequestCodeLens": true,

	// Send out anonymous usage data
	"rest-client.enableTelemetry": true,

	// Sets the environments and custom variables belongs to it, especially the special environment name '$shared' is used to create variables shared across all the individual environments (e.g., `{"$shared": {"version": "v1"}, "production": {"host": "api.example.com"}, "sandbox":{"host":"sandbox.api.example.com"}}`)
	"rest-client.environmentVariables": {
		"$shared": {}
	},

	// Excluded hosts when using using proxy settings
	"rest-client.excludeHostsForProxy": [],

	// Follow HTTP 3xx responses as redirects.
	"rest-client.followredirect": true,

	// Controls the font family used in the response preview
	"rest-client.fontFamily": null,

	// Controls the font size in pixels used in the response preview. When set to `0`, the value of `editor.fontSize` is used.
	"rest-client.fontSize": 0,

	// Controls the font weight used in the response preview
	"rest-client.fontWeight": "",

	// Form param encoding strategy for request body of `x-www-form-urlencoded`.
	//  - automatic: Detecting encoding or not automatically and do the encoding job if necessary
	//  - never: Treat provided request body as is, no encoding job will be applied
	//  - always: Use for the scenario that `automatic` option not working properly, e.g., some special characters(`+`) are not encoded correctly
	"rest-client.formParamEncodingStrategy": "automatic",

	// Set the response body size threshold of MB to identify whether a response is a so-called 'large response', only used when `rest-client.disableHighlightResonseBodyForLargeResponse` and/or `rest-client.disableAddingHrefLinkForLargeResponse` is set to true
	"rest-client.largeResponseBodySizeLimitInMB": 5,

	// The verbosity of logging in the REST output panel
	"rest-client.logLevel": "error",

	// Sets the custom mapping of mime type and file extension of saved response body (e.g., `{"application/atom+xml": "xml"}`)
	"rest-client.mimeAndFileExtensionMapping": {},

	// Response preview column option
	//  - current: Preview in the column of current request file
	//  - beside: previewing at the side of the current active column and the side direction depends on `workbench.editor.openSideBySideDirection` setting, either right or below the current editor column
	"rest-client.previewColumn": "beside",

	// Response preview output option
	//  - full: Response headers, body and status line
	//  - headers: Response headers and status line
	//  - body: Response body only
	//  - exchange: Whole HTTP exchange including both request and response
	"rest-client.previewOption": "full",

	// Preview response in untitled document if set to true, otherwise displayed in html view
	"rest-client.previewResponseInUntitledDocument": false,

	// Preview response panel will take focus after receiving response.
	"rest-client.previewResponsePanelTakeFocus": true,

	// Remember cookies for subsequent requests
	"rest-client.rememberCookiesForSubsequentRequests": true,

	// Show request name as the response tab title
	"rest-client.requestNameAsResponseTabTitle": false,

	// Show response in different tab
	"rest-client.showResponseInDifferentTab": false,

	// Suppress response body content type validation
	"rest-client.suppressResponseBodyContentTypeValidationWarning": false,

	// Timeout in milliseconds. 0 for infinity
	"rest-client.timeoutinmilliseconds": 0,

	// When `latex-workshop.bibtex-fields.sort.enabled` is true, sort fields according the order defined here and then alphabetically for non listed fields.
	"latex-workshop.bibtex-fields.order": [],

	// Sort fields inside every entry. The sorting order is defined by `latex-workshop.bibtex-fields.order`. This variable only has effect when formatting bibtex aligns fields. It is not possible to sort entries without aligning them.
	"latex-workshop.bibtex-fields.sort.enabled": false,

	// Align equal signs when calling VSCode format on a .bib file.
	"latex-workshop.bibtex-format.align-equal.enabled": true,

	// Determines if field names should be formatted like 'AUTHOR' or 'author'.
	"latex-workshop.bibtex-format.case": "lowercase",

	// How to handle duplicates found by the bibtex sorting functions. Duplicates are decided according to the `bibtex-format.sortby` config.
	"latex-workshop.bibtex-format.handleDuplicates": "Highlight Duplicates",

	// Sort content when calling VSCode format on a .bib file.
	"latex-workshop.bibtex-format.sort.enabled": false,

	// An array of strings to sort by. Either a bibtex field name (title, author, year, etc.), or `"year-desc"` to sort by year in descending order, or `"key"` for the entry key, or `"type"` for the entry type (article, book, misc, etc.). E.g. `["author", "year-desc", "title"]`.
	"latex-workshop.bibtex-format.sortby": [
		"key"
	],

	// Surround each field value with either {Curly braces} or "Quotation marks".
	"latex-workshop.bibtex-format.surround": "Curly braces",

	// Indentation for each field. The string can `"tab"` or of the form `"X spaces"` or simply `"X"` where `X` is a number
	"latex-workshop.bibtex-format.tab": "2 spaces",

	// Keep the trailing comma of the last field item.
	"latex-workshop.bibtex-format.trailingComma": false,

	// Use alternative keymap combo, i.e., `ctrl`+`l` `alt`+key, to replace the default `ctrl`/`cmd`+`alt` shortcuts.
	"latex-workshop.bind.altKeymap.enabled": false,

	// Enable the automatic insertion of `\item` on a newline when pressing `Enter` in a line starting in `\item`.
	"latex-workshop.bind.enter.key": true,

	// Enable checking for duplicated labels.
	// A new check is triggered every time the intellisense data is updated, see `latex-workshop.intellisense.update.aggressive.enabled`.
	"latex-workshop.check.duplicatedLabels.enabled": true,

	// Linter arguments to check LaTeX syntax of the current file state in real time with ChkTeX.
	// Arguments must be in separate strings in the array. Additional arguments, i.e., `-I0 -f%f:%l:%c:%d:%k:%n:%m\n` will be appended when constructing the command. Current file contents will be piped to the command through stdin.
	"latex-workshop.chktex.args.active": [
		"-wall",
		"-n22",
		"-n30",
		"-e16",
		"-q"
	],

	// Linter arguments to check LaTeX syntax of the entire project from the root file with ChkTeX.
	// Arguments must be in separate strings in the array. Additional arguments, i.e., `-f%f:%l:%c:%d:%k:%n:%m\n %DOC%` will be appended when constructing the command.
	"latex-workshop.chktex.args.root": [
		"-wall",
		"-n22",
		"-n30",
		"-e16",
		"-q"
	],

	// Write the `TabSize` number from `.chktexrc`. The default value "-1" means that LaTeX Workshop will try to find `.chktexrc` and to read the value from it.
	"latex-workshop.chktex.convertOutput.column.chktexrcTabSize": -1,

	// Enable converting ChkTeX outputs' column numbers for non-ASCII characters.
	"latex-workshop.chktex.convertOutput.column.enabled": true,

	// Defines the delay in milliseconds for chktex to wait after stopped typing.
	// This config only matters when `latex-workshop.chktex.run` is set to `onType`.
	"latex-workshop.chktex.delay": 500,

	// Enable linting LaTeX with ChkTeX.
	// Check `latex-workshop.chktex.run` to control when the linting is executed if this config is set to `true`.
	"latex-workshop.chktex.enabled": false,

	// Define the location of ChkTeX executive file.
	// This command will be joint with `latex-workshop.chktex.args.*` and required arguments to form a complete command of ChkTeX.
	"latex-workshop.chktex.path": "chktex",

	// When LaTeX should be linted by ChkTeX.
	// If set to `onSave`, the whole LaTeX project will be linted upon saving.
	// If set to `onType`, the active document will be linted when input is stopped for a period of time defined in `latex-workshop.chktex.delay`, besides the behavior of `onSave`.
	"latex-workshop.chktex.run": "onSave",

	// Enable docker-based LaTeX distribution support.
	// Do not set this item to `true` unless you are aware of what it means.
	// This extension will use the images defined in `latex-workshop.docker.image.latex` to execute `latexmk`, `synctex`, `texcount`, and `latexindent`.
	"latex-workshop.docker.enabled": false,

	// Define the image for `latexmk`, `synctex`, `texcount`, and `latexindent`.
	"latex-workshop.docker.image.latex": "tianon/latex",

	// Enable Hover on Citations.
	"latex-workshop.hover.citation.enabled": true,

	// Enable Hover on Commands to show the possible signatures.
	"latex-workshop.hover.command.enabled": true,

	// The color of cursor in Hover Preview.
	"latex-workshop.hover.preview.cursor.color": "auto",

	// Render cursor in Hover Preview at the current position.
	"latex-workshop.hover.preview.cursor.enabled": true,

	// Cursor symbol in Hover Preview.
	"latex-workshop.hover.preview.cursor.symbol": "\\!|\\!",

	// Enable Hover Preview.
	"latex-workshop.hover.preview.enabled": true,

	// Maximum number of lines between the beginning of the math environment and the cursor position to allow preview.
	"latex-workshop.hover.preview.maxLines": 20,

	// Set the path of a file containing newcommands to be used in Hover Preview. If the path is relative, it is joined with the root dir.
	"latex-workshop.hover.preview.newcommand.newcommandFile": "",

	// Enable newcommands defined in the current TeX file to be included in Hover Preview.
	"latex-workshop.hover.preview.newcommand.parseTeXFile.enabled": true,

	// Scaling of Hover Preview.
	"latex-workshop.hover.preview.scale": 1,

	// Enable Hover on References.
	"latex-workshop.hover.ref.enabled": true,

	// Show number assigned to the reference in the previous compilation.
	"latex-workshop.hover.ref.number.enabled": true,

	// Dictionary of `"entry name": ["array", "of", "fields"]` to replace the default fields used in `data/bibtex-entries.json`. See `data/bibtex-entries.json` for the list of fields for each entry. Reload vscode to make any change in this configuration effective.
	"latex-workshop.intellisense.bibtexJSON.replace": {},

	// List of fields to display for citation preview and intellisense. You must reload VSCode to take into account a change in this configuration.
	"latex-workshop.intellisense.citation.format": [
		"author",
		"title",
		"journal",
		"publisher",
		"booktitle",
		"year"
	],

	// Defines what to show as suggestion labels when intellisense provides citation suggestions.
	//  - bibtex key: Show bibtex keys in the inline intellisense.
	//  - title: Show publication titles in the inline intellisense.
	//  - authors: Show publication authors in the inline intellisense.
	"latex-workshop.intellisense.citation.label": "bibtex key",

	// Defines the maximum bibtex file size for the extension to parse in MB.
	"latex-workshop.intellisense.citation.maxfilesizeMB": 5,

	// Defines which type of hint to show when intellisense provides citation suggestions.
	//  - inline: Use the inline intellisense to provide citation completion items.
	//  - browser: Use a dropdown menu to provide citation completion items.
	"latex-workshop.intellisense.citation.type": "inline",

	// Dictionary of `"snippet name": "snippet action"` to replace the default snippets in `data/commands.json`. Snippet actions should not begin with a `\`. See `data/commands.json` for the list of snippet names. An empty action removes the snippet. E.g. `{ "[": "[ ${1} \\]", "figure": "" }`. Reload vscode to make any change in this configuration effective.
	"latex-workshop.intellisense.commandsJSON.replace": {},

	// Specify the base directory for file completion
	//  - root relative: Completion from the root file directory
	//  - file relative: Completion from the current file directory
	//  - both: both
	"latex-workshop.intellisense.file.base": "root relative",

	// Patterns to ignore in file completion
	"latex-workshop.intellisense.file.exclude": [
		"**/*.aux",
		"**/*.bbl",
		"**/*.bcf",
		"**/*.blg",
		"**/*.idx",
		"**/*.ind",
		"**/*.lof",
		"**/*.lot",
		"**/*.out",
		"**/*.toc",
		"**/*.acn",
		"**/*.acr",
		"**/*.alg",
		"**/*.glg",
		"**/*.glo",
		"**/*.gls",
		"**/*.ist",
		"**/*.fls",
		"**/*.log",
		"**/*.nav",
		"**/*.snm",
		"**/*.fdb_latexmk",
		"**/*.synctex.gz",
		"**/*.run.xml"
	],

	// Enable preview for `\includegraphics` completion.
	"latex-workshop.intellisense.includegraphics.preview.enabled": true,

	// Enable preview for `\includegraphics` of PDF file.
	"latex-workshop.intellisense.includegraphics.preview.pdf.enabled": true,

	// Scan for labels defined as `label={some tex}` to add to the reference intellisense menu. The braces are mandatory.
	"latex-workshop.intellisense.label.keyval": true,

	// Some LaTeX commands can have several forms, each with different arguments. If set to True, the intellisense completion list will have one entry for each form of a given command. Default is true.
	"latex-workshop.intellisense.optionalArgsEntries.enabled": true,

	// List of extra directories to look for package completion files in addition to those provided by the extension. See https://github.com/James-Yu/LaTeX-Workshop/wiki/Intellisense#commands to learn how to generate these files. Files found in these directories have a higher priority over the default ones. This setting is only relevant when `latex-workshop.intellisense.package.env.enable` is true.
	"latex-workshop.intellisense.package.dirs": [],

	// Auto-complete commands and environments from used packages.
	"latex-workshop.intellisense.package.enabled": true,

	// If true, every environment provided by an included package is available by a snippet `\envname`. Only applies when `latex-workshop.intellisense.package.enabled` is true. 
	"latex-workshop.intellisense.package.env.enabled": true,

	// List of extra packages to always add to the auto-completion mechanism.
	// When `latex-workshop.intellisense.package.enabled` is set to `true`, the commands and environments defined in these extra packages will be added to the intellisense suggestions.
	"latex-workshop.intellisense.package.extra": [],

	// Additional trigger characters for intellisense of LaTeX documents. You must reload VSCode to take into account a change in this configuration.
	"latex-workshop.intellisense.triggers.latex": [],

	// When `\` is typed, show unimath symbols in the dropdown selector.
	"latex-workshop.intellisense.unimathsymbols.enabled": false,

	// Defines whether the extension aggressively parses the changed content after stopped typing.
	// Disable this config will let the extension only update intellisense after saving changed files.
	"latex-workshop.intellisense.update.aggressive.enabled": false,

	// Defines the delay in milliseconds for the extension to update current active file content for intellisense after stopped typing.
	// This config works only when `intellisense.update.aggressive.enabled` is enabled. Lower this value will let the extension to know newly defined commands/references/environments more quickly, at the cost of more frequent content parsing: more computation burden.
	"latex-workshop.intellisense.update.delay": 1000,

	// Many snippets use PlaceHolders of the form ${\d:some_text} for their argument. You may prefer to use TabStops ${\d} instead, which allows for direct call to intellisense again. Default is true.
	// Reload vscode to make this configuration effective.
	"latex-workshop.intellisense.useTabStops.enabled": true,

	// Use kpsewhich as defined by `latex-workshop.kpsewhich.path` to resolve bibliography files in addition to looking into the directories listed in `latex-workshop.latex.bibDirs`.
	"latex-workshop.kpsewhich.enabled": false,

	// Define the location of the kpsewhich executable file.
	"latex-workshop.kpsewhich.path": "kpsewhich",

	// Delete LaTeX auxiliary files when errors occur during build and retry.
	// This property defines whether LaTeX Workshop will try to clean and build the project once again after errors happen in the build toolchain.
	"latex-workshop.latex.autoBuild.cleanAndRetry.enabled": true,

	// The minimal time interval between two consecutive auto builds in millisecond.
	"latex-workshop.latex.autoBuild.interval": 1000,

	// When the extension shall auto build LaTeX project using the default (first) recipe.
	// `onSave` builds the project upon saving a `tex` file in vscode.
	// `onFileChange` builds the project upon detecting a file change in any of the dependencies, even modified by other applications.
	// Note `onSave` is more restrictive than `onFileChange` 
	//  - never: Never run auto build
	//  - onSave: Auto build whenever a file is saved
	//  - onFileChange: Auto build whenever a dependency file changes on disk
	"latex-workshop.latex.autoBuild.run": "onFileChange",

	// When LaTeX auxiliary files should be deleted.
	// The folder to be cleaned is defined in `latex-workshop.latex.outDir`.
	// `onFailed` cleans the project when compilation fails. `onBuilt` cleans the project when compilation is terminated, whether successful or failed.
	//  - never: Never clean the project
	//  - onFailed: Clean compilation fails
	//  - onBuilt: Clean after build, be it successful or not
	"latex-workshop.latex.autoClean.run": "never",

	// List of directories where to look for `.bib` files.
	// Absolute paths are required. This setting is only used by the intellisense feature, you may also need to set the environment variable `BIBINPUTS` properly for the LaTeX compiler to find the `.bib` files.
	"latex-workshop.latex.bibDirs": [],

	// Clear the LaTeX Compiler logs before every step of a recipe.
	// Set this property to false to keep the logs of all tools in a recipe.
	"latex-workshop.latex.build.clearLog.everyRecipeStep.enabled": true,

	// Force the use the recipe mechanism even if some magic comments are present.
	"latex-workshop.latex.build.forceRecipeUsage": false,

	// The arguments of `latex-workshop.latex.clean.command`. The `%TEX%` placeholder is the full path of the tex file from which the clean command is called.
	"latex-workshop.latex.clean.args": [
		"-c",
		"%TEX%"
	],

	// The command to be used to remove temporary files when `latex-workshop.latex.clean.method` is set to `cleanMethod`.
	"latex-workshop.latex.clean.command": "latexmk",

	// Files to clean.
	// This property must be an array of strings. File globs such as *.removeme, something?.aux can be used.
	"latex-workshop.latex.clean.fileTypes": [
		"*.aux",
		"*.bbl",
		"*.blg",
		"*.idx",
		"*.ind",
		"*.lof",
		"*.lot",
		"*.out",
		"*.toc",
		"*.acn",
		"*.acr",
		"*.alg",
		"*.glg",
		"*.glo",
		"*.gls",
		"*.fls",
		"*.log",
		"*.fdb_latexmk",
		"*.snm",
		"*.synctex(busy)",
		"*.synctex.gz(busy)",
		"*.nav"
	],

	// Define the method used by the `clean` command to remove temporary files.
	//  - glob: Clean all the files located in `latex-workshop.latex.outDir` and matching the glob patterns listed in `latex-workshop.latex.clean.fileTypes`.
	//  - cleanCommand: Run `latex-workshop.latex.clean.command` to clean temporary files.
	"latex-workshop.latex.clean.method": "glob",

	// Delete LaTeX auxiliary files recursively in sub-folders of `latex-workshop.latex.outDir`.
	"latex-workshop.latex.clean.subfolder.enabled": false,

	// The arguments of `latex-workshop.latex.external.build.command` when calling latex-workshop.build.
	"latex-workshop.latex.external.build.args": [],

	// The external command to execute when calling latex-workshop.build.
	// This is useful when compiling relies on a Makefile or a bespoke script. When defined, it completely bypasses the recipes and root file detection mechanism.
	"latex-workshop.latex.external.build.command": "",

	// Define the arguments to be input to magic command executable. This can be overridden by using "% !TeX options".
	"latex-workshop.latex.magic.args": [
		"-synctex=1",
		"-interaction=nonstopmode",
		"-file-line-error",
		"%DOC%"
	],

	// Define the arguments to be input to BIB magic command executable. This can be overridden by using "% !BIB options".
	"latex-workshop.latex.magic.bib.args": [
		"%DOCFILE%"
	],

	// Add `--max-print-line` option to LaTeX build commands. This flag tells some MikTeX compilers to produce non hard wrapped log messages. Non hard wrapped log messages are required for the _Problem_ Pane to properly display messages.
	"latex-workshop.latex.option.maxPrintLine.enabled": true,

	// The directory where the extension tries to find project files (e.g., PDF and SyncTeX files) are located.
	// Both relative and absolute paths are supported. Relative path start from the root file location, so beware if it is located in sub-directory. The path must not contain a trailing slash.
	// The LaTeX toolchain should output files to this path.
	// For a list of supported placeholders, please visit https://github.com/James-Yu/LaTeX-Workshop/wiki/Compile#placeholders.
	"latex-workshop.latex.outDir": "%DIR%",

	// Delay before reloading a PDF file after last change, in milliseconds. You must reload VSCode to take into account a change in this configuration.
	"latex-workshop.latex.pdfWatch.delay": 250,

	// Define which recipe is used by `latex-workshop.build`. It also applies to auto build. Recipes are refered to by their names as defined in `latex-workshop.latex.recipes`. Note there are two particular values: 
	// - `first` means to use the first recipe in `latex-workshop.latex.recipes`;
	// - `lastUsed` means to use the last run recipe.
	"latex-workshop.latex.recipe.default": "first",

	// Define LaTeX compiling recipes.
	// Each recipe in the list is an object containing its name and the names of tools to be used sequentially, which are defined in `latex-workshop.latex.tools`.
	// By default, the first recipe is used to compile the project. For details, please visit https://github.com/James-Yu/LaTeX-Workshop/wiki/Compile#latex-recipe.
	"latex-workshop.latex.recipes": [
		{
			"name": "latexmk 🔃",
			"tools": [
				"latexmk"
			]
		},
		{
			"name": "latexmk (latexmkrc)",
			"tools": [
				"latexmk_rconly"
			]
		},
		{
			"name": "latexmk (lualatex)",
			"tools": [
				"lualatexmk"
			]
		},
		{
			"name": "pdflatex ➞ bibtex ➞ pdflatex × 2",
			"tools": [
				"pdflatex",
				"bibtex",
				"pdflatex",
				"pdflatex"
			]
		},
		{
			"name": "Compile Rnw files",
			"tools": [
				"rnw2tex",
				"latexmk"
			]
		},
		{
			"name": "Compile Jnw files",
			"tools": [
				"jnw2tex",
				"latexmk"
			]
		},
		{
			"name": "tectonic",
			"tools": [
				"tectonic"
			]
		}
	],

	// When the `subfile` package is used, either the main file or any subfile containing `\documentclass[main.tex]{subfile}` can be LaTeXing. When set to `false`, the `build` and `view` commands  ask the user's choice first. When set to `true`, the subfile is used when `latex-workshop.latex.rootFile.useSubFile` is also `true`, otherwise the rootFile is used.
	"latex-workshop.latex.rootFile.doNotPrompt": false,

	// When the `subfile` package is used, either the main file or any subfile containing `\documentclass[main.tex]{subfile}` can be LaTeXing. When set to `true`, the extension uses the subfile as the rootFile for the `autobuild`, `clean` and `synctex` commands.
	"latex-workshop.latex.rootFile.useSubFile": true,

	// Patterns of files to exclude from the root detection mechanism.
	// See also `latex-workshop.latex.search.rootFiles.include`. For more details the [wiki](https://github.com/James-Yu/LaTeX-Workshop/wiki/Multi-File-Projects).
	"latex-workshop.latex.search.rootFiles.exclude": [],

	// Patterns of files to consider for the root detection mechanism.
	// Relative paths are computed from the workspace folder. To detect the root file and the tex file tree, we parse all the `.tex` listed here.
	// If you want to specify all `.tex` files inside directory, say `foo`, and all its subdirectories recursively, you need to use `**/foo/**/*.tex`. If you only want to match `.tex` files at the top level of the workspace, use `*.tex`. For more details the [wiki](https://github.com/James-Yu/LaTeX-Workshop/wiki/Multi-File-Projects).
	"latex-workshop.latex.search.rootFiles.include": [
		"**/*.tex",
		"**/*.rnw",
		"**/*.Rnw"
	],

	// List of directories where to look for extra input `.tex` files. 
	// Absolute paths are required. You may also need to set the environment variable `TEXINPUTS` properly for the LaTeX compiler to find the `.tex` files, see the `env` parameter of [recipes](https://github.com/James-Yu/LaTeX-Workshop/wiki/Compile#latex-recipes).
	"latex-workshop.latex.texDirs": [],

	// Define LaTeX compiling tools to be used in recipes.
	// Each tool is labeled by its `name`. When invoked, `command` is spawned with arguments defined in `args` and environment variables defined in `env`. Typically no spaces should appear in each argument unless in paths.
	// Placeholders `%DOC%`, `%DOC_W32%, %DOC_EXT%`, `%DOC_EXT_W32%`, `%DOCFILE%`, `%DOCFILE_EXT%`, `%DIR%`, `%DIR_W32%`, `%TMPDIR%` and `%OUTDIR%`, `%OUTDIR_W32%` are available. For more details, please visit https://github.com/James-Yu/LaTeX-Workshop/wiki/Compile#placeholders.
	"latex-workshop.latex.tools": [
		{
			"name": "latexmk",
			"command": "latexmk",
			"args": [
				"-synctex=1",
				"-interaction=nonstopmode",
				"-file-line-error",
				"-pdf",
				"-outdir=%OUTDIR%",
				"%DOC%"
			],
			"env": {}
		},
		{
			"name": "lualatexmk",
			"command": "latexmk",
			"args": [
				"-synctex=1",
				"-interaction=nonstopmode",
				"-file-line-error",
				"-lualatex",
				"-outdir=%OUTDIR%",
				"%DOC%"
			],
			"env": {}
		},
		{
			"name": "latexmk_rconly",
			"command": "latexmk",
			"args": [
				"%DOC%"
			],
			"env": {}
		},
		{
			"name": "pdflatex",
			"command": "pdflatex",
			"args": [
				"-synctex=1",
				"-interaction=nonstopmode",
				"-file-line-error",
				"%DOC%"
			],
			"env": {}
		},
		{
			"name": "bibtex",
			"command": "bibtex",
			"args": [
				"%DOCFILE%"
			],
			"env": {}
		},
		{
			"name": "rnw2tex",
			"command": "Rscript",
			"args": [
				"-e",
				"knitr::opts_knit$set(concordance = TRUE); knitr::knit('%DOCFILE_EXT%')"
			],
			"env": {}
		},
		{
			"name": "jnw2tex",
			"command": "julia",
			"args": [
				"-e",
				"using Weave; weave(\"%DOC_EXT%\", doctype=\"tex\")"
			],
			"env": {}
		},
		{
			"name": "jnw2texmintex",
			"command": "julia",
			"args": [
				"-e",
				"using Weave; weave(\"%DOC_EXT%\", doctype=\"texminted\")"
			],
			"env": {}
		},
		{
			"name": "tectonic",
			"command": "tectonic",
			"args": [
				"--synctex",
				"--keep-logs",
				"%DOC%.tex"
			],
			"env": {}
		}
	],

	// Delay before starting builds, in milliseconds. You must reload VSCode to take into account a change in this configuration.
	"latex-workshop.latex.watch.delay": 250,

	// Files to ignore from the watching mechanism used for triggering autobuild.
	// This property must be an array of glob patterns. The patterns are matched against the absolute file path. To ignore everything inside the `texmf` tree, `**/texmf/**` can be used.
	"latex-workshop.latex.watch.files.ignore": [
		"**/*.bbx",
		"**/*.bbl",
		"**/*.cbx",
		"**/*.cfg",
		"**/*.clo",
		"**/*.cnf",
		"**/*.def",
		"**/*.dfu",
		"**/*.enc",
		"**/*.fd",
		"**/*.fmt",
		"**/*.lbx",
		"**/*.map",
		"**/*.mkii",
		"**/*.pfb",
		"**/*.tfm",
		"**/*.vf",
		"**/*.code.tex",
		"**/*.sty",
		"**/texmf-{dist,var}/**",
		"**/Local/MiKTeX/**",
		"**/Local/Programs/MiKTeX/**",
		"**/Roaming/MiKTeX/**",
		"**/Program*/MiKTeX*/**",
		"**/.miktex/texmfs/**",
		"/var/cache/miktex-texmf/**",
		"/usr/local/share/miktex-texmf/**",
		"**/Library/Application Support/MiKTeX/texmfs/**",
		"/dev/null"
	],

	// Interval of polling, in milliseconds. You must reload VSCode to take into account a change in this configuration.
	"latex-workshop.latex.watch.interval": 300,

	// When set to true, polling is used to watch changes on files. When TeX files are placed on network drives or OneDrive, this option should be turned on. Setting this option to true might lead to high CPU utilization. You must reload VSCode to take into account a change in this configuration.
	"latex-workshop.latex.watch.usePolling": false,

	// Define the command line arguments for latexindent. In the addition to the placeholders defined at https://github.com/James-Yu/LaTeX-Workshop/wiki/Compile#placeholders, the following placeholders are accepted
	// - %TMPFILE%: The full path of the raw TeX file to be formatted. At this moment you need to use it as an input file of `latexindent`.
	// - %INDENT%: The indent character of the file, typically `	`, `' '`, `' '`.
	// 
	// Note: At this moment -c option requires trailing slash.
	"latex-workshop.latexindent.args": [
		"-c",
		"%DIR%/",
		"%TMPFILE%",
		"-y=defaultIndent: '%INDENT%'"
	],

	// Define the location of the latexindent executable file.
	"latex-workshop.latexindent.path": "latexindent",

	// The editor group in which to open the math preview panel.
	//  - current: Use the current editor group
	//  - left: Put the math preview panel in a new group on the left of the current one
	//  - right: Put the math preview panel in a new group on the right of the current one
	//  - above: Put the math preview panel in a new group above the current one
	//  - below: Put the math preview panel in a new group below the current one
	"latex-workshop.mathpreviewpanel.editorGroup": "below",

	// Show badbox information in the problems panel.
	"latex-workshop.message.badbox.show": true,

	// Convert the encoding of filenames if necessary when displaying them in the problems panel.
	"latex-workshop.message.convertFilenameEncoding": true,

	// Display error messages in popup notifications.
	"latex-workshop.message.error.show": true,

	// Display information messages in popup notifications.
	"latex-workshop.message.information.show": false,

	// Exclude log messages that matches the given regexp from the problems panel.
	"latex-workshop.message.latexlog.exclude": [],

	// Display LaTeX Workshop debug log in output panel.
	// This property defines whether LaTeX Workshop will output its debug log to the log panel.
	"latex-workshop.message.log.show": true,

	// Display LaTeX Workshop update message on new versions.
	"latex-workshop.message.update.show": true,

	// Display warning messages in popup notifications.
	"latex-workshop.message.warning.show": true,

	// How many characters long the progress bar should be
	"latex-workshop.progress.barLength": 15,

	// 
	//  - Block Width: █████▋░░░ (8 levels per block)
	//  - Block Shading: █████▓░░░ (4 levels per block)
	//  - Block Quadrants: █████▙░░░ (4 levels per block)
	//  - none: No Bar
	"latex-workshop.progress.barStyle": "Block Shading",

	// Enable the progress bar and the LaTeX compilation info panel.
	"latex-workshop.progress.enabled": true,

	// 
	"latex-workshop.progress.location": "Status Bar",

	// The style of number to use to indicate the run number
	//  - Parenthesised: ⑴ ⑵ ⑶ …
	//  - Circled: ① ② ③ …
	//  - Solid Circled: ❶ ❷ ❸ …
	//  - Full Stop: ⒈ ⒉ ⒊ …
	"latex-workshop.progress.runIconType": "Parenthesised",

	// Enable the LaTeX contextual menu. This menu is deactivated as it is available through the new LaTeX badge. Just set this variable to `true` to recover the menu.
	"latex-workshop.showContextMenu": false,

	// Execute forward synctex at cursor position after compiling LaTeX project.
	"latex-workshop.synctex.afterBuild.enabled": false,

	// Define the location of SyncTeX executive file.
	// Additional arguments, e.g., synctex modes and position of click, will be appended to this command.
	"latex-workshop.synctex.path": "synctex",

	// Enable using a builtin synctex function. The command set in latex-workshop.synctex.path will not be used.
	"latex-workshop.synctex.synctexjs.enabled": true,

	// TeXCount arguments to count words in LaTeX document of the entire project from the root file, or the current document.
	// Arguments must be in separate strings in the array. Additional arguments, i.e., `-merge %DOC%` for the project and the current document path for counting current file will be appended when constructing the command.
	"latex-workshop.texcount.args": [],

	// Define the location of TeXCount executive file/script.
	// This command will be joint with `latex-workshop.texcount.args` and required arguments to form a complete command of TeXCount.
	"latex-workshop.texcount.path": "texcount",

	// Texdoc arguments to see a package documentation.
	// Arguments must be in separate strings in the array. The package name is automatically appended to the arguments.
	"latex-workshop.texdoc.args": [
		"--view"
	],

	// Define the location of texdoc executable.
	// This command is used to show a package documentation.
	"latex-workshop.texdoc.path": "texdoc",

	// Auto focus the LaTeX view when switching from non-tex to tex files.
	// This will cause the view to appear consistently upon activating the extension.
	"latex-workshop.view.autoFocus.enabled": false,

	// Show the floating objects (figures and tables) in the outline/structure views. Reload VSCode after changing the value.
	"latex-workshop.view.outline.floats.enabled": true,

	// Show the labels in the outline/structure views. Reload VSCode after changing the value.
	"latex-workshop.view.outline.labels.enabled": true,

	// Show the sectioning numbers in the outline/structure views.
	"latex-workshop.view.outline.numbers.enabled": true,

	// The section names of LaTeX outline hierarchy. It is also used by the folding mechanism.
	// This property is an array of case-sensitive strings in the order of document structure hierarchy. For multiple tags in the same level, separate the tags with `|` as delimiters, e.g., `section|alternative`. Reload VSCode after changing the value.
	"latex-workshop.view.outline.sections": [
		"part",
		"chapter",
		"section",
		"subsection",
		"subsubsection"
	],

	// The background color around the document. The string must represent a color in HTML.
	"latex-workshop.view.pdf.backgroundColor": "#ffffff",

	// The arguments for `latex-workshop.view.pdf.external.synctex.args` when forward synctex to external viewer.
	// %LINE% is the line number, %PDF% is the placeholder for the absolute path to the generated PDF file, and %TEX% is the source LaTeX file path with `.tex` extension from which syncTeX is fired.
	"latex-workshop.view.pdf.external.synctex.args": [
		"%LINE%",
		"%PDF%",
		"%TEX%"
	],

	// The command to execute when forward synctex to external viewer.
	// This function is not officially supported.
	"latex-workshop.view.pdf.external.synctex.command": "",

	// The arguments for `latex-workshop.view.pdf.external.viewer.command` when using external viewer.
	// This function is not officially supported. %PDF% is the placeholder for the absolute path to the generated PDF file.
	"latex-workshop.view.pdf.external.viewer.args": [
		"%PDF%"
	],

	// The command to execute when using external viewer.
	// This function is not officially supported.
	"latex-workshop.view.pdf.external.viewer.command": "",

	// Define if the hand tool is enabled by default in the PDF viewer.
	"latex-workshop.view.pdf.hand": false,

	// Which keybinding to use for the internal viewer for reverse synctex. `ctrl`/`cmd` + click (default) or double click. You must reload VSCode or the PDF viewer to take into account a change in this configuration.
	"latex-workshop.view.pdf.internal.synctex.keybinding": "ctrl-click",

	// Define the CSS invert filter level of the PDF viewer.
	// This config can invert the color of PDF. Possible values are from 0 to 1.
	"latex-workshop.view.pdf.invert": 0,

	// Define the CSS brightness filter level of the PDF viewer when the invert mode is enabled. Possible values are from 0 to 2.
	"latex-workshop.view.pdf.invertMode.brightness": 1,

	// Enable the CSS invert filter.
	//  - auto: Enable the invert filter when using a dark theme.
	//  - always: Always enable invert filter.
	//  - compat: Enable the invert filter only if `invert > 0`.
	//  - never: Disable the invert filter
	"latex-workshop.view.pdf.invertMode.enabled": "compat",

	// Define the CSS grayscale filter level of the PDF viewer when the invert mode is enabled. Possible values are from 0 to 1.
	"latex-workshop.view.pdf.invertMode.grayscale": 0.6,

	// Define the CSS hue-rotate filter angle of the PDF viewer when the invert mode is enabled. Possible values are from 0 to 360.
	"latex-workshop.view.pdf.invertMode.hueRotate": 180,

	// Define the CSS sepia filter level of the PDF viewer when the invert mode is enabled. Possible values are from 0 to 1.
	"latex-workshop.view.pdf.invertMode.sepia": 0,

	// PDF viewer used for [View on PDF] link on \ref.
	"latex-workshop.view.pdf.ref.viewer": "auto",

	// The default scroll mode of the PDF viewer.
	// This default value will be passed to the viewer upon opening. Possible values are `0` (vertical), `1`(horizontal) and `2` (wrapped).
	"latex-workshop.view.pdf.scrollMode": 0,

	// The default spread mode of the PDF viewer.
	// This default value will be passed to the viewer upon opening. Possible values are `0` (none), `1` (odd) and `2` (even).
	"latex-workshop.view.pdf.spreadMode": 0,

	// The editor group in which to open the tab viewer.
	//  - current: Use the current editor group
	//  - left: Put the viewer tab in a new group on the left of the current one
	//  - right: Put the viewer tab in a new group on the right of the current one
	//  - above: Put the viewer tab in a new group above the current one
	//  - below: Put the viewer tab in a new group below the current one
	"latex-workshop.view.pdf.tab.editorGroup": "right",

	// The default trim mode of the PDF viewer.
	//  - 0: No page trimming
	//  - 1: Trim 5% at margin
	//  - 2: Trim 10% at margin
	//  - 3: Trim 15% at margin
	"latex-workshop.view.pdf.trim": 0,

	// The default PDF viewer.
	//  - none: Undetermined viewer. A viewer selector will pop up upon viewing PDF.
	//  - browser: Open PDF with the default web browser.
	//  - tab: Open PDF with the built-in tab viewer.
	//  - external: [Experimental] Open PDF with the external viewer set in "View > Pdf > External: command".
	"latex-workshop.view.pdf.viewer": "none",

	// The default zoom level of the PDF viewer.
	// This default value will be passed to the viewer upon opening. Possible values are `auto`, `page-actual`, `page-fit`, `page-width`, and one-based scale values (e.g., 0.5 for 50%, 2.0 for 200%).
	"latex-workshop.view.pdf.zoom": "auto",

	// Rebroadcasting KeyboardEvent on the internal viewers. If keyboard shortcuts on the internal viewer do not work well, change this setting.
	"latex-workshop.viewer.pdf.internal.keyboardEvent": "auto",

	// Define the port to listen on for communicating with the internal viewer. The default value "0" means the port is chosen randomly by the application.
	"latex-workshop.viewer.pdf.internal.port": "0",

	// Set to 'false' to disable automatically increasing indent on newlines after '=', 'do', 'where' etc.
	"haskell.indentationRules.enabled": true,

	// Compiler options for C (e.g. ["-std=c99"])
	"clang.cflags": [],

	// Complete macros
	"clang.completion.completeMacros": true,

	// Enable completion
	"clang.completion.enable": true,

	// Tolerable size of the clang output for completion
	"clang.completion.maxBuffer": 8388608,

	// Trigger completion when the user types one of the characters
	"clang.completion.triggerChars": [
		".",
		":",
		">"
	],

	// Compiler options for C++ (e.g. ["-std=c++11"])
	"clang.cxxflags": [],

	// The delay after which diagnostic starts (in millisecond)
	"clang.diagnostic.delay": 500,

	// Enable diagnostic
	"clang.diagnostic.enable": true,

	// Tolerable size of the clang output for diagnostic
	"clang.diagnostic.maxBuffer": 262144,

	// Clang command or the path to the Clang executable
	"clang.executable": "clang",

	// Compiler options for Objective-C
	"clang.objcflags": [],

	// Equivalent to setting the DOCKER_CERT_PATH environment variable.
	"docker.certPath": "",

	// Command templates for `docker attach` / `docker exec -it` commands.
	"docker.commands.attach": "docker exec -it ${containerId} ${shellCommand}",

	// Command template(s) for `docker build` commands.
	"docker.commands.build": "docker build --pull --rm -f \"${dockerfile}\" -t ${tag} \"${context}\"",

	// Command templates for `docker-compose down` commands.
	"docker.commands.composeDown": [
		{
			"label": "Compose Down",
			"template": "docker-compose ${configurationFile} down",
			"contextTypes": [
				"moby"
			]
		},
		{
			"label": "Compose Down",
			"template": "docker compose ${configurationFile} down"
		}
	],

	// Command templates for `docker-compose up` commands.
	"docker.commands.composeUp": [
		{
			"label": "Compose Up",
			"template": "docker-compose ${configurationFile} up ${detached} ${build}",
			"contextTypes": [
				"moby"
			]
		},
		{
			"label": "Compose Up",
			"template": "docker compose ${configurationFile} up ${detached}"
		}
	],

	// Command templates for `docker logs` commands.
	"docker.commands.logs": "docker logs --tail 1000 -f ${containerId}",

	// Command templates for `docker run` commands.
	"docker.commands.run": "docker run --rm -d ${exposedPorts} ${tag}",

	// Command templates for `docker run -it` (interactive) commands.
	"docker.commands.runInteractive": "docker run --rm -it ${exposedPorts} ${tag}",

	// Any secondary properties to display for a container (an array). Possible elements include: ContainerId, ContainerName, CreatedTime, FullTag, ImageId, Networks, Ports, Registry, Repository, RepositoryName, RepositoryNameAndTag, State, Status, and Tag
	"docker.containers.description": [
		"ContainerName",
		"Status"
	],

	// The property to use to group containers in Docker view: ContainerId, ContainerName, CreatedTime, FullTag, ImageId, Networks, Ports, Registry, Repository, RepositoryName, RepositoryNameAndTag, State, Status, Tag, or None
	"docker.containers.groupBy": "Compose Project Name",

	// The primary property to display for a container: ContainerId, ContainerName, CreatedTime, FullTag, ImageId, Networks, Ports, Registry, Repository, RepositoryName, RepositoryNameAndTag, State, Status, or Tag
	"docker.containers.label": "FullTag",

	// The property to use to sort containers in Docker view: CreatedTime or Label
	"docker.containers.sortBy": "CreatedTime",

	// Equivalent to setting the DOCKER_CONTEXT environment variable.
	"docker.context": "",

	// Any secondary properties to display for a Docker context (an array). Possible elements include: Name, Description and DockerEndpoint
	"docker.contexts.description": [
		"Description"
	],

	// The primary property to display for a Docker context: Name, Description or DockerEndpoint
	"docker.contexts.label": "Name",

	// Set to true to include --build option when docker-compose command is invoked
	"docker.dockerComposeBuild": true,

	// Set to true to include --d (detached) option when docker-compose command is invoked
	"docker.dockerComposeDetached": true,

	// If specified, this object will be passed to the Dockerode constructor. Takes precedence over DOCKER_HOST, the Docker Host setting, and any existing Docker contexts.
	"docker.dockerodeOptions": {},

	// Docker view refresh interval (milliseconds)
	"docker.explorerRefreshInterval": 2000,

	// Equivalent to setting the DOCKER_HOST environment variable, for example, ssh://myuser@mymachine or tcp://1.2.3.4.
	"docker.host": "",

	// Build context PATH to pass to Docker build command.
	"docker.imageBuildContextPath": "",

	// Check for outdated base images once per Visual Studio Code session
	"docker.images.checkForOutdatedImages": true,

	// Any secondary properties to display for a image (an array). Possible elements include: CreatedTime, FullTag, ImageId, Registry, Repository, RepositoryName, RepositoryNameAndTag, Tag, and Size
	"docker.images.description": [
		"CreatedTime"
	],

	// The property to use to group images in Docker view: CreatedTime, FullTag, ImageId, None, Registry, Repository, RepositoryName, RepositoryNameAndTag, or Tag
	"docker.images.groupBy": "Repository",

	// The primary property to display for a image: CreatedTime, FullTag, ImageId, Registry, Repository, RepositoryName, RepositoryNameAndTag, Tag, or Size
	"docker.images.label": "Tag",

	// The property to use to sort images in Docker view: CreatedTime, Label, or Size
	"docker.images.sortBy": "CreatedTime",

	// Controls the diagnostic severity for the deprecated MAINTAINER instruction
	"docker.languageserver.diagnostics.deprecatedMaintainer": "warning",

	// Controls the diagnostic severity for parser directives that are not written in lowercase
	"docker.languageserver.diagnostics.directiveCasing": "warning",

	// Controls the diagnostic severity for flagging empty continuation lines found in instructions that span multiple lines
	"docker.languageserver.diagnostics.emptyContinuationLine": "warning",

	// Controls the diagnostic severity for instructions that are not written in uppercase
	"docker.languageserver.diagnostics.instructionCasing": "warning",

	// Controls the diagnostic severity for flagging a Dockerfile with multiple CMD instructions
	"docker.languageserver.diagnostics.instructionCmdMultiple": "warning",

	// Controls the diagnostic severity for flagging a Dockerfile with multiple ENTRYPOINT instructions
	"docker.languageserver.diagnostics.instructionEntrypointMultiple": "warning",

	// Controls the diagnostic severity for flagging a Dockerfile with multiple HEALTHCHECK instructions
	"docker.languageserver.diagnostics.instructionHealthcheckMultiple": "warning",

	// Controls the diagnostic severity for JSON instructions that are written incorrectly with single quotes
	"docker.languageserver.diagnostics.instructionJSONInSingleQuotes": "warning",

	// Controls the diagnostic severity for WORKDIR instructions that do not point to an absolute path
	"docker.languageserver.diagnostics.instructionWorkdirRelative": "warning",

	// Equivalent to setting the DOCKER_MACHINE_NAME environment variable.
	"docker.machineName": "",

	// Any secondary properties to display for a Docker network (an array). Possible elements include CreatedTime, NetworkDriver, NetworkId, and NetworkName
	"docker.networks.description": [
		"NetworkDriver",
		"CreatedTime"
	],

	// The property to use to group networks in Docker view: CreatedTime, NetworkDriver, NetworkId, NetworkName, or None
	"docker.networks.groupBy": "None",

	// The primary property to display for a Docker network: CreatedTime, NetworkDriver, NetworkId, or NetworkName
	"docker.networks.label": "NetworkName",

	// Show the built-in networks in the explorer.
	"docker.networks.showBuiltInNetworks": true,

	// The property to use to sort networks in Docker view: CreatedTime or Label
	"docker.networks.sortBy": "CreatedTime",

	// Prompt for registry selection if the image is not explicitly tagged.
	"docker.promptForRegistryWhenPushingImages": true,

	// The path to use for scaffolding templates.
	"docker.scaffolding.templatePath": "",

	// Set to true to prompt to switch from "UI" extension mode to "Workspace" extension mode if an operation is not supported in UI mode.
	"docker.showRemoteWorkspaceWarning": true,

	// Show the Docker extension Start Page when a new update is released.
	"docker.showStartPage": true,

	// Equivalent to setting the DOCKER_TLS_VERIFY environment variable.
	"docker.tlsVerify": "",

	// Set to true to truncate long image and container registry paths in Docker view
	"docker.truncateLongRegistryPaths": false,

	// Maximum length of a registry paths displayed in Docker view, including elipsis. The truncateLongRegistryPaths setting must be set to true for truncateMaxLength setting to be effective.
	"docker.truncateMaxLength": 10,

	// Any secondary properties to display for a Docker volume (an array). Possible values include CreatedTime and VolumeName
	"docker.volumes.description": [
		"CreatedTime"
	],

	// The property to use to group volumes in Docker view: CreatedTime, VolumeName, or None
	"docker.volumes.groupBy": "None",

	// The primary property to display for a Docker volume: CreatedTime or VolumeName
	"docker.volumes.label": "VolumeName",

	// The property to use to sort volumes in Docker view: CreatedTime or Label
	"docker.volumes.sortBy": "CreatedTime",

	// Enable/disable default C# formatter (requires restart).
	"csharp.format.enable": true,

	// Specifies the maximum number of files for which diagnostics are reported for the whole workspace. If this limit is exceeded, diagnostics will be shown for currently opened files only. Specify 0 or less to disable the limit completely.
	"csharp.maxProjectFileCountForDiagnosticAnalysis": 1000,

	// Specifies whether the references CodeLens should be shown.
	"csharp.referencesCodeLens.enabled": true,

	// Enable/disable Semantic Highlighting for C# files (Razor files currently unsupported). Defaults to false. Close open files for changes to take effect.
	"csharp.semanticHighlighting.enabled": false,

	// Shows the OmniSharp log in the Output pane when OmniSharp reports an error.
	"csharp.showOmnisharpLogOnError": true,

	// Suppress the notification window to add missing assets to build or debug the application.
	"csharp.suppressBuildAssetsNotification": false,

	// Suppress the warning that the .NET Core SDK is not on the path.
	"csharp.suppressDotnetInstallWarning": false,

	// Suppress the notification window to perform a 'dotnet restore' when dependencies can't be resolved.
	"csharp.suppressDotnetRestoreNotification": false,

	// Suppress 'hidden' diagnostics (such as 'unnecessary using directives') from appearing in the editor or the Problems pane.
	"csharp.suppressHiddenDiagnostics": true,

	// Suppress the warning that project.json is no longer a supported project format for .NET Core applications
	"csharp.suppressProjectJsonWarning": false,

	// Specifies whether the run and debug test CodeLens should be shown.
	"csharp.testsCodeLens.enabled": true,

	// Options to use with the debugger when launching for unit test debugging. Any launch.json option is valid here.
	"csharp.unitTestDebuggingOptions": {},

	// Specifies whether the OmniSharp server will be automatically started or not. If false, OmniSharp can be started with the 'Restart OmniSharp' command
	"omnisharp.autoStart": true,

	// The name of the default solution used at start up if the repo has multiple solutions. e.g.'MyAwesomeSolution.sln'. Default value is `null` which will cause the first in alphabetical order to be chosen.
	"omnisharp.defaultLaunchSolution": null,

	// Specifies whether notifications should be shown if OmniSharp encounters warnings or errors loading a project. Note that these warnings/errors are always emitted to the OmniSharp log
	"omnisharp.disableMSBuildDiagnosticWarning": false,

	// Enables support for decompiling external references instead of viewing metadata.
	"omnisharp.enableDecompilationSupport": false,

	// Enables support for reading code style, naming convention and analyzer settings from .editorconfig.
	"omnisharp.enableEditorConfigSupport": true,

	// Enables support for showing unimported types and unimported extension methods in completion lists. When committed, the appropriate using directive will be added at the top of the current file. This option can have a negative impact on initial completion responsiveness, particularly for the first few completion sessions after opening a solution.
	"omnisharp.enableImportCompletion": false,

	// If true, MSBuild project system will only load projects for files that were opened in the editor. This setting is useful for big C# codebases and allows for faster initialization of code navigation features only for projects that are relevant to code that is being edited. With this setting enabled OmniSharp may load fewer projects and may thus display incomplete reference lists for symbols.
	"omnisharp.enableMsBuildLoadProjectsOnDemand": false,

	// Enables support for roslyn analyzers, code fixes and rulesets.
	"omnisharp.enableRoslynAnalyzers": false,

	// Specifies the level of logging output from the OmniSharp server.
	"omnisharp.loggingLevel": "information",

	// The maximum number of items that 'Go to Symbol in Workspace' operation can show. The limit is applied only when a positive number is specified here.
	"omnisharp.maxFindSymbolsItems": 1000,

	// The maximum number of projects to be shown in the 'Select Project' dropdown (maximum 250).
	"omnisharp.maxProjectResults": 250,

	// The minimum number of characters to enter before 'Go to Symbol in Workspace' operation shows any results.
	"omnisharp.minFindSymbolsFilterLength": 0,

	// Specifies the path to a mono installation to use when "useGlobalMono" is set to "always", instead of the default system one. Example: "/Library/Frameworks/Mono.framework/Versions/Current"
	"omnisharp.monoPath": null,

	// Specifies whether 'using' directives should be grouped and sorted during document formatting.
	"omnisharp.organizeImportsOnFormat": false,

	// Specifies the path to OmniSharp. When left empty the OmniSharp version pinned to the C# Extension is used. This can be the absolute path to an OmniSharp executable, a specific version number, or "latest". If a version number or "latest" is specified, the appropriate version of OmniSharp will be downloaded on your behalf. Setting "latest" is an opt-in into latest beta releases of OmniSharp.
	"omnisharp.path": null,

	// The time Visual Studio Code will wait for the OmniSharp server to start. Time is expressed in seconds.
	"omnisharp.projectLoadTimeout": 60,

	// Specifes whether OmniSharp should use VS Code editor settings for C# code formatting (use of tabs, indentation size).
	"omnisharp.useEditorFormattingSettings": true,

	// Launch OmniSharp with the globally-installed Mono. If set to "always", "mono" version 6.4.0 or greater must be available on the PATH. If set to "auto", OmniSharp will be launched with "mono" if version 6.4.0 or greater is available on the PATH.
	//  - auto: Automatically launch OmniSharp with internal "mono", since "mono" 6.12.0 does not support .NET Core 3.1.40x or .NET 5 SDKs.
	//  - always: Always launch OmniSharp with "mono". If version 6.4.0 or greater is not available on the PATH, an error will be printed.
	//  - never: Never launch OmniSharp on a globally-installed Mono.
	"omnisharp.useGlobalMono": "auto",

	// Pass the --debug flag when launching the OmniSharp server to allow a debugger to be attached.
	"omnisharp.waitForDebugger": false,

	// Forces the omnisharp-vscode extension to run in a mode that enables local Razor.VSCode deving.
	"razor.devmode": false,

	// Disable Blazor WebAssembly's debug requirements notification.
	"razor.disableBlazorDebugPrompt": false,

	// Specifies whether to disable Razor language features.
	"razor.disabled": false,

	// Enable/disable default Razor formatter.
	"razor.format.enable": true,

	// Specifies whether to wait for debug attach when launching the language server.
	"razor.languageServer.debug": false,

	// Overrides the path to the Razor Language Server directory.
	"razor.languageServer.directory": null,

	// Overrides the path to the Razor plugin dll.
	"razor.plugin.path": null,

	// Specifies whether to output all messages [Verbose], some messages [Messages] or not at all [Off].
	//  - Off: Does not log messages from the Razor extension
	//  - Messages: Logs only some messages from the Razor extension
	//  - Verbose: Logs all messages from the Razor extension
	"razor.trace": "Off",

	// [Optional] Configuration options for localizing into VSCode's configured locale (must restart VSCode for settings to take effect)
	"mssql.applyLocalization": false,

	// Chooses which Authentication method to use
	"mssql.azureActiveDirectory": "AuthCodeGrant",

	// Connection profiles defined in 'User Settings' are shown under 'MS SQL: Connect' command in the command palette.
	"mssql.connections": [
		{
			"server": "{{put-server-name-here}}",
			"database": "{{put-database-name-here}}",
			"user": "{{put-username-here}}",
			"password": "{{put-password-here}}"
		}
	],

	// [Optional] Configuration options for copying results from the Results View
	"mssql.copyIncludeHeaders": false,

	// [Optional] Configuration options for copying multi-line results from the Results View
	"mssql.copyRemoveNewLine": true,

	// Enable Query History Capture
	"mssql.enableQueryHistoryCapture": true,

	// Should Query History feature be enabled
	"mssql.enableQueryHistoryFeature": true,

	// Should column definitions be aligned?
	"mssql.format.alignColumnDefinitionsInColumns": false,

	// Should data types be formatted as UPPERCASE, lowercase, or none (not formatted)
	"mssql.format.datatypeCasing": "none",

	// Should keywords be formatted as UPPERCASE, lowercase, or none (not formatted)
	"mssql.format.keywordCasing": "none",

	// should commas be placed at the beginning of each statement in a list e.g. ', mycolumn2' instead of at the end e.g. 'mycolumn1,'
	"mssql.format.placeCommasBeforeNextStatement": false,

	// Should references to objects in a select statements be split into separate lines? E.g. for 'SELECT C1, C2 FROM T1' both C1 and C2 will be on separate lines
	"mssql.format.placeSelectStatementReferencesOnNewLine": false,

	// Should IntelliSense error checking be enabled
	"mssql.intelliSense.enableErrorChecking": true,

	// Should IntelliSense be enabled
	"mssql.intelliSense.enableIntelliSense": true,

	// Should IntelliSense quick info be enabled
	"mssql.intelliSense.enableQuickInfo": true,

	// Should IntelliSense suggestions be enabled
	"mssql.intelliSense.enableSuggestions": true,

	// Should IntelliSense suggestions be lowercase
	"mssql.intelliSense.lowerCaseSuggestions": false,

	// [Optional] Log debug output to the VS Code console (Help -> Toggle Developer Tools)
	"mssql.logDebugInfo": false,

	// The maximum number of recently used connections to store in the connection list.
	"mssql.maxRecentConnections": 5,

	// True for the messages pane to be open by default; false for closed
	"mssql.messagesDefaultOpen": true,

	// Should query result selections and scroll positions be saved when switching tabs (may impact performance)
	"mssql.persistQueryResultTabs": false,

	// Should BIT columns be displayed as numbers (1 or 0)? If false, BIT columns will be displayed as 'true' or 'false'
	"mssql.query.displayBitAsNumber": true,

	// Number of query history entries to show in the Query History view
	"mssql.queryHistoryLimit": 20,

	// Set the font family for the results grid; set to blank to use the editor font
	"mssql.resultsFontFamily": "-apple-system,BlinkMacSystemFont,Segoe WPC,Segoe UI,HelveticaNeue-Light,Ubuntu,Droid Sans,sans-serif",

	// Set the font size for the results grid; set to blank to use the editor size
	"mssql.resultsFontSize": 13,

	// [Optional] Delimiter for separating data items when saving results as CSV
	"mssql.saveAsCsv.delimiter": ",",

	// [Optional] File encoding used when saving results as CSV
	"mssql.saveAsCsv.encoding": "utf-8",

	// [Optional] When true, column headers are included when saving results as CSV
	"mssql.saveAsCsv.includeHeaders": true,

	// [Optional] Character(s) used for separating rows when saving results as CSV
	"mssql.saveAsCsv.lineSeparator": null,

	// [Optional] Character used for enclosing text fields when saving results as CSV
	"mssql.saveAsCsv.textIdentifier": "\"",

	// Shortcuts related to the results window
	"mssql.shortcuts": {
		"_comment": "Short cuts must follow the format (ctrl)+(shift)+(alt)+[key]",
		"event.toggleResultPane": "ctrl+alt+R",
		"event.focusResultsGrid": "ctrl+alt+G",
		"event.toggleMessagePane": "ctrl+alt+Y",
		"event.prevGrid": "ctrl+up",
		"event.nextGrid": "ctrl+down",
		"event.copySelection": "ctrl+C",
		"event.copyWithHeaders": "",
		"event.copyAllHeaders": "",
		"event.maximizeGrid": "",
		"event.selectAll": "ctrl+A",
		"event.saveAsJSON": "",
		"event.saveAsCSV": "",
		"event.saveAsExcel": ""
	},

	// [Optional] Should execution time be shown for individual batches
	"mssql.showBatchTime": false,

	// [Optional] Configuration options for which column new result panes should open in
	"mssql.splitPaneSelection": "next",

	// Path to a writable folder where analyzer can cache its data. Change requires restart.
	"python.analysis.cacheFolderPath": "",

	// Delay before diagnostic messages are transferred to the problems list (in milliseconds).
	"python.analysis.diagnosticPublishDelay": 1000,

	// List of suppressed diagnostic messages.
	"python.analysis.disabled": [],

	// List of diagnostics messages to be shown as errors.
	"python.analysis.errors": [],

	// List of diagnostics messages to be shown as information.
	"python.analysis.information": [],

	// Defines type of log messages language server writes into the output window.
	"python.analysis.logLevel": "Error",

	// Allows code analysis to keep parser trees in memory. Increases memory consumption but may improve performance with large library analysis.
	"python.analysis.memory.keepLibraryAst": false,

	// Limits depth of the symbol tree in the document outline.
	"python.analysis.symbolsHierarchyDepthLimit": 10,

	// Paths to Typeshed stub folders. Default is Typeshed installed with the language server. Change requires restart.
	"python.analysis.typeshedPaths": [],

	// List of diagnostics messages to be shown as warnings.
	"python.analysis.warnings": [],

	// Automatically add brackets for functions.
	"python.autoComplete.addBrackets": false,

	// List of paths to libraries and the like that need to be imported by auto complete engine. E.g. when using Google App SDK, the paths are not in system path, hence need to be added into this list.
	"python.autoComplete.extraPaths": [],

	// Controls appearance of methods with double underscores in the completion list.
	"python.autoComplete.showAdvancedMembers": true,

	// Specifies paths to local typeshed repository clone(s) for the Python language server.
	"python.autoComplete.typeshedPaths": [],

	// Automatically update the language server.
	"python.autoUpdateLanguageServer": true,

	// Path to the conda executable to use for activation (version 4.4+).
	"python.condaPath": "",

	// Path to Python, you can use a custom version of Python by modifying this setting to include the full path.
	"python.defaultInterpreterPath": "python",

	// Enable source map support for meaningful stack traces in error logs.
	"python.diagnostics.sourceMapsEnabled": false,

	// Whether to check if Python is installed (also warn when using the macOS-installed Python).
	"python.disableInstallationCheck": false,

	// Absolute path to a file containing environment variable definitions.
	"python.envFile": "${workspaceFolder}/.env",

	// Enables/disables A/B tests.
	"python.experiments.enabled": true,

	// List of experiment to opt into. If empty, user is assigned the default experiment groups. See https://github.com/microsoft/vscode-python/wiki/Experiments for more details.
	"python.experiments.optInto": [],

	// List of experiment to opt out of. If empty, user is assigned the default experiment groups. See https://github.com/microsoft/vscode-python/wiki/Experiments for more details.
	"python.experiments.optOutFrom": [],

	// Arguments passed in. Each argument is a separate item in the array.
	"python.formatting.autopep8Args": [],

	// Path to autopep8, you can use a custom version of autopep8 by modifying this setting to include the full path.
	"python.formatting.autopep8Path": "autopep8",

	// Arguments passed in. Each argument is a separate item in the array.
	"python.formatting.blackArgs": [],

	// Path to Black, you can use a custom version of Black by modifying this setting to include the full path.
	"python.formatting.blackPath": "black",

	// Provider for formatting. Possible options include 'autopep8', 'black', and 'yapf'.
	"python.formatting.provider": "autopep8",

	// Arguments passed in. Each argument is a separate item in the array.
	"python.formatting.yapfArgs": [],

	// Path to yapf, you can use a custom version of yapf by modifying this setting to include the full path.
	"python.formatting.yapfPath": "yapf",

	// Whether to install Python modules globally when not using an environment.
	"python.globalModuleInstallation": false,

	// Set to "weekly" or "daily" to automatically download and install the latest Insiders builds of the python extension, which include upcoming features and bug fixes.
	"python.insidersChannel": "off",

	// Memory limit for the Jedi completion engine in megabytes. Zero (default) means 3072 MB. -1 means unlimited (disable memory limit check)
	"python.jediMemoryLimit": 0,

	// Path to directory containing the Jedi library (this path will contain the 'Jedi' sub directory). Note: since Jedi depends on Parso, if using this setting you will need to ensure a suitable version of Parso is available. This setting only works with "languageServer=Jedi" and not JediLSP.
	"python.jediPath": "",

	// Defines type of the language server.
	"python.languageServer": "Jedi",

	// Arguments passed in. Each argument is a separate item in the array.
	"python.linting.banditArgs": [],

	// Whether to lint Python files using bandit.
	"python.linting.banditEnabled": false,

	// Path to bandit, you can use a custom version of bandit by modifying this setting to include the full path.
	"python.linting.banditPath": "bandit",

	// Optional working directory for linters.
	"python.linting.cwd": null,

	// Whether to lint Python files.
	"python.linting.enabled": true,

	// Arguments passed in. Each argument is a separate item in the array.
	"python.linting.flake8Args": [],

	// Severity of Flake8 message type 'E'.
	"python.linting.flake8CategorySeverity.E": "Error",

	// Severity of Flake8 message type 'F'.
	"python.linting.flake8CategorySeverity.F": "Error",

	// Severity of Flake8 message type 'W'.
	"python.linting.flake8CategorySeverity.W": "Warning",

	// Whether to lint Python files using flake8
	"python.linting.flake8Enabled": false,

	// Path to flake8, you can use a custom version of flake8 by modifying this setting to include the full path.
	"python.linting.flake8Path": "flake8",

	// Patterns used to exclude files or folders from being linted.
	"python.linting.ignorePatterns": [
		".vscode/*.py",
		"**/site-packages/**/*.py"
	],

	// Whether to lint Python files when saved.
	"python.linting.lintOnSave": true,

	// Controls the maximum number of problems produced by the server.
	"python.linting.maxNumberOfProblems": 100,

	// Arguments passed in. Each argument is a separate item in the array.
	"python.linting.mypyArgs": [
		"--ignore-missing-imports",
		"--follow-imports=silent",
		"--show-column-numbers"
	],

	// Severity of Mypy message type 'Error'.
	"python.linting.mypyCategorySeverity.error": "Error",

	// Severity of Mypy message type 'Note'.
	"python.linting.mypyCategorySeverity.note": "Information",

	// Whether to lint Python files using mypy.
	"python.linting.mypyEnabled": false,

	// Path to mypy, you can use a custom version of mypy by modifying this setting to include the full path.
	"python.linting.mypyPath": "mypy",

	// Arguments passed in. Each argument is a separate item in the array.
	"python.linting.prospectorArgs": [],

	// Whether to lint Python files using prospector.
	"python.linting.prospectorEnabled": false,

	// Path to Prospector, you can use a custom version of prospector by modifying this setting to include the full path.
	"python.linting.prospectorPath": "prospector",

	// Arguments passed in. Each argument is a separate item in the array.
	"python.linting.pycodestyleArgs": [],

	// Severity of pycodestyle message type 'E'.
	"python.linting.pycodestyleCategorySeverity.E": "Error",

	// Severity of pycodestyle message type 'W'.
	"python.linting.pycodestyleCategorySeverity.W": "Warning",

	// Whether to lint Python files using pycodestyle
	"python.linting.pycodestyleEnabled": false,

	// Path to pycodestyle, you can use a custom version of pycodestyle by modifying this setting to include the full path.
	"python.linting.pycodestylePath": "pycodestyle",

	// Arguments passed in. Each argument is a separate item in the array.
	"python.linting.pydocstyleArgs": [],

	// Whether to lint Python files using pydocstyle
	"python.linting.pydocstyleEnabled": false,

	// Path to pydocstyle, you can use a custom version of pydocstyle by modifying this setting to include the full path.
	"python.linting.pydocstylePath": "pydocstyle",

	// Arguments passed in. Each argument is a separate item in the array.
	"python.linting.pylamaArgs": [],

	// Whether to lint Python files using pylama.
	"python.linting.pylamaEnabled": false,

	// Path to pylama, you can use a custom version of pylama by modifying this setting to include the full path.
	"python.linting.pylamaPath": "pylama",

	// Arguments passed in. Each argument is a separate item in the array.
	"python.linting.pylintArgs": [],

	// Severity of Pylint message type 'Convention/C'.
	"python.linting.pylintCategorySeverity.convention": "Information",

	// Severity of Pylint message type 'Error/E'.
	"python.linting.pylintCategorySeverity.error": "Error",

	// Severity of Pylint message type 'Fatal/F'.
	"python.linting.pylintCategorySeverity.fatal": "Error",

	// Severity of Pylint message type 'Refactor/R'.
	"python.linting.pylintCategorySeverity.refactor": "Hint",

	// Severity of Pylint message type 'Warning/W'.
	"python.linting.pylintCategorySeverity.warning": "Warning",

	// Whether to lint Python files using pylint.
	"python.linting.pylintEnabled": true,

	// Path to Pylint, you can use a custom version of pylint by modifying this setting to include the full path.
	"python.linting.pylintPath": "pylint",

	// Whether to run Pylint with minimal set of rules.
	"python.linting.pylintUseMinimalCheckers": true,

	// The logging level the extension logs at, defaults to 'error'
	"python.logging.level": "error",

	// Path to the pipenv executable to use for activation.
	"python.pipenvPath": "pipenv",

	// Path to the poetry executable.
	"python.poetryPath": "poetry",

	// Path to Python, you can use a custom version of Python by modifying this setting to include the full path.
	"python.pythonPath": "python",

	// Show the Python Start Page when a new update is released.
	"python.showStartPage": true,

	// Arguments passed in. Each argument is a separate item in the array.
	"python.sortImports.args": [],

	// Path to isort script, default using inner version
	"python.sortImports.path": "",

	// Set this setting to your preferred TensorBoard log directory to skip log directory prompt when starting TensorBoard.
	"python.tensorBoard.logDirectory": "",

	// Activate Python Environment in the current Terminal on load of the Extension.
	"python.terminal.activateEnvInCurrentTerminal": false,

	// Activate Python Environment in Terminal created using the Extension.
	"python.terminal.activateEnvironment": true,

	// When executing a file in the terminal, whether to use execute in the file's directory, instead of the current open folder.
	"python.terminal.executeInFileDir": false,

	// Python launch arguments to use when executing a file in the terminal.
	"python.terminal.launchArgs": [],

	// Enable auto run test discovery when saving a test file.
	"python.testing.autoTestDiscoverOnSaveEnabled": true,

	// Optional working directory for tests.
	"python.testing.cwd": null,

	// Port number used for debugging of tests.
	"python.testing.debugPort": 3000,

	// Arguments passed in. Each argument is a separate item in the array.
	"python.testing.nosetestArgs": [],

	// Path to nosetests, you can use a custom version of nosetests by modifying this setting to include the full path.
	"python.testing.nosetestPath": "nosetests",

	// Enable testing using nosetests.
	"python.testing.nosetestsEnabled": false,

	// Prompt to configure a test framework if potential tests directories are discovered.
	"python.testing.promptToConfigure": true,

	// Arguments passed in. Each argument is a separate item in the array.
	"python.testing.pytestArgs": [],

	// Enable testing using pytest.
	"python.testing.pytestEnabled": false,

	// Path to pytest (pytest), you can use a custom version of pytest by modifying this setting to include the full path.
	"python.testing.pytestPath": "pytest",

	// Arguments passed in. Each argument is a separate item in the array.
	"python.testing.unittestArgs": [
		"-v",
		"-s",
		".",
		"-p",
		"*test*.py"
	],

	// Enable testing using unittest.
	"python.testing.unittestEnabled": false,

	// Execute tools in isolation from the workspace.
	"python.useIsolation": true,

	// Folders in your home directory to look into for virtual environments (supports pyenv, direnv and virtualenvwrapper by default).
	"python.venvFolders": [],

	// Path to folder with a list of Virtual Environments (e.g. ~/.pyenv, ~/Envs, ~/.virtualenvs).
	"python.venvPath": "",

	// Fully qualified path to the ctags executable (else leave as ctags, assuming it is in current path).
	"python.workspaceSymbols.ctagsPath": "ctags",

	// Set to 'true' to enable ctags to provide Workspace Symbols.
	"python.workspaceSymbols.enabled": false,

	// Pattern used to exclude files and folders from ctags See http://ctags.sourceforge.net/ctags.html.
	"python.workspaceSymbols.exclusionPatterns": [
		"**/site-packages/**"
	],

	// Whether to re-build the tags file on when changes made to python files are saved.
	"python.workspaceSymbols.rebuildOnFileSave": true,

	// Whether to re-build the tags file on start (defaults to true).
	"python.workspaceSymbols.rebuildOnStart": true,

	// Fully qualified path to tag file (exuberant ctag file), used to provide workspace symbols.
	"python.workspaceSymbols.tagFilePath": "${workspaceFolder}/.vscode/tags",

	// After running a cell, add a 'Goto' code lens on the cell. Note, disabling all code lenses disables this code lens as well.
	"jupyter.addGotoCodeLenses": true,

	// Allows a user to import a jupyter notebook into a python file anytime one is opened.
	"jupyter.allowImportFromNotebook": true,

	// Allow the inputting of python code directly into the Interactive window
	"jupyter.allowInput": true,

	// Allow the Interactive window to be shared during a Live Share session
	"jupyter.allowLiveShare": true,

	// Allow for connecting the Interactive window to a https Jupyter server that does not have valid certificates. This can be a security risk, so only use for known and trusted servers.
	"jupyter.allowUnauthorizedRemoteConnection": false,

	// Automatically scroll the interactive window to show the output of the last statement executed. If false, the interactive window will only automatically scroll if the bottom of the prior cell is visible.
	"jupyter.alwaysScrollOnNewCell": false,

	// Enabling this setting will automatically trust any opened notebook and therefore display markdown and render code cells. You will no longer be prompted to trust individual notebooks and harmful code could automatically run. 
	// 
	// [Learn more.](https://aka.ms/trusted-notebooks)
	"jupyter.alwaysTrustNotebooks": false,

	// Warn the user before restarting a kernel.
	"jupyter.askForKernelRestart": true,

	// Warn the user before trying to open really large data frames.
	"jupyter.askForLargeDataFrames": true,

	// No longer supported. Notebooks open directly in their own editor now.
	// When opening ipynb files, automatically preview the contents in the Interactive window.
	"jupyter.autoPreviewNotebooksInInteractivePane": false,

	// When importing or exporting a Jupyter Notebook add a directory change command to allow relative path loading to work.
	"jupyter.changeDirOnImportExport": false,

	// Set of commands to put as code lens above a cell. Defaults to 'jupyter.runcell,  jupyter.runallcellsabove, jupyter.debugcell'
	"jupyter.codeLenses": "jupyter.runcell,  jupyter.runallcellsabove, jupyter.debugcell",

	// Regular expression used to identify code cells. All code until the next match is considered part of this cell. 
	// Defaults to '^(#\s*%%|#\s*\<codecell\>|#\s*In\[\d*?\]|#\s*In\[ \])' if left blank
	"jupyter.codeRegularExpression": "^(#\\s*%%|#\\s*\\<codecell\\>|#\\s*In\\[\\d*?\\]|#\\s*In\\[ \\])",

	// Collapse cell input code by default.
	"jupyter.collapseCellInputCodeByDefault": true,

	// Whether or not to use the theme's peek color as the background for the input box.
	"jupyter.colorizeInputBox": true,

	// Set of debug commands to put as code lens above a cell while debugging.
	"jupyter.debugCodeLenses": "jupyter.debugcontinue, jupyter.debugstop, jupyter.debugstepover",

	// When debugging, debug just my code.
	"jupyter.debugJustMyCode": true,

	// Path to debugpy bits for debugging cells.
	"jupyter.debugpyDistPath": "",

	// Draw a highlight behind the currently active cell.
	"jupyter.decorateCells": true,

	// Cell marker used for delineating a cell in a python file.
	"jupyter.defaultCellMarker": "# %%",

	// When true, disables Jupyter from being automatically started for you. You must instead run a cell to start Jupyter.
	"jupyter.disableJupyterAutoStart": false,

	// Enables moving to the next cell when clicking on a 'Run Cell' code lens.
	"jupyter.enableAutoMoveToNextCell": true,

	// Enables code lens for 'cells' in a python file.
	"jupyter.enableCellCodeLens": true,

	// Enables Jupyter style keyboard shortcuts for Notebooks.
	"jupyter.enableKeyboardShortcuts": true,

	// Modify plot output so that it can be expanded into a plot viewer window.
	"jupyter.enablePlotViewer": true,

	// Enables scrolling for large cell outputs in the Notebook Editor. This setting does not apply to the Interactive Window.
	"jupyter.enableScrollingForCellOutputs": true,

	// No longer necessary as the theme colors are used for error messages
	// Background color (in hex) for exception messages in the Interactive window.
	"jupyter.errorBackgroundColor": "#FFFFFF",

	// Enables/disables A/B tests.
	"jupyter.experiments.enabled": true,

	// List of experiment to opt into. If empty, user is assigned the default experiment groups. See https://github.com/microsoft/vscode-jupyter/wiki/Experiments for more details.
	"jupyter.experiments.optInto": [],

	// List of experiment to opt out of. If empty, user is assigned the default experiment groups. See https://github.com/microsoft/vscode-jupyter/wiki/Experiments for more details.
	"jupyter.experiments.optOutFrom": [],

	// Enable exporting a python file into a jupyter notebook and run all cells when doing so.
	"jupyter.exportWithOutputEnabled": false,

	// Don't use the VS Code theme in the Interactive window (requires reload of VS Code). This forces the Interactive window to use 'Light +(default light)' and disables matplotlib defaults.
	"jupyter.ignoreVscodeTheme": false,

	// Behavior of the Interactive Window. 'perFile' will create a new interactive window for every file that runs a cell. 'single' allows a single window. 'multiple' allows the creation of multiple.
	"jupyter.interactiveWindowMode": "multiple",

	// When a Notebook Editor or Interactive Window Jupyter server is started, these arguments will be passed to it. By default this list is generated by the Jupyter Extension.
	"jupyter.jupyterCommandLineArguments": [],

	// Amount of time (in ms) to wait for an interrupt before asking to restart the Jupyter kernel.
	"jupyter.jupyterInterruptTimeout": 10000,

	// Number of times to attempt to connect to the Jupyter Notebook
	"jupyter.jupyterLaunchRetries": 3,

	// Amount of time (in ms) to wait for the Jupyter Notebook server to start.
	"jupyter.jupyterLaunchTimeout": 60000,

	// Determines the type of connection for talking to jupyter. Local will start kernels locally. Remote allows for connections to remote servers
	"jupyter.jupyterServerType": "",

	// Amount of time to wait for guest connections to verify they have the Python extension installed.
	"jupyter.liveShareConnectionTimeout": 1000,

	// The logging level the extension logs at, defaults to 'error'
	"jupyter.logging.level": "debug",

	// Uncomment shell assignments (#!), line magic (#!%) and cell magic (#!%%) when parsing code cells.
	"jupyter.magicCommandsAsComments": false,

	// Regular expression used to identify markdown cells. All comments after this expression are considered part of the markdown. 
	// Defaults to '^(#\s*%%\s*\[markdown\]|#\s*\<markdowncell\>)' if left blank
	"jupyter.markdownRegularExpression": "^(#\\s*%%\\s*\\[markdown\\]|#\\s*\\<markdowncell\\>)",

	// Maximum size (in pixels) of text output in the Notebook Editor before a scrollbar appears. First enable scrolling for cell outputs in settings.
	"jupyter.maxOutputSize": 400,

	// Set the root directory for loading files for the Interactive window.
	"jupyter.notebookFileRoot": "${fileDirname}",

	// When debugging a cell, open this port on the remote box. If -1 is specified, a random port between 8889 and 9000 will be attempted.
	"jupyter.remoteDebuggerPort": -1,

	// This setting has been deprecated in favor of 'runStartupCommands'.
	// A series of Python instructions or iPython magic commands separated by '\n' that will be executed when the interactive window loads.
	"jupyter.runMagicCommands": "",

	// A series of Python instructions or iPython magic commands. Can be either an array of strings or a single string with commands separated by '\n'. Commands will be silently executed whenever the interactive window loads. For instance, set this to '%load_ext autoreload\n%autoreload 2' to automatically reload changes made to imported files without having to restart the interactive session.
	"jupyter.runStartupCommands": "",

	// Search all installed Python interpreters for a Jupyter installation when starting the Interactive window
	"jupyter.searchForJupyter": true,

	// When pressing shift+enter, send selected code in a Python file to the Jupyter interactive window as opposed to the Python terminal.
	"jupyter.sendSelectionToInteractiveWindow": false,

	// Show cell input code.
	"jupyter.showCellInputCode": true,

	// This setting no longer applies. It is ignored.
	// Show the variable explorer in the Interactive window.
	"jupyter.showJupyterVariableExplorer": true,

	// Stop running cells if a cell throws an exception.
	"jupyter.stopOnError": true,

	// When debugging a cell, stop on the first line.
	"jupyter.stopOnFirstLineWhileDebugging": true,

	// Limit the amount of text in Interactive cell text output to this value. 0 to allow any amount of characters.
	"jupyter.textOutputLimit": 20000,

	// In the Interactive window and Notebook Editor theme matplotlib outputs to match the VS Code editor theme.
	"jupyter.themeMatplotlibPlots": false,

	// When running Jupyter locally, create a default empty Jupyter config for the Interactive window
	"jupyter.useDefaultConfigForJupyter": true,

	// Types to exclude from showing in the Interactive variable explorer
	"jupyter.variableExplorerExclude": "module;function;builtin_function_or_method",

	// Language to query mapping for returning the list of active variables in a Jupyter kernel. Used by the Variable Explorer in both the Interactive Window and Notebooks. Example: 
	// '[
	// {
	//    "language": "python",
	//    "query": "%who_ls",
	//   "parseExpr": "'(\\w+)'"
	// }
	// ]'
	"jupyter.variableQueries": [],

	// Defines the location and order of the sources where scripts files for Widgets are downloaded from (e.g. ipywidgest, bqplot, beakerx, ipyleaflet, etc). Not selecting any of these could result in widgets not rendering or function correctly. See [here](https://aka.ms/PVSCIPyWidgets) for more information. Once updated you will need to restart the Kernel.
	"jupyter.widgetScriptSources": [],

	// The command to run after cloning the dotfiles repository. Defaults to run the first file of `install.sh`, `install`, `bootstrap.sh`, `bootstrap`, `setup.sh` and `setup` found in the dotfiles repository's root folder.
	"dotfiles.installCommand": "",

	// URL of a dotfiles Git repository (e.g., https://github.com/owner/repository.git) or owner/repository of a GitHub repository.
	"dotfiles.repository": "",

	// The path to clone the dotfiles repository to. Defaults to `~/dotfiles`.
	"dotfiles.targetPath": "~/dotfiles",

	// Controls whether a Docker volume should be used to cache the VS Code server and extensions. Currently only applies to single container and not Docker Compose configurations.
	"remote.containers.cacheVolume": true,

	// Controls whether the Git configuration (`~/.gitconfig`) should be copied into the container. This is done after installing any `dotfiles.repository` and will not overwrite an existing Git configuration file.
	"remote.containers.copyGitConfig": true,

	// Configures the list of extensions to always install while creating a container.
	"remote.containers.defaultExtensions": [],

	// Docker (or Podman) executable name or path.
	"remote.containers.dockerPath": "docker",

	// The command to run after cloning the dotfiles repository for DevContainers. This overrides the common setting for the dotfiles install command.
	"remote.containers.dotfiles.installCommand": "",

	// URL of a dotfiles Git repository (e.g., https://github.com/owner/repository.git) or owner/repository of a GitHub repository for DevContainers. This overrides the common setting for the dotfiles repository.
	"remote.containers.dotfiles.repository": "",

	// The path to clone the dotfiles repository to for DevContainers. This overrides the common setting for the dotfiles target path.
	"remote.containers.dotfiles.targetPath": "",

	// Where to write the configuration for the Git credential helper.
	//  - system: Write to system config (`/etc/gitconfig`, requires root access).
	//  - global: Write to user config (`~/.gitconfig`).
	//  - none: Do not set a credential helper.
	"remote.containers.gitCredentialHelperConfigLocation": "global",

	// The log level for the extension.
	"remote.containers.logLevel": "info",

	// List of additional paths to search for [repository configurations](https://github.com/microsoft/vscode-dev-containers/tree/master/repository-containers).
	"remote.containers.repositoryConfigurationPaths": [],

	// The consistency level used for the workspace mount (existing containers must be rebuilt to take effect).
	//  - consistent: Perfect consistency.
	//  - cached: The host’s view is authoritative.
	//  - delegated: The container’s view is authoritative.
	"remote.containers.workspaceMountConsistency": "cached",

	// Add include paths from nan and node-addon-api when they're dependencies.
	"C_Cpp.addNodeAddonIncludePaths": false,

	// Controls whether files are automatically added to files.associations when they are the target of a navigation operation from a C/C++ file.
	"C_Cpp.autoAddFileAssociations": true,

	// Controls the auto-completion provider. "Default" uses the active IntelliSense engine. "Disabled" uses the word-based completion provided by Visual Studio Code.
	"C_Cpp.autocomplete": "Default",

	// If true, autocomplete will automatically add "(" after function calls, in which case ")" may also be added, depending on the value of the "editor.autoClosingBrackets" setting.
	"C_Cpp.autocompleteAddParentheses": false,

	// Name of the predefined style used as a fallback in case clang-format is invoked with style "file" but the .clang-format file is not found. Possible values are Visual Studio, LLVM, Google, Chromium, Mozilla, WebKit, none, or use {key: value, ...} to set specific parameters. For example, the "Visual Studio" style is similar to: { BasedOnStyle: LLVM, UseTab: Never, IndentWidth: 4, TabWidth: 4, BreakBeforeBraces: Allman, AllowShortIfStatementsOnASingleLine: false, IndentCaseLabels: false, ColumnLimit: 0, AccessModifierOffset: -4, NamespaceIndentation: All, FixNamespaceComments: false }
	"C_Cpp.clang_format_fallbackStyle": "Visual Studio",

	// The full path of the clang-format executable. If not specified, and clang-format is available in the environment path, that is used.  If not found in the environment path, a copy of clang-format bundled with the extension will be used.
	"C_Cpp.clang_format_path": "",

	// If set, overrides the include sorting behavior determined by the SortIncludes parameter.
	"C_Cpp.clang_format_sortIncludes": null,

	// Coding style, currently supports: Visual Studio, LLVM, Google, Chromium, Mozilla, WebKit. Use "file" to load the style from a .clang-format file in the current or parent directory. Use {key: value, ...} to set specific parameters. For example, the "Visual Studio" style is similar to: { BasedOnStyle: LLVM, UseTab: Never, IndentWidth: 4, TabWidth: 4, BreakBeforeBraces: Allman, AllowShortIfStatementsOnASingleLine: false, IndentCaseLabels: false, ColumnLimit: 0, AccessModifierOffset: -4, NamespaceIndentation: All, FixNamespaceComments: false }
	"C_Cpp.clang_format_style": "file",

	// If enabled, code folding ranges are provided by the language server.
	"C_Cpp.codeFolding": "Enabled",

	// Defines the editor behavior for when the Enter key is pressed inside a multiline or single line comment block.
	"C_Cpp.commentContinuationPatterns": [
		"/**"
	],

	// Determines whether pop up notifications will be shown when a configuration provider extension is unable to provide a configuration for a source file.
	"C_Cpp.configurationWarnings": "Enabled",

	// If true, debugger shell command substitution will use obsolete backtick (`).
	"C_Cpp.debugger.useBacktickCommandSubstitution": false,

	// The value to use in a configuration if "browse.databaseFilename" is either not specified or set to "${default}".
	"C_Cpp.default.browse.databaseFilename": "",

	// The value to use in a configuration if "browse.limitSymbolsToIncludedHeaders" is either not specified or set to "${default}".
	"C_Cpp.default.browse.limitSymbolsToIncludedHeaders": true,

	// The value to use in a configuration if "browse.path" is not specified, or the values to insert if "${default}" is present in "browse.path".
	"C_Cpp.default.browse.path": null,

	// The value to use in a configuration if "compileCommands" is either not specified, or set to "${default}".
	"C_Cpp.default.compileCommands": "",

	// The value to use in configuration if "compilerArgs" is either not specified or set to "${default}".
	"C_Cpp.default.compilerArgs": null,

	// The value to use in a configuration if "compilerPath" is either not specified or set to "${default}".
	"C_Cpp.default.compilerPath": null,

	// The value to use in a configuration if "configurationProvider" is either not specified or set to "${default}".
	"C_Cpp.default.configurationProvider": "",

	// The value to use in a configuration if "cppStandard" is either not specified or set to "${default}".
	"C_Cpp.default.cppStandard": "",

	// The value to use in a configuration if "cStandard" is either not specified or set to "${default}".
	"C_Cpp.default.cStandard": "",

	// The value to use in a configuration if "customConfigurationVariables" is not set, or the values to insert if "${default}" is present as a key in "customConfigurationVariables".
	"C_Cpp.default.customConfigurationVariables": null,

	// The value to use in a configuration if "defines" is not specified, or the values to insert if "${default}" is present in "defines".
	"C_Cpp.default.defines": null,

	// Controls whether the extension will report errors detected in c_cpp_properties.json.
	"C_Cpp.default.enableConfigurationSquiggles": true,

	// The value to use in a configuration if "forcedInclude" is not specified, or the values to insert if "${default}" is present in "forcedInclude".
	"C_Cpp.default.forcedInclude": null,

	// The value to use in a configuration if "includePath" is not specified in c_cpp_properties.json. If "includePath" is specified, add "${default}" to the array to insert the values from this setting.
	"C_Cpp.default.includePath": null,

	// The value to use in a configuration if "intelliSenseMode" is either not specified or set to "${default}".
	"C_Cpp.default.intelliSenseMode": "",

	// The value to use in a configuration if "macFrameworkPath" is not specified, or the values to insert if "${default}" is present in "macFrameworkPath".
	"C_Cpp.default.macFrameworkPath": null,

	// The value to use for the system include path. If set, it overrides the system include path acquired via "compilerPath" and "compileCommands" settings.
	"C_Cpp.default.systemIncludePath": null,

	// Version of the Windows SDK include path to use on Windows, e.g. '10.0.17134.0'.
	"C_Cpp.default.windowsSdkVersion": "",

	// Controls whether inactive preprocessor blocks are colored differently than active code. This setting has no effect if IntelliSense is disabled or if using the Default High Contrast theme.
	"C_Cpp.dimInactiveRegions": true,

	// If enabled, code is colorized based on IntelliSense. This setting only applies if intelliSenseEngine is set to "Default".
	"C_Cpp.enhancedColorization": "Enabled",

	// Controls whether suspected compile errors detected by the IntelliSense engine will be reported back to the editor. This setting is ignored by the Tag Parser engine.
	"C_Cpp.errorSquiggles": "EnabledIfIncludesResolve",

	// Instructs the extension when to use the "files.exclude" setting when determining which files should be added to the code navigation database while traversing through the paths in the "browse.path" array. "checkFolders" means that the exclusion filters will only be evaluated once per folder (individual files are not checked). "checkFilesAndFolders" means that the exclusion filters will be evaluated against every file and folder encountered. If your "files.exclude" setting only contains folders, then "checkFolders" is the best choice and will increase the speed at which the extension can initialize the code navigation database.
	"C_Cpp.exclusionPolicy": "checkFolders",

	// Controls whether "experimental" features are usable.
	"C_Cpp.experimentalFeatures": "Disabled",

	// Configure glob patterns for excluding folders (and files if "C_Cpp.exclusionPolicy" is changed). These are specific to the C/C++ extension and are in addition to "files.exclude", but unlike "files.exclude" they are not removed from the Explorer view. Read more about glob patterns [here](https://code.visualstudio.com/docs/editor/codebasics#_advanced-search-options).
	"C_Cpp.files.exclude": {
		"**/.vscode": true
	},

	// Configures the formatting engine
	//  - clangFormat: clang-format will be used to format code.
	//  - vcFormat: The Visual C++ formatting engine will be used to format code.
	//  - Default: clang-format will be used to format code.
	//  - Disabled: Code formatting will be disabled.
	"C_Cpp.formatting": "clangFormat",

	// Controls the background coloring of inactive preprocessor blocks. Input is in the form a hexadecimal color code or a valid Theme Color. If not set, this defaults to transparent. This setting only applies when inactive region dimming is enabled.
	"C_Cpp.inactiveRegionBackgroundColor": "",

	// Controls the font coloring of inactive preprocessor blocks. Input is in the form a hexadecimal color code or a valid Theme Color. If not set, this defaults to the syntax coloring scheme of the editor. This setting only applies when inactive region dimming is enabled.
	"C_Cpp.inactiveRegionForegroundColor": "",

	// Controls the opacity of inactive preprocessor blocks. Scales between 0.1 and 1.0. This setting only applies when inactive region dimming is enabled.
	"C_Cpp.inactiveRegionOpacity": 0.55,

	// Defines the folder path for cached precompiled headers used by IntelliSense. The default cache path is "%LocalAppData%/Microsoft/vscode-cpptools" on Windows, "$XDG_CACHE_HOME/vscode-cpptools/" on Linux (or "$HOME/.cache/vscode-cpptools/" if XDG_CACHE_HOME is not defined), and "$HOME/Library/Caches/vscode-cpptools/" on Mac. The default path will be used if no path is specified or if a specified path is invalid.
	"C_Cpp.intelliSenseCachePath": "",

	// Maximum size of the per-workspace hard drive space in megabytes (MB) for cached precompiled headers; the actual usage may fluctuate around this value. The default size is 5120 MB. Precompiled header caching is disabled when the size is 0.
	"C_Cpp.intelliSenseCacheSize": 5120,

	// Controls the IntelliSense provider. "Tag Parser" provides "fuzzy" results that are not context-aware. "Default" provides context-aware results. "Disabled" turns off C/C++ language service features.
	"C_Cpp.intelliSenseEngine": "Default",

	// Controls whether the IntelliSense engine will automatically switch to the Tag Parser for translation units containing #include errors.
	"C_Cpp.intelliSenseEngineFallback": "Disabled",

	// Memory usage limit in megabytes (MB) of an IntelliSense process. The default limit is 4096 MB and the maximum limit is 16 GB. The extension will shutdown and restart an IntelliSense process when it exceeds the limit.
	"C_Cpp.intelliSenseMemoryLimit": 4096,

	// Controls the delay in milliseconds before IntelliSense starts updating after a modification.
	"C_Cpp.intelliSenseUpdateDelay": 2000,

	// The verbosity of logging in the Output Panel. The order of levels from least verbose to most verbose is: None < Error < Warning < Information < Debug.
	"C_Cpp.loggingLevel": "Error",

	// The character used as a path separator for #include auto-completion results.
	"C_Cpp.preferredPathSeparator": "Forward Slash",

	// If true, 'Rename Symbol' will require a valid C/C++ identifier.
	"C_Cpp.renameRequiresIdentifier": true,

	// If true, tooltips of hover and auto-complete will only display certain labels of structured comments. Otherwise, all comments are displayed.
	"C_Cpp.simplifyStructuredComments": true,

	// If true, snippets are provided by the language server.
	"C_Cpp.suggestSnippets": true,

	// Set to "Insiders" to automatically download and install the latest Insiders builds of the extension, which include upcoming features and bug fixes.
	"C_Cpp.updateChannel": "Default",

	// Access specifiers are indented relative to class or struct definitions by the amount specified in the Editor: Tab Size setting
	"C_Cpp.vcFormat.indent.accessSpecifiers": false,

	// Braces are indented by the amount specified in the Editor: Tab Size setting.
	"C_Cpp.vcFormat.indent.braces": false,

	// Code inside case block is indented relative to its label by the amount specified in the Editor: Tab Size setting
	"C_Cpp.vcFormat.indent.caseContents": true,

	// Indent braces following a case statement by the amount specified in the Editor: Tab Size setting
	"C_Cpp.vcFormat.indent.caseContentsWhenBlock": false,

	// Labels are indented relative to switch statements by the amount specified in the Editor: Tab Size setting.
	"C_Cpp.vcFormat.indent.caseLabels": false,

	// The position of goto labels
	//  - oneLeft: Position goto labels to the left of the current code indentation, by the amount specified in the Editor: Tab Size setting
	//  - leftmostColumn: Position goto labels at the leftmost edge of the code.
	//  - none: Goto labels will not be formatted.
	"C_Cpp.vcFormat.indent.gotoLabels": "oneLeft",

	// Indent braces of lambdas used as function parameters relative to the start of the statement by the amount specified in the Editor: Tab Size setting
	"C_Cpp.vcFormat.indent.lambdaBracesWhenParameter": true,

	// Determines what new line indentation is relative to
	//  - outermostParenthesis: Indent new line relative to the outermost open parenthesis.
	//  - innermostParenthesis: Indent new line relative to the innermost open parenthesis.
	//  - statementBegin: Indent new line relative to the beginning of the current statement.
	"C_Cpp.vcFormat.indent.multiLineRelativeTo": "innermostParenthesis",

	// Code is indented relative to its enclosing namespace by the amount specified in the Editor: Tab Size setting
	"C_Cpp.vcFormat.indent.namespaceContents": true,

	// The position of preprocessor directives
	//  - oneLeft: Preprocessor directives are positioned to the left of the current code indentation, by the amount specified in the Editor: Tab Size setting
	//  - leftmostColumn: Preprocessor directives are positioned at the leftmost edge of the code.
	//  - none: Preprocessor directives will not be formatted.
	"C_Cpp.vcFormat.indent.preprocessor": "leftmostColumn",

	// Indentation of comments is not changed during formatting operations.
	"C_Cpp.vcFormat.indent.preserveComments": false,

	// In existing code, preserve the existing indent alignment of new lines within parentheses.
	"C_Cpp.vcFormat.indent.preserveWithinParentheses": false,

	// When a new line is typed, it is aligned under the opening parenthesis or based on `C_Cpp.vcFormat.indent.multiLineRelativeTo`.
	//  - alignToParenthesis: New line is aligned under the opening parenthesis.
	//  - indent: New line is indented based on `C_Cpp.vcFormat.indent.multiLineRelativeTo`.
	"C_Cpp.vcFormat.indent.withinParentheses": "indent",

	// Place 'catch' and similar keywords on a new line.
	"C_Cpp.vcFormat.newLine.beforeCatch": true,

	// Place 'else' on a new line.
	"C_Cpp.vcFormat.newLine.beforeElse": true,

	// The position of opening braces for control blocks
	//  - newLine: Opening braces are moved to a new line.
	//  - sameLine: Opening braces are kept on the same line and a space is added before each one.
	//  - ignore: Opening braces are not formatted.
	"C_Cpp.vcFormat.newLine.beforeOpenBrace.block": "ignore",

	// The position of opening braces for functions
	//  - newLine: Opening braces are moved to a new line.
	//  - sameLine: Opening braces are kept on the same line and a space is added before each one.
	//  - ignore: Opening braces are not formatted.
	"C_Cpp.vcFormat.newLine.beforeOpenBrace.function": "ignore",

	// The position of opening braces for lambda functions
	//  - newLine: Opening braces are moved to a new line.
	//  - sameLine: Opening braces are kept on the same line and a space is added before each one.
	//  - ignore: Opening braces are not formatted.
	"C_Cpp.vcFormat.newLine.beforeOpenBrace.lambda": "ignore",

	// The position of opening braces for namespaces
	//  - newLine: Opening braces are moved to a new line.
	//  - sameLine: Opening braces are kept on the same line and a space is added before each one.
	//  - ignore: Opening braces are not formatted.
	"C_Cpp.vcFormat.newLine.beforeOpenBrace.namespace": "ignore",

	// The position of opening braces for type definitions
	//  - newLine: Opening braces are moved to a new line.
	//  - sameLine: Opening braces are kept on the same line and a space is added before each one.
	//  - ignore: Opening braces are not formatted.
	"C_Cpp.vcFormat.newLine.beforeOpenBrace.type": "ignore",

	// Place 'while' in a do-while loop on a new line.
	"C_Cpp.vcFormat.newLine.beforeWhileInDoWhile": false,

	// For empty function bodies, move closing braces to the same line as opening braces.
	"C_Cpp.vcFormat.newLine.closeBraceSameLine.emptyFunction": false,

	// For empty types, move closing braces to the same line as opening braces.
	"C_Cpp.vcFormat.newLine.closeBraceSameLine.emptyType": false,

	// Place opening and closing braces for scopes on separate lines.
	"C_Cpp.vcFormat.newLine.scopeBracesOnSeparateLines": false,

	// A space is added after the closing parenthesis of a C-style cast.
	"C_Cpp.vcFormat.space.afterCastCloseParenthesis": false,

	// A space is added after every comma.
	"C_Cpp.vcFormat.space.afterComma": true,

	// A space is added between the keyword and opening parenthesis in control flow statements.
	"C_Cpp.vcFormat.space.afterKeywordsInControlFlowStatements": true,

	// Spaces around assignment operators
	//  - insert: A space is added before the operator and also after it.
	//  - remove: Spaces before and after the operator are removed.
	//  - ignore: Spaces are left as entered.
	"C_Cpp.vcFormat.space.aroundAssignmentOperator": "insert",

	// Spaces around binary operators
	//  - insert: A space is added before the operator and also after it.
	//  - remove: Spaces before and after the operator are removed.
	//  - ignore: Spaces are left as entered.
	"C_Cpp.vcFormat.space.aroundBinaryOperator": "insert",

	// Spaces around conditional operators
	//  - insert: A space is added before the operator and also after it.
	//  - remove: Spaces before and after the operator are removed.
	//  - ignore: Spaces are left as entered.
	"C_Cpp.vcFormat.space.aroundTernaryOperator": "insert",

	// A space is added before the opening braces of scope blocks.
	"C_Cpp.vcFormat.space.beforeBlockOpenBrace": true,

	// A space is added before every comma.
	"C_Cpp.vcFormat.space.beforeComma": false,

	// A space is added before the colon in constructor definitions.
	"C_Cpp.vcFormat.space.beforeConstructorColon": true,

	// When square brackets are empty, a space is added before the opening bracket.
	"C_Cpp.vcFormat.space.beforeEmptySquareBrackets": false,

	// Spacing between function names and opening parentheses of argument lists
	//  - insert: Add a space before the opening parenthesis of a function.
	//  - remove: Spaces before opening parenthesis of a function are removed.
	//  - ignore: Spaces are left as entered.
	"C_Cpp.vcFormat.space.beforeFunctionOpenParenthesis": "remove",

	// A space is added before the colon for inherited types in class definitions.
	"C_Cpp.vcFormat.space.beforeInheritanceColon": true,

	// A space is added before the opening brace of uniform initialization and initializer lists.
	"C_Cpp.vcFormat.space.beforeInitializerListOpenBrace": false,

	// A space is added before the opening parenthesis of lambda argument lists.
	"C_Cpp.vcFormat.space.beforeLambdaOpenParenthesis": false,

	// A space is added before opening square brackets.
	"C_Cpp.vcFormat.space.beforeOpenSquareBracket": false,

	// When braces are empty and on the same line, a space is inserted between them.
	"C_Cpp.vcFormat.space.betweenEmptyBraces": false,

	// When square brackets are empty, a space is inserted between them.
	"C_Cpp.vcFormat.space.betweenEmptyLambdaBrackets": false,

	// When a function parameter list is empty, a space is inserted between its parentheses.
	"C_Cpp.vcFormat.space.betweenEmptyParameterListParentheses": false,

	// When square brackets are empty, a space is inserted between them.
	"C_Cpp.vcFormat.space.betweenEmptySquareBrackets": false,

	// For multi-dimensional arrays, all space between brackets is removed. Other settings that control space are overridden.
	"C_Cpp.vcFormat.space.groupSquareBrackets": true,

	// A space is inserted after every semicolon.
	"C_Cpp.vcFormat.space.insertAfterSemicolon": false,

	// Spaces around pointer and reference operators
	//  - left: Pointer and reference operators are aligned to the left.
	//  - center: Pointer and reference operators are centered.
	//  - right: Pointer and reference operators are aligned to the right.
	//  - ignore: Pointer and reference operators are not formatted.
	"C_Cpp.vcFormat.space.pointerReferenceAlignment": "left",

	// Spaces around commas are preserved inside uniform initialization and initializer lists.
	"C_Cpp.vcFormat.space.preserveInInitializerList": true,

	// Spaces around member access operators, pointer-to-member operators, and scope resolution operators are removed.
	"C_Cpp.vcFormat.space.removeAroundMemberOperators": true,

	// Spaces between unary operators and operands are removed.
	"C_Cpp.vcFormat.space.removeAroundUnaryOperator": true,

	// Spaces are removed before every semicolon.
	"C_Cpp.vcFormat.space.removeBeforeSemicolon": true,

	// A space is added after the opening parenthesis and also before the closing parenthesis of a C-style cast.
	"C_Cpp.vcFormat.space.withinCastParentheses": false,

	// A space is added after the opening parenthesis and also before the closing parenthesis in control flow statements.
	"C_Cpp.vcFormat.space.withinControlFlowStatementParentheses": false,

	// A space is added after the opening parenthesis and also before the closing parenthesis of a parenthesized expression.
	"C_Cpp.vcFormat.space.withinExpressionParentheses": false,

	// A space is added after the opening brace and also before the closing brace of uniform initialization and initializer lists.
	"C_Cpp.vcFormat.space.withinInitializerListBraces": true,

	// A space is added after the opening square bracket and also before the closing square bracket.
	"C_Cpp.vcFormat.space.withinLambdaBrackets": false,

	// A space is added after the opening parenthesis and also before the closing parenthesis in function parameter lists.
	"C_Cpp.vcFormat.space.withinParameterListParentheses": false,

	// A space is added after the opening square bracket and also before the closing square bracket.
	"C_Cpp.vcFormat.space.withinSquareBrackets": false,

	// Wrapping options for blocks
	//  - oneLiners: A complete code block that is entered on one line is kept on one line, regardless of the values of any of the VC Format: New Line settings
	//  - allOneLineScopes: Any code where the opening and closing brace is entered on one line is kept on one line, regardless of the values of any of the VC Format: New Line settings
	//  - never: Code blocks are always formatted based on the values of the VC Format: New Line settings
	"C_Cpp.vcFormat.wrap.preserveBlocks": "oneLiners",

	// Enable integration services for the [vcpkg dependency manager](https://aka.ms/vcpkg/).
	"C_Cpp.vcpkg.enabled": true,

	// Controls whether parsing of the non-active workspace files uses sleeps to avoid using 100% CPU. The values highest/high/medium/low correspond to approximately 100/75/50/25% CPU usage.
	"C_Cpp.workspaceParsingPriority": "highest",

	// The symbols to include in the query results when 'Go to Symbol in Workspace' is invoked.
	"C_Cpp.workspaceSymbols": "Just My Code",

	// This setting is deprecated - please use `debug.javascript.usePreview` instead
	// Controls whether to delegate "chrome"-type launch configs to the js-debug extension.
	"debug.chrome.useV3": true,

	// Logging level in extension
	"react-native-tools.logLevel": "Info",

	// Subfolder in which the React Native project is located
	"react-native-tools.projectRoot": "",

	// The command name to be used to execute React Native CLI commands.
	"react-native-tools.reactNativeGlobalCommandName": "",

	// Environment variables passed to the program.
	"react-native.android.env.device": {},

	// Environment variables passed to the program.
	"react-native.android.env.simulator": {},

	// Absolute path to a file containing environment variable definitions.
	"react-native.android.envFile.device": "",

	// Absolute path to a file containing environment variable definitions.
	"react-native.android.envFile.simulator": "",

	// Arguments to be used for LogCat (The LogCat output will appear on an Output Channel). It can be an array such as: [":S", "ReactNative:V", "ReactNativeJS:V"]
	"react-native.android.logCatArguments": [
		"*:S",
		"ReactNative:V",
		"ReactNativeJS:V"
	],

	// Run arguments to be passed to 'react-native run-android' command
	"react-native.android.runArguments.device": [],

	// Run arguments to be passed to 'react-native run-android' command
	"react-native.android.runArguments.simulator": [],

	// Environment variables passed to the program.
	"react-native.ios.env.device": {},

	// Environment variables passed to the program.
	"react-native.ios.env.simulator": {},

	// Absolute path to a file containing environment variable definitions.
	"react-native.ios.envFile.device": "",

	// Absolute path to a file containing environment variable definitions.
	"react-native.ios.envFile.simulator": "",

	// Run arguments to be passed to 'react-native run-ios' command
	"react-native.ios.runArguments.device": [],

	// Run arguments to be passed to 'react-native run-ios' command
	"react-native.ios.runArguments.simulator": [],

	// React Native packager port
	"react-native.packager.port": 8081,

	// React Native Packager status representation in the VS Code status bar
	"react-native.packager.status-indicator": "Full",

	// Name(s) of the connection to auto connect on start
	"sqltools.autoConnectTo": [],

	// Auto open session file when connect
	"sqltools.autoOpenSessionFiles": true,

	// Languages with SQL codelens enabled.
	// 
	// You can use any language identifier defined on https://code.visualstudio.com/docs/languages/identifiers.
	// 
	// More info about codelens, see https://vscode-sqltools.mteixeira.dev/features/codelens
	"sqltools.codelensLanguages": [
		"sql"
	],

	// Languages with SQL completion enabled.
	// 
	// You can use any language identifier defined on https://code.visualstudio.com/docs/languages/identifiers.
	"sqltools.completionLanguages": [
		"sql"
	],

	// Group connection in two groups, 'Connected' and 'Not Connected'
	"sqltools.connectionExplorer.groupConnected": false,

	// Connections list
	"sqltools.connections": [],

	// Default export results mode.
	"sqltools.defaultExportType": "prompt",

	// Default open results mode.
	"sqltools.defaultOpenType": "prompt",

	// Dependency manager settings
	"sqltools.dependencyManager": {
		"packageManager": "npm",
		"installArgs": [
			"install"
		],
		"runScriptArgs": [
			"run"
		],
		"autoAccept": false
	},

	// Disable new release notifications.
	"sqltools.disableReleaseNotifications": false,

	// Flatten groups with has only one child
	"sqltools.flattenGroupsIfOne": false,

	// 
	"sqltools.format": {},

	// Languages with SQL formatting enabled.
	// 
	// You can use any language identifier defined on https://code.visualstudio.com/docs/languages/identifiers.
	"sqltools.formatLanguages": [
		"sql"
	],

	// Enable or disable hightlight current query under cursor.
	"sqltools.highlightQuery": true,

	// Number of queries to keep on History.
	"sqltools.historySize": 100,

	// Set environment variables to be passed to language server. Eg: ORACLE_HOME, PATH...
	"sqltools.languageServerEnv": {},

	// Enables query parameter checking
	"sqltools.queryParams.enableReplace": false,

	// RegEx used to identify query parameters
	"sqltools.queryParams.regex": "\\$[\\d]+|\\$\\[[\\d\\w]+\\]",

	// 
	"sqltools.results": {},

	// Folder for session files to be saved in
	"sqltools.sessionFilesFolder": "",

	// Toggle statusbar visibility.
	"sqltools.showStatusbar": true,

	// Sort columns criteria.
	"sqltools.sortColumns": "name",

	// Table columns should be expanded on load?
	"sqltools.tableTreeItemsExpanded": false,

	// Enable node runtime usage.
	"sqltools.useNodeRuntime": false,

	// Include completion for module export and auto import them
	"vetur.completion.autoImport": true,

	// Where Vetur source Scaffold Snippets from and how to indicate them. Set a source to "" to disable it.
	// 
	// - workspace: `<WORKSPACE>/.vscode/vetur/snippets`.
	// - user: `<USER-DATA-DIR>/User/snippets/vetur`.
	// - vetur: Bundled in Vetur.
	// 
	// The default is:
	// ```
	// "vetur.completion.scaffoldSnippetSources": {
	//   "workspace": "💼",
	//   "user": "🗒️",
	//   "vetur": "✌"
	// }
	// ```
	// 
	// Alternatively, you can do:
	// 
	// ```
	// "vetur.completion.scaffoldSnippetSources": {
	//   "workspace": "(W)",
	//   "user": "(U)",
	//   "vetur": "(V)"
	// }
	// ```
	// 
	// Read more: https://vuejs.github.io/vetur/snippet.html.
	"vetur.completion.scaffoldSnippetSources": {
		"workspace": "💼",
		"user": "🗒️",
		"vetur": "✌"
	},

	// Casing conversion for tag completion
	//  - initial: use the key in `components: {...}` as is for tag completion and do not force any casing
	//  - kebab: kebab-case completion for <my-tag>
	"vetur.completion.tagCasing": "kebab",

	// Log level for VLS
	//  - INFO: Only log info messages. This is the default.
	//  - DEBUG: Log info and debug messages.
	"vetur.dev.logLevel": "INFO",

	// Path to vls for Vetur developers. There are two ways of using it. 
	// 
	// 1. Clone vuejs/vetur from GitHub, build it and point it to the ABSOLUTE path of `/server`.
	// 2. `yarn global add vls` and point Vetur to the installed location (`yarn global dir` + node_modules/vls)
	"vetur.dev.vlsPath": "",

	// The port that VLS listens to. Can be used for attaching to the VLS Node process for debugging / profiling.
	"vetur.dev.vlsPort": -1,

	// Enable template interpolation service that offers hover / definition / references in Vue interpolations.
	"vetur.experimental.templateInterpolationService": false,

	// Default formatter for <style> region
	//  - none: disable formatting
	//  - prettier: css formatter using css parser from prettier
	"vetur.format.defaultFormatter.css": "prettier",

	// Default formatter for <template> region
	//  - none: disable formatting
	//  - prettyhtml: 🚧 [DEPRECATED] prettyhtml
	//  - js-beautify-html: html formatter of js-beautify
	//  - prettier: prettier
	"vetur.format.defaultFormatter.html": "prettier",

	// Default formatter for <script> region
	//  - none: disable formatting
	//  - prettier: js formatter from prettier
	//  - prettier-eslint: prettier-eslint
	//  - vscode-typescript: js formatter from TypeScript
	"vetur.format.defaultFormatter.js": "prettier",

	// Default formatter for <style lang='less'> region
	//  - none: disable formatting
	//  - prettier: less formatter using postcss parser from prettier
	"vetur.format.defaultFormatter.less": "prettier",

	// Default formatter for <style lang='postcss'> region
	//  - none: disable formatting
	//  - prettier: postcss formatter using css parser from prettier
	"vetur.format.defaultFormatter.postcss": "prettier",

	// Default formatter for <template lang='pug'> region
	//  - none: disable formatting
	//  - prettier: prettier
	"vetur.format.defaultFormatter.pug": "prettier",

	// Default formatter for <style lang='sass'> region
	//  - none: disable formatting
	//  - sass-formatter: sass formatter
	"vetur.format.defaultFormatter.sass": "sass-formatter",

	// Default formatter for <style lang='scss'> region
	//  - none: disable formatting
	//  - prettier: scss formatter using scss parser from prettier
	"vetur.format.defaultFormatter.scss": "prettier",

	// Default formatter for <style lang='stylus'> region
	//  - none: disable formatting
	//  - stylus-supremacy: stylus formatter from stylus-supremacy
	"vetur.format.defaultFormatter.stylus": "stylus-supremacy",

	// Default formatter for <script> region
	//  - none: disable formatting
	//  - prettier: ts formatter using typescript parser from prettier
	//  - prettier-tslint: ts formatter from TypeScript
	"vetur.format.defaultFormatter.ts": "prettier",

	// Options for all default formatters
	"vetur.format.defaultFormatterOptions": {
		"js-beautify-html": {
			"wrap_attributes": "force-expand-multiline"
		},
		"prettyhtml": {
			"printWidth": 100,
			"singleQuote": false,
			"wrapAttributes": false,
			"sortAttributes": false
		}
	},

	// Enable/disable the Vetur document formatter.
	"vetur.format.enable": true,

	// Number of spaces per indentation level. Inherited by all formatters.
	"vetur.format.options.tabSize": 2,

	// Use tabs for indentation. Inherited by all formatters.
	"vetur.format.options.useTabs": false,

	// Whether to have initial indent for <script> region
	"vetur.format.scriptInitialIndent": false,

	// Whether to have initial indent for <style> region
	"vetur.format.styleInitialIndent": false,

	// Mapping from custom block tag name to language name. Used for generating grammar to support syntax highlighting for custom blocks.
	"vetur.grammar.customBlocks": {
		"docs": "md",
		"i18n": "json"
	},

	// Vetur will warn about not setup correctly for the project. You can disable it.
	"vetur.ignoreProjectWarning": false,

	// Whether to enable codeActions
	"vetur.languageFeatures.codeActions": true,

	// Whether to automatic updating import path when rename or move a file
	"vetur.languageFeatures.updateImportOnFileMove": true,

	// Traces the communication between VS Code and Vue Language Server.
	"vetur.trace.server": "off",

	// Use dependencies from workspace. Currently only for TypeScript.
	"vetur.useWorkspaceDependencies": false,

	// Validate interpolations in <template> region using TypeScript language service
	"vetur.validation.interpolation": true,

	// Validate js/ts in <script>
	"vetur.validation.script": true,

	// Validate css/scss/less/postcss in <style>
	"vetur.validation.style": true,

	// Validate vue-html in <template> using eslint-plugin-vue
	"vetur.validation.template": true,

	// Validate props usage in <template> region. Show error/warning for not passing declared props to child components and show error for passing wrongly typed interpolation expressions
	"vetur.validation.templateProps": false,

	// Specifies how long (in minutes) version suggestions will be cached. Setting the duration to 0 will disable caching.
	"versionlens.caching.duration": 3,

	// Defines the api to use for composer package searching.
	"versionlens.composer.apiUrl": "https://repo.packagist.org/p",

	// Specifies how long (in minutes) version suggestions will be cached.
	"versionlens.composer.caching.duration": null,

	// Defines which properties in composer.json should be parsed by this extension
	"versionlens.composer.dependencyProperties": [
		"require",
		"require-dev"
	],

	// When set to 'true' the server will reject any connection which is not authorized within the list of supplied CAs. Set to false for unsigned. Overrides 'versionlens.http.strictSSL'
	"versionlens.composer.http.strictSSL": null,

	// Specifies how long (in minutes) version suggestions will be cached.
	"versionlens.dotnet.caching.duration": null,

	// Defines which properties in project.json should be parsed by this extension
	"versionlens.dotnet.dependencyProperties": [
		"PackageReference",
		"DotNetCliToolReference"
	],

	// When set to 'true' the server will reject any connection which is not authorized within the list of supplied CAs. Set to false for unsigned. Overrides 'versionlens.http.strictSSL'
	"versionlens.dotnet.http.strictSSL": null,

	// Defines which nuget source to use for package searching. Has to be a v3 'service index' endpoint. e.g. https://api.nuget.org/v3/index.json. Defaults to the sources output by `dotnet nuget list source`
	"versionlens.dotnet.nuget.sources": [],

	// Define which common tagged versions you want to see. i.e. [alpha, beta]. If you don't specify any dist tags then all the dist-tags for a package will be shown.
	"versionlens.dotnet.tagFilter": [],

	// Defines the api to use for dub package searching.
	"versionlens.dub.apiUrl": "https://code.dlang.org/api/packages",

	// Specifies how long (in minutes) version suggestions will be cached.
	"versionlens.dub.caching.duration": null,

	// Defines which properties in dub.json should be parsed by this extension
	"versionlens.dub.dependencyProperties": [
		"dependencies",
		"versions"
	],

	// When set to 'true' the server will reject any connection which is not authorized within the list of supplied CAs. Set to false for unsigned. Overrides 'versionlens.http.strictSSL'
	"versionlens.dub.http.strictSSL": null,

	// Used for making basic read only github api requests. To generate a token see https://help.github.com/articles/creating-an-access-token-for-command-line-use/#creating-a-token. When no token is provided then access to the github api is rate limited to 60 requests every 10 minutes or so.
	"versionlens.github.accessToken": "",

	// When set to 'true' the server will reject any connection which is not authorized within the list of supplied CAs. Set to false for unsigned.
	"versionlens.http.strictSSL": true,

	// Sets the level of logs to be written to the VersionLens output channel.
	"versionlens.logging.level": "error",

	// Defines the api to use for maven package searching.
	"versionlens.maven.apiUrl": "",

	// Specifies how long (in minutes) version suggestions will be cached.
	"versionlens.maven.caching.duration": null,

	// Defines which properties in pom.xml should be parsed by this extension
	"versionlens.maven.dependencyProperties": [
		"dependency",
		"parent"
	],

	// When set to 'true' the server will reject any connection which is not authorized within the list of supplied CAs. Set to false for unsigned. Overrides 'versionlens.http.strictSSL'
	"versionlens.maven.http.strictSSL": null,

	// Specifies how long (in minutes) version suggestions will be cached.
	"versionlens.npm.caching.duration": null,

	// Defines which properties in package.json should be parsed by this extension
	"versionlens.npm.dependencyProperties": [
		"dependencies",
		"devDependencies",
		"peerDependencies",
		"optionalDependencies"
	],

	// Define which common dist tags you want to see. i.e. [alpha, beta]. If you don't specify any dist tags then all the dist-tags for a package will be shown.
	"versionlens.npm.distTagFilter": [],

	// When set to 'true' the server will reject any connection which is not authorized within the list of supplied CAs. Set to false for unsigned. Overrides 'versionlens.http.strictSSL'
	"versionlens.npm.http.strictSSL": null,

	// Defines the pub api to use for package searching.
	"versionlens.pub.apiUrl": "https://pub.dev",

	// Specifies how long (in minutes) version suggestions will be cached.
	"versionlens.pub.caching.duration": null,

	// Defines which properties in pubspec.yaml should be parsed by this extension
	"versionlens.pub.dependencyProperties": [
		"dependencies",
		"dev_dependencies"
	],

	// When set to 'true' the server will reject any connection which is not authorized within the list of supplied CAs. Set to false for unsigned. Overrides 'versionlens.http.strictSSL'
	"versionlens.pub.http.strictSSL": null,

	// Show version suggestions by default on vscode start up.
	"versionlens.suggestions.showOnStartup": false,

	// Show version prerelease suggestions by default on vscode start up.
	"versionlens.suggestions.showPrereleasesOnStartup": false,

	// Activate the PlatformIO extension only when a PlatformIO-based project (with `platformio.ini`) is opened in the workspace
	"platformio-ide.activateOnlyOnPlatformIOProject": false,

	// Automatically activate project depending on an active opened text editor
	"platformio-ide.activateProjectOnTextEditorChange": false,

	// Automatically close Serial Port Monitor before uploading/testing
	"platformio-ide.autoCloseSerialMonitor": true,

	// Automatically open the `platformio.ini` file from a project when no other editors are opened
	"platformio-ide.autoOpenPlatformIOIniFile": true,

	// Automatically preload ALL project environment tasks
	"platformio-ide.autoPreloadEnvTasks": false,

	// Automatically rebuild the project IntelliSense index when platformio.ini is changed or when new libraries are installed.
	"platformio-ide.autoRebuildAutocompleteIndex": true,

	// The build task (label) used for the `Build` button in the bottom toolbar and for key bindings. The default is `PlatformIO: Build`.
	"platformio-ide.buildTask": null,

	// Custom PATH for the `platformio` command, if you prefer to use a custom version of PlatformIO Core. Fill in the result of the system terminal command `echo $PATH` (Unix) / `echo %PATH%` (Windows).
	"platformio-ide.customPATH": null,

	// Custom base URL of the Python Package Index (default `https://pypi.org/simple`)
	"platformio-ide.customPyPiIndexUrl": null,

	// Disable showing PIO Home at startup
	"platformio-ide.disablePIOHomeStartup": false,

	// Disable the PlatformIO toolbar
	"platformio-ide.disableToolbar": false,

	// Force the `platformio-ide.upload` command to use the 'Upload and Monitor' task
	"platformio-ide.forceUploadAndMonitor": false,

	// PIO Home server HTTP host (default is 127.0.0.1, but in case of dockerized environments 0.0.0.0)
	"platformio-ide.pioHomeServerHttpHost": "127.0.0.1",

	// PIO Home server HTTP port (the default value 0 automatically assigns a free port in the range [8010..8100])
	"platformio-ide.pioHomeServerHttpPort": 0,

	// Time in milliseconds after which the Serial Port Monitor is reopened
	"platformio-ide.reopenSerialMonitorDelay": 0,

	// Use a built-in PlatformIO Core
	"platformio-ide.useBuiltinPIOCore": true,

	// Use a portable Python 3 Interpreter if available
	"platformio-ide.useBuiltinPython": true,

	// Use a development version of PlatformIO Core
	"platformio-ide.useDevelopmentPIOCore": false,

	// Convert stringified booleans into booleans, and back.
	"quicktype.inferBooleanStrings": true,

	// Use date-time types for strings that look like date-times.
	"quicktype.inferDateTimes": true,

	// Infer enums when there aren't many different string values.
	"quicktype.inferEnums": true,

	// Convert stringified integers into integers, and back.
	"quicktype.inferIntegerStrings": true,

	// Infer maps when object keys look like map keys.
	"quicktype.inferMaps": true,

	// Use UUID types for strings that look like UUIDs.
	"quicktype.inferUuids": true,

	// Produce just types, or (de-)serialization code as well?
	"quicktype.justTypes": true,

	// Data Preview Charts library to use: d3fc || highcharts
	"data.preview.charts.plugin": "d3fc",

	// Create '.json' data files for Arrow, Avro, Parquet & Excel binary data formats
	"data.preview.create.json.files": false,

	// Create '.schema.json' file for Arrow & Avro metadata binary data formats
	"data.preview.create.json.schema": true,

	// Data Preview run log level: info || debug
	"data.preview.log.level": "info",

	// Opens created data file Content Editor on Data Save.
	"data.preview.openSavedFileEditor": true,

	// Data Preview UI Theme: light, dark, dense.light, dense.dark || vaporwave (hight constrast blue theme)
	"data.preview.theme": "dark",

	// Method to use for code completion. Use `false` to disable or if another extension provides this feature.
	"ruby.codeCompletion": false,

	// Which system to use for formatting. Use `false` to disable or if another extension provides this feature.
	"ruby.format": false,

	// Method to use for intellisense (go to definition, etc.). Use `false` to disable or if another extension provides this feature.
	"ruby.intellisense": false,

	// Path to the Ruby interpreter.  Set this to an absolute path to select from multiple installed Ruby versions.
	"ruby.interpreter.commandPath": "ruby",

	// Language server configuration
	"ruby.languageServer": {},

	// Set individual ruby linters to use
	"ruby.lint": {},

	// Time (ms) to wait after keypress before running enabled linters. Ensures linters are only run when typing has finished and not for every keypress. Not supported in language server
	"ruby.lintDebounceTime": 500,

	// Defines where the Ruby extension will look to find Modules, Classes and methods.
	"ruby.locate": {
		"exclude": "{**/@(test|spec|tmp|.*),**/@(test|spec|tmp|.*)/**,**/*_spec.rb}",
		"include": "**/*.rb"
	},

	// Path to the bundler executable (used if useBundler is true)
	"ruby.pathToBundler": "bundle",

	// Path to the rct-complete command.  Set this to an absolute path to select from multiple installed Ruby versions.
	"ruby.rctComplete.commandPath": "rct-complete",

	// Whether ruby tools should be started using Bundler
	"ruby.useBundler": false,

	// Use built-in language server
	"ruby.useLanguageServer": false,

	// Enable/disable the 'auto build'
	"java.autobuild.enabled": true,

	// Generate method comments when generating the methods.
	"java.codeGeneration.generateComments": false,

	// Use 'instanceof' to compare types when generating the hashCode and equals methods.
	"java.codeGeneration.hashCodeEquals.useInstanceof": false,

	// Use Objects.hash and Objects.equals when generating the hashCode and equals methods. This setting only applies to Java 7 and higher.
	"java.codeGeneration.hashCodeEquals.useJava7Objects": false,

	// Specifies the insertion location of the code generated by source actions.
	//  - afterCursor: Insert the generated code after the member where the cursor is located.
	//  - beforeCursor: Insert the generated code before the member where the cursor is located.
	//  - lastMember: Insert the generated code as the last member of the target type.
	"java.codeGeneration.insertionLocation": "afterCursor",

	// The code style for generating the toString method.
	//  - STRING_CONCATENATION: String concatenation
	//  - STRING_BUILDER: StringBuilder/StringBuffer
	//  - STRING_BUILDER_CHAINED: StringBuilder/StringBuffer - chained call
	//  - STRING_FORMAT: String.format/MessageFormat
	"java.codeGeneration.toString.codeStyle": "STRING_CONCATENATION",

	// Limit number of items in arrays/collections/maps to list, if 0 then list all.
	"java.codeGeneration.toString.limitElements": 0,

	// List contents of arrays instead of using native toString().
	"java.codeGeneration.toString.listArrayContents": true,

	// Skip null values when generating the toString method.
	"java.codeGeneration.toString.skipNullValues": false,

	// The template for generating the toString method.
	"java.codeGeneration.toString.template": "${object.className} [${member.name()}=${member.value}, ${otherMembers}]",

	// Use blocks in 'if' statements when generating the methods.
	"java.codeGeneration.useBlocks": false,

	// Enable/disable code completion support
	"java.completion.enabled": true,

	// Defines a list of static members or types with static members. Content assist will propose those static members even if the import is missing.
	"java.completion.favoriteStaticMembers": [
		"org.junit.Assert.*",
		"org.junit.Assume.*",
		"org.junit.jupiter.api.Assertions.*",
		"org.junit.jupiter.api.Assumptions.*",
		"org.junit.jupiter.api.DynamicContainer.*",
		"org.junit.jupiter.api.DynamicTest.*",
		"org.mockito.Mockito.*",
		"org.mockito.ArgumentMatchers.*",
		"org.mockito.Answers.*"
	],

	// Defines the type filters. All types whose fully qualified name matches the selected filter strings will be ignored in content assist or quick fix proposals and when organizing imports. For example 'java.awt.*' will hide all types from the awt packages.
	"java.completion.filteredTypes": [
		"java.awt.*",
		"com.sun.*",
		"sun.*"
	],

	// When set to true, method arguments are guessed when a method is selected from as list of code assist proposals.
	"java.completion.guessMethodArguments": false,

	// Defines the sorting order of import statements. A package or type name prefix (e.g. 'org.eclipse') is a valid entry. An import is always added to the most specific group.
	"java.completion.importOrder": [
		"java",
		"javax",
		"com",
		"org"
	],

	// Maximum number of completion results (not including snippets).
	// `0` (the default value) disables the limit, all results are returned. In case of performance problems, consider setting a sensible limit.
	"java.completion.maxResults": 0,

	// When set to true, code completion overwrites the current text. When set to false, code is simply added instead.
	"java.completion.overwrite": true,

	// Controls whether to exclude extension-generated project settings files (.project, .classpath, .factorypath, .settings/) from the file explorer.
	"java.configuration.checkProjectSettingsExclusions": true,

	// Path to Maven's global settings.xml
	"java.configuration.maven.globalSettings": null,

	// Path to Maven's user settings.xml
	"java.configuration.maven.userSettings": null,

	// Map Java Execution Environments to local JDKs.
	"java.configuration.runtimes": [],

	// Specifies how modifications on build files update the Java classpath/configuration
	"java.configuration.updateBuildConfiguration": "interactive",

	// Preferred content provider (a 3rd party decompiler id, usually)
	"java.contentProvider.preferred": null,

	// Enable/disable download of Maven source artifacts for Eclipse projects.
	"java.eclipse.downloadSources": false,

	// Specifies the severity of the message when the classpath is incomplete for a Java file
	"java.errors.incompleteClasspath.severity": "warning",

	// Enable/disable smart folding range support. If disabled, it will use the default indentation-based folding range provided by VS Code.
	"java.foldingRange.enabled": true,

	// Includes the comments during code formatting.
	"java.format.comments.enabled": true,

	// Enable/disable default Java formatter
	"java.format.enabled": true,

	// Enable/disable automatic block formatting when typing `;`, `<enter>` or `}`
	"java.format.onType.enabled": true,

	// Optional formatter profile name from the Eclipse formatter settings.
	"java.format.settings.profile": null,

	// Specifies the url or file path to the [Eclipse formatter xml settings](https://github.com/redhat-developer/vscode-java/wiki/Formatter-settings).
	"java.format.settings.url": null,

	// Specifies the folder path to the JDK (11 or more recent) used to launch the Java Language Server.
	// On Windows, backslashes must be escaped, i.e.
	// "java.home":"C:\\Program Files\\Java\\jdk11.0_8"
	"java.home": null,

	// Enable/disable the implementations code lens.
	"java.implementationsCodeLens.enabled": false,

	// Configure glob patterns for excluding folders. Use `!` to negate patterns to allow subfolders imports. You have to include a parent directory. The order is important.
	"java.import.exclusions": [
		"**/node_modules/**",
		"**/.metadata/**",
		"**/archetype-resources/**",
		"**/META-INF/maven/**"
	],

	// Arguments to pass to Gradle.
	"java.import.gradle.arguments": null,

	// Enable/disable the Gradle importer.
	"java.import.gradle.enabled": true,

	// Use Gradle from the specified local installation directory or GRADLE_HOME if the Gradle wrapper is missing or disabled and no 'java.import.gradle.version' is specified.
	"java.import.gradle.home": null,

	// The location to the JVM used to run the Gradle daemon.
	"java.import.gradle.java.home": null,

	// JVM arguments to pass to Gradle.
	"java.import.gradle.jvmArguments": null,

	// Enable/disable the Gradle offline mode.
	"java.import.gradle.offline.enabled": false,

	// Setting for GRADLE_USER_HOME.
	"java.import.gradle.user.home": null,

	// Use Gradle from the specific version if the Gradle wrapper is missing or disabled.
	"java.import.gradle.version": null,

	// Use Gradle from the 'gradle-wrapper.properties' file.
	"java.import.gradle.wrapper.enabled": true,

	// Enable/disable the Maven importer.
	"java.import.maven.enabled": true,

	// Defines allowed/disallowed SHA-256 checksums of Gradle Wrappers
	"java.imports.gradle.wrapper.checksums": [],

	// Specifies extra VM arguments used to launch the Java Language Server. Eg. use `-XX:+UseParallelGC -XX:GCTimeRatio=4 -XX:AdaptiveSizePolicyWeight=90 -Dsun.zip.disableMemoryMapping=true -Xmx1G -Xms100m ` to optimize memory usage for container environments with the parallel garbage collector
	"java.jdt.ls.vmargs": "-XX:+UseParallelGC -XX:GCTimeRatio=4 -XX:AdaptiveSizePolicyWeight=90 -Dsun.zip.disableMemoryMapping=true -Xmx1G -Xms100m",

	// Enable/disable download of Maven source artifacts as part of importing Maven projects.
	"java.maven.downloadSources": false,

	// Force update of Snapshots/Releases.
	"java.maven.updateSnapshots": false,

	// Max simultaneous project builds
	"java.maxConcurrentBuilds": 1,

	// [Experimental] Enable/disable progress reports from background processes on the server.
	"java.progressReports.enabled": true,

	// Enable/disable the server-mode switch information, when Java projects import is skipped on startup.
	"java.project.importHint": true,

	// Specifies whether to import the Java projects, when opening the folder in Hybrid mode for the first time.
	"java.project.importOnFirstTimeStartup": "interactive",

	// A relative path to the workspace where stores the compiled output. `Only` effective in the `WORKSPACE` scope. The setting will `NOT` affect Maven or Gradle project.
	"java.project.outputPath": "",

	// Configure glob patterns for referencing local libraries to a Java project.
	"java.project.referencedLibraries": [
		"lib/**/*.jar"
	],

	// Excludes files and folders from being refreshed by the Java Language Server, which can improve the overall performance. For example, ["node_modules",".git"] will exclude all files and folders named 'node_modules' or '.git'. Defaults to ["node_modules",".git"].
	"java.project.resourceFilters": [
		"node_modules",
		".git"
	],

	// Relative paths to the workspace where stores the source files. `Only` effective in the `WORKSPACE` scope. The setting will `NOT` affect Maven or Gradle project.
	"java.project.sourcePaths": [],

	// Show the recommended Dependency Analytics extension.
	"java.recommendations.dependency.analytics.show": true,

	// Include getter, setter and builder/constructor when finding references.
	"java.references.includeAccessors": true,

	// Include the decompiled sources when finding references.
	"java.references.includeDecompiledSources": true,

	// Enable/disable the references code lens.
	"java.referencesCodeLens.enabled": false,

	// Enable/disable auto organize imports on save action
	"java.saveActions.organizeImports": false,

	// Enable/disable Smart Selection support for Java. Disabling this option will not affect the VS Code built-in word-based and bracket-based smart selection.
	"java.selectionRange.enabled": true,

	// Enable/disable the semantic highlighting.
	"java.semanticHighlighting.enabled": true,

	// The launch mode for the Java extension
	//  - Standard: Provides full features such as intellisense, refactoring, building, Maven/Gradle support etc.
	//  - LightWeight: Starts a syntax server with lower start-up cost. Only provides syntax features such as outline, navigation, javadoc, syntax errors.
	//  - Hybrid: Provides full features with better responsiveness. It starts a standard language server and a secondary syntax server. The syntax server provides syntax features until the standard server is ready.
	"java.server.launchMode": "Hybrid",

	// Specifies the url or file path to the workspace Java settings. See [Setting Global Preferences](https://github.com/redhat-developer/vscode-java/wiki/Settings-Global-Preferences)
	"java.settings.url": null,

	// Automatically show build status on startup.
	"java.showBuildStatusOnStart.enabled": false,

	// Enable/disable the signature help.
	"java.signatureHelp.enabled": false,

	// Specifies the number of imports added before a star-import declaration is used.
	"java.sources.organizeImports.starThreshold": 99,

	// Specifies the number of static imports added before a star-import declaration is used.
	"java.sources.organizeImports.staticStarThreshold": 99,

	// Specifies the file header comment for new Java file. Supports configuring multi-line comments with an array of strings, and using ${variable} to reference the [predefined variables](command:_java.templateVariables).
	"java.templates.fileHeader": [],

	// Specifies the type comment for new Java type. Supports configuring multi-line comments with an array of strings, and using ${variable} to reference the [predefined variables](command:_java.templateVariables).
	"java.templates.typeComment": [],

	// Traces the communication between VS Code and the Java language server.
	"java.trace.server": "off",

	// Enable/disable lazy loading the content in type hierarchy. Lazy loading could save a lot of loading time but every type should be expanded manually to load its content.
	"java.typeHierarchy.lazyLoad": false,

	// Enable/disable completion feature
	"yaml.completion": true,

	// Custom tags for the parser to use
	"yaml.customTags": [],

	// Print spaces between brackets in objects
	"yaml.format.bracketSpacing": true,

	// Enable/disable default YAML formatter
	"yaml.format.enable": true,

	// Specify the line length that the printer will wrap on
	"yaml.format.printWidth": 80,

	// Always: wrap prose if it exeeds the print width, Never: never wrap the prose, Preserve: wrap prose as-is
	"yaml.format.proseWrap": "preserve",

	// Use single quotes instead of double quotes
	"yaml.format.singleQuote": false,

	// Enable/disable hover feature
	"yaml.hover": true,

	// Associate schemas to YAML files in the current workspace
	"yaml.schemas": {},

	// Automatically pull available YAML schemas from JSON Schema Store
	"yaml.schemaStore.enable": true,

	// Traces the communication between VSCode and the YAML language service.
	"yaml.trace.server": "off",

	// Enable/disable validation feature
	"yaml.validate": true,

	// Qiniu AccessKey
	"markdown-preview-enhanced.AccessKey": "",

	// Automatically show preview of markdown being edited.
	"markdown-preview-enhanced.automaticallyShowPreviewOfMarkdownBeingEdited": false,

	// In Markdown, a single newline character doesn't cause a line break in the generated HTML. In GitHub Flavored Markdown, that is not true. Enable this config option to insert line breaks in rendered HTML for single newlines in Markdown source.
	"markdown-preview-enhanced.breakOnSingleNewLine": true,

	// Qiniu Bucket
	"markdown-preview-enhanced.Bucket": "",

	// Chrome executable path, which is used for Puppeteer export. Leaving it empty means the path will be found automatically.
	"markdown-preview-enhanced.chromePath": "",

	// Code block theme. If `auto.css` is chosen, then the code block theme that best matches the current preview theme will be picked.
	"markdown-preview-enhanced.codeBlockTheme": "auto.css",

	// The configuration directory path. Leave it empty to use '~/.mume' as the config path. Please reload vscode to take effect.
	"markdown-preview-enhanced.configPath": "",

	// Qiniu Domain
	"markdown-preview-enhanced.Domain": "http://",

	// Enable CriticMarkup syntax. Only works with markdown-it parser. Please check http://criticmarkup.com/users-guide.php for more information.
	"markdown-preview-enhanced.enableCriticMarkupSyntax": false,

	// Enable emoji & font-awesome plugin. This only works for markdown-it parser, but not pandoc parser.
	"markdown-preview-enhanced.enableEmojiSyntax": true,

	// Enable extended table syntax to support merging table cells.
	"markdown-preview-enhanced.enableExtendedTableSyntax": false,

	//  Enables transform audio video link to to html5 embed audio video tags.
	"markdown-preview-enhanced.enableHTML5Embed": false,

	// Enable or disable conversion of URL-like text to links in the markdown preview.
	"markdown-preview-enhanced.enableLinkify": true,

	// Enables executing code chunks and importing javascript files.
	// ⚠️ Please use this feature with caution because it may put your security at risk! Your machine can get hacked if someone makes you open a markdown with malicious code while script execution is enabled.
	"markdown-preview-enhanced.enableScriptExecution": false,

	// Enable smartypants and other sweet transforms.
	"markdown-preview-enhanced.enableTypographer": false,

	// Enable Wiki Link syntax support. More information can be found at https://help.github.com/articles/adding-links-to-wikis/
	"markdown-preview-enhanced.enableWikiLinkSyntax": true,

	// Front matter rendering option
	"markdown-preview-enhanced.frontMatterRenderingOption": "none",

	// HTML attributes to pass to audio tags.
	"markdown-preview-enhanced.HTML5EmbedAudioAttributes": "controls preload=\"metadata\" width=\"320\"",

	// When true embed media with http:// schema in URLs. When false ignore and don't embed them.
	"markdown-preview-enhanced.HTML5EmbedIsAllowedHttp": false,

	//  Enables video/audio embed with ![]() syntax (default).
	"markdown-preview-enhanced.HTML5EmbedUseImageSyntax": true,

	// Enables video/audio embed with []() syntax.
	"markdown-preview-enhanced.HTML5EmbedUseLinkSyntax": false,

	// HTML attributes to pass to video tags.
	"markdown-preview-enhanced.HTML5EmbedVideoAttributes": "controls preload=\"metadata\" width=\"320\" height=\"240\"",

	// When using Image Helper to copy images, by default images will be copied to root image folder path '/assets'
	"markdown-preview-enhanced.imageFolderPath": "/assets",

	// ImageMagick command line path. Should be either `magick` or `convert`. Leaving it empty means the path will be found automatically.
	"markdown-preview-enhanced.imageMagickPath": "",

	// You can choose different image uploader to upload image
	"markdown-preview-enhanced.imageUploader": "imgur",

	// Default latex engine for Pandoc export and latex code chunk.
	"markdown-preview-enhanced.latexEngine": "pdflatex",

	// Re-render the preview as the contents of the source changes, without requiring the source buffer to be saved. If disabled, the preview is re-rendered only when the buffer is saved to disk.
	"markdown-preview-enhanced.liveUpdate": true,

	// Use customized Math expression block delimiters.
	"markdown-preview-enhanced.mathBlockDelimiters": [
		[
			"$$",
			"$$"
		],
		[
			"\\[",
			"\\]"
		]
	],

	// Use customized Math expression inline delimiters.
	"markdown-preview-enhanced.mathInlineDelimiters": [
		[
			"$",
			"$"
		],
		[
			"\\(",
			"\\)"
		]
	],

	// Choose the Math expression rendering method option for GFM markdown export (Save as Markdown).
	"markdown-preview-enhanced.mathRenderingOnlineService": "https://latex.codecogs.com/gif.latex",

	// Choose the Math expression rendering method here. You can also disable math rendering if you want by choosing 'None'.
	"markdown-preview-enhanced.mathRenderingOption": "KaTeX",

	// Mermaid theme, you can choose one from ["mermaid.css", "mermaid.dark.css", "mermaid.forest.css"]
	"markdown-preview-enhanced.mermaidTheme": "default",

	// Args passed to pandoc command e.g. ["--smart", "--filter=/bin/exe"] Please use long argument names.
	"markdown-preview-enhanced.pandocArguments": [],

	// The pandoc markdown flavor you want
	"markdown-preview-enhanced.pandocMarkdownFlavor": "markdown-raw_tex+tex_math_single_backslash",

	// Pandoc executable path
	"markdown-preview-enhanced.pandocPath": "pandoc",

	// Preview Theme
	"markdown-preview-enhanced.previewTheme": "github-light.css",

	// Whether to print background for file export or not. If set to `false`, then `github-light` preview theme will be used. You can also set `print_background` in front-matter for individual files.
	"markdown-preview-enhanced.printBackground": false,

	// Accepted protocols for links.
	"markdown-preview-enhanced.protocolsWhiteList": "http://, https://, atom://, file://, mailto:, tel:",

	// Args passed to puppeteer.launch({args: $puppeteerArgs})
	"markdown-preview-enhanced.puppeteerArgs": [],

	// Puppeteer waits for a certain timeout in milliseconds before the document export.
	"markdown-preview-enhanced.puppeteerWaitForTimeout": 0,

	// RevealJS Presentation Theme
	"markdown-preview-enhanced.revealjsTheme": "white.css",

	// Automatic scroll sync. This is now partially supported.
	"markdown-preview-enhanced.scrollSync": true,

	// Qiniu SecretKey
	"markdown-preview-enhanced.SecretKey": "",

	// Open Only One Preview.
	"markdown-preview-enhanced.singlePreview": true,

	// If checked, we use GitHub style piped wiki links, i.e. [[linkText|wikiLink]]. Otherwise, we use [[wikiLink|linkText]] as the original Wikipedia style.
	"markdown-preview-enhanced.useGitHubStylePipedLink": true,

	// Enable this option will render markdown by pandoc instead of markdown-it.
	"markdown-preview-enhanced.usePandocParser": false,

	// If set to true, then locally installed puppeteer-core will be required. Otherwise, the puppeteer globally installed by `npm install -g puppeteer` will be required.
	"markdown-preview-enhanced.usePuppeteerCore": true,

	// By default, the extension for wikilink is `.md`. For example: [[test]] will direct to file path `test.md`.
	"markdown-preview-enhanced.wikiLinkFileExtension": ".md",

	// The linter to use
	"python.linter": "pyLint",

	// Controls the maximum number of problems produced by the server.
	"python.maxNumberOfProblems": 100,

	// The path to CMake generator executable
	"cmake.cmakePath": "cmake",

	// Show the GHCi button.
	"haskelly.buttons.ghci": true,

	// Show the QuickCheck button.
	"haskelly.buttons.quickcheck": true,

	// Show the Run file button.
	"haskelly.buttons.runFile": true,

	// Show the Stack build button.
	"haskelly.buttons.stackBuild": true,

	// Additional parameters passed to stack build command.
	"haskelly.buttons.stackBuildParams": "--fast",

	// Show the Stack run button.
	"haskelly.buttons.stackRun": true,

	// Additional parameters passed to stack run command.
	"haskelly.buttons.stackRunParams": "",

	// Show the Stack test button.
	"haskelly.buttons.stackTest": true,

	// Additional parameters passed to stack test command.
	"haskelly.buttons.stackTestParams": "",

	// Provide code completion.
	"haskelly.codeCompletion": true,

	// Haskelly will reuse the currently opened terminal to run Stack commands.
	"haskelly.exec.reuseTerminal": false,

	// Add your custom snippets following the appropiate syntax.
	"haskelly.snippets.custom": {},

	// Hide code completion suggestion if there's a snippet.
	"haskelly.snippets.important": false,

	// 
	"vsintellicode.features.python.deepLearning": "default",

	// Enable Visual Studio IntelliCode completions for Java
	"vsintellicode.java.completionsEnabled": true,

	// Specifies the folder path where downloaded model files are stored. Defaults to the extension install directory if not specified.
	"vsintellicode.modelDownloadPath": null,

	// Control whether Visual Studio IntelliCode will modify `editor.suggestSelection` if it is set to a value (`recentlyUsed`) that will result in IntelliCode suggested completion items not being visible.
	//  - enabled: Allows IntelliCode to modify the editor.suggestSelection setting on your behalf.
	//  - disabled: You've explicitly opted out of having this configuration controlled by IntelliCode.
	//  - automaticallyOverrodeDefaultValue: (DO NOT SET THIS MANUALLY) IntelliCode will set this to record that configuration has been automatically modified to override a default value.
	//  - choseToUpdateConfiguration: (DO NOT SET THIS MANUALLY) IntelliCode will set this to record that you've chosen to let IntelliCode change the configuration from a value that was explicitly set.
	"vsintellicode.modify.editor.suggestSelection": "enabled",

	// Enable Visual Studio IntelliCode completions for Python
	"vsintellicode.python.completionsEnabled": true,

	// Enable Visual Studio IntelliCode completions for MSSQL
	"vsintellicode.sql.completionsEnabled": true,

	// Enable Visual Studio IntelliCode completions for TypeScript and JavaScript
	"vsintellicode.typescript.completionsEnabled": true,

	// Minimum level of debugger logs that are sent to VS Code.
	"java.debug.logLevel": "warn",

	// The specified console to launch Java program. If you want to customize the console for a specific debug session, please modify the 'console' config in launch.json.
	//  - internalConsole: VS Code debug console (input stream not supported).
	//  - integratedTerminal: VS Code integrated terminal.
	//  - externalTerminal: External terminal that can be configured in user settings.
	"java.debug.settings.console": "integratedTerminal",

	// Enable the run and debug code lens providers over main methods.
	"java.debug.settings.enableRunDebugCodeLens": true,

	// Skip the specified classes when breaking on exception. You could use the built-in variables such as '$JDK' and '$Libraries' to skip a group of classes, or add a specific class name expression, e.g. java.*, *.Foo
	"java.debug.settings.exceptionBreakpoint.skipClasses": [],

	// Force building the workspace before launching java program.
	"java.debug.settings.forceBuildBeforeLaunch": true,

	// Reload the changed Java classes during debugging. Make sure 'java.autobuild.enabled' is not disabled.
	"java.debug.settings.hotCodeReplace": "manual",

	// The maximum number of variables or fields that can be requested in one JDWP request. The higher the value, the less frequently debuggee will be requested when expanding the variable view. Also a large number can cause JDWP request timeout.
	"java.debug.settings.jdwp.limitOfVariablesPerJdwpRequest": 100,

	// The timeout (ms) of JDWP request when the debugger communicates with the target JVM.
	"java.debug.settings.jdwp.requestTimeout": 3000,

	// The maximum length of strings displayed in "Variables" or "Debug Console" viewlet, strings longer than this length will be trimmed, if 0 no trim is performed.
	"java.debug.settings.maxStringLength": 0,

	// The precision when formatting doubles in "Variables" or "Debug Console" viewlet.
	"java.debug.settings.numericPrecision": 0,

	// Force to proceed when build fails
	"java.debug.settings.onBuildFailureProceed": false,

	// Show numbers in hex format in "Variables" viewlet.
	"java.debug.settings.showHex": false,

	// Show the logical structure for the Collection and Map classes in "Variables" viewlet.
	"java.debug.settings.showLogicalStructure": true,

	// Show fully qualified class names in "Variables" viewlet.
	"java.debug.settings.showQualifiedNames": false,

	// Show static variables in "Variables" viewlet.
	"java.debug.settings.showStaticVariables": false,

	// Show 'toString()' value for all classes that override 'toString' method in "Variables" viewlet.
	"java.debug.settings.showToString": true,

	// Skip the specified classes when stepping. You could use the built-in variables such as '$JDK' and '$Libraries' to skip a group of classes, or add a specific class name expression, e.g. java.*, *.Foo
	"java.debug.settings.stepping.skipClasses": [],

	// Skip constructor methods when stepping.
	"java.debug.settings.stepping.skipConstructors": false,

	// Skip static initializer methods when stepping.
	"java.debug.settings.stepping.skipStaticInitializers": false,

	// Skip synthetic methods when stepping.
	"java.debug.settings.stepping.skipSynthetics": false,

	// The default VM arguments to launch the Java program. Eg. Use '-Xmx1G -ea' to increase the heap size to 1GB and enable assertions. If you want to customize the VM arguments for a specific debug session, please modify the 'vmArgs' config in launch.json.
	"java.debug.settings.vmArgs": "",

	// Controls whether notifications can be used to report progress. If true, use status bar to report progress instead.
	"java.silentNotification": false,

	// Synchronize Java Projects explorer with changes
	"java.dependency.autoRefresh": true,

	// Package presentation mode: flat or hierarchical
	"java.dependency.packagePresentation": "flat",

	// The delay time (ms) the auto refresh is invoked when changes are detected
	"java.dependency.refreshDelay": 2000,

	// Show the members in the explorer
	"java.dependency.showMembers": false,

	// Synchronize Java Projects explorer selection with folder explorer
	"java.dependency.syncWithFolderExplorer": true,

	// Specifies the output path of export jar. The default value is `${workspaceFolder}/${workspaceFolderBasename}.jar`. To select the output location manually each time exporting the jar file, simply leave it empty or set it to `askUser`.
	"java.project.exportJar.targetPath": "${workspaceFolder}/${workspaceFolderBasename}.jar",

	// Sets the default view which is presented during the first use.
	//  - auto: Automatically pick the first experience view
	//  - overview: Present the Java Overview page
	//  - gettingStarted: Present the Java Getting Started page
	//  - welcome: Present the Java Welcome page
	//  - none: Do not show any view
	"java.help.firstView": "auto",

	// Show Java Extension Pack release notes on startup.
	"java.help.showReleaseNotes": true,

	// Specify the configurations for running the tests
	"java.test.config": {},

	// Specify the name of the default test configuration
	"java.test.defaultConfig": "",

	// Specify whether to show the Code Lenses in editor or not
	"java.test.editor.enableShortcuts": true,

	// Specify the level of the test logs
	"java.test.log.level": "info",

	// Specify whether the extension will show hint dialog when deprecated configuration file is used
	"java.test.message.hintForDeprecatedConfig": true,

	// Specify whether the extension will show hint to set default test configuration
	"java.test.message.hintForSetingDefaultConfig": true,

	// Specify where to show the test report
	"java.test.report.position": "sideView",

	// Specify if the test report will automatically be shown after execution
	"java.test.report.showAfterExecution": "onFailure",

	// Specifies file path pattern of folders to exclude while searching for Maven projects.
	"maven.excludedFolders": [
		"**/.*",
		"**/node_modules",
		"**/target",
		"**/bin",
		"**/archetype-resources"
	],

	// Specifies default options for all mvn commands.
	"maven.executable.options": "",

	// Specifies absolute path of your 'mvn' executable. When this value is empty, it tries using 'mvn' or 'mvnw' according to the value of 'maven.executable.preferMavenWrapper'.
	"maven.executable.path": "",

	// Specifies whether you prefer to use Maven wrapper. If true, it tries using 'mvnw' by walking up the parent folders. If false, or 'mvnw' is not found, it tries 'mvn' in PATH instead.
	"maven.executable.preferMavenWrapper": "true",

	// Specifies whether to update effective-pom automatically whenever changes detected.
	"maven.pomfile.autoUpdateEffectivePOM": false,

	// Specifies the glob pattern used to look for pom.xml files.
	"maven.pomfile.globPattern": "**/pom.xml",

	// Specifies whether to prefetch effective pom on startup.
	"maven.pomfile.prefetchEffectivePom": false,

	// Specifies the absolute path of your maven configuration file, the default value is ~/.m2/settings.xml
	"maven.settingsFile": null,

	// If this value is true, add a command to create Maven Projects in the Explorer context menu for folders.
	"maven.showInExplorerContextMenu": "true",

	// Specifies an array of environment variable names and values. These environment variable values will be added to the terminal session before Maven is first executed.
	"maven.terminal.customEnv": [],

	// Specify pre-defined favorite commands to execute.
	"maven.terminal.favorites": [],

	// If this value is true, and if the setting java.home has a value, then the environment variable JAVA_HOME will be set to the value of java.home when a new terminal window is created.
	"maven.terminal.useJavaHome": false,

	// Specifies the way of viewing Maven projects.
	"maven.view": "flat",

	// This setting will let you change the default file icon for dark themes.
	"vsicons.associations.fileDefault.file": null,

	// This setting will let you change the default file icon for light themes.
	"vsicons.associations.fileDefault.file_light": null,

	// These custom associations will override the file icon associations defined by default.
	"vsicons.associations.files": [],

	// This setting will let you change the default folder icon for dark themes.
	"vsicons.associations.folderDefault.folder": null,

	// This setting will let you change the default folder icon for light themes.
	"vsicons.associations.folderDefault.folder_light": null,

	// This setting will let you change the default root folder icon for dark themes.
	"vsicons.associations.folderDefault.root_folder": null,

	// This setting will let you change the default root folder icon for light themes.
	"vsicons.associations.folderDefault.root_folder_light": null,

	// These custom associations will override the folder icon associations defined by default.
	"vsicons.associations.folders": [],

	// The physical path to the parent folder where the custom icons folder resides on your local machine.
	"vsicons.customIconFolderPath": "",

	// If set to 'true', when manually changing the configurations, the 'restart' message won't be shown.
	"vsicons.dontShowConfigManuallyChangedMessage": false,

	// If set to 'true', the new version message won't be shown anymore.
	"vsicons.dontShowNewVersionMessage": false,

	// If set to 'true', the extension will match some of the common Angular patterns.
	"vsicons.presets.angular": false,

	// If set to 'true', all folders will have the default folder icon.
	"vsicons.presets.foldersAllDefaultIcon": false,

	// If set to 'true', the extension will hide the folder arrows in the 'Explorer'.
	"vsicons.presets.hideExplorerArrows": false,

	// If set to 'true', all folders will be hidden.
	"vsicons.presets.hideFolders": false,

	// If set to 'true', the extension will use the official JS icon.
	"vsicons.presets.jsOfficial": false,

	// If set to 'true', the extension will use the official JSON icon.
	"vsicons.presets.jsonOfficial": false,

	// If set to 'true', the extension will match some of the common NestJS patterns.
	"vsicons.presets.nestjs": false,

	// If set to 'true', the extension will use the official TS icon.
	"vsicons.presets.tsOfficial": false,

	// If set to 'true', the extension will restart automatically on project detection.
	"vsicons.projectDetection.autoReload": false,

	// If set to 'true', the extension will disable the project detection.
	"vsicons.projectDetection.disableDetect": false,

	// Turn on to highlight changed lines (historical changes will still be saved, for navigation)
	"footsteps.doHighlightChanges": true,

	// Turn off to prevent highlighting the currently focused chunk of edited code.
	"footsteps.doHighlightCurrentlyFocusedChunk": false,

	// The color of the highlighted trail (in rgb format). I'd recommend keeping this subtle - black (`rgb(0, 0, 0)`) if you have a dark theme and white (`rgb(255, 255, 255)`) if you have a light theme.
	"footsteps.highlightColor": "rgb(153, 128, 250)",

	// The maximum opacity for highlighting recently changed lines (0 - 1)
	"footsteps.highlightColorMaxOpacity": 0.4,

	// The number of changes to highlight with the background color.
	"footsteps.maxNumberOfChangesToHighlight": 6,

	// The number of changes to save in history for using your keybindings to navigate between.
	"footsteps.maxNumberOfChangesToRemember": 10,

	// Whether to exclude files from auto-completion using VS Code's `search.exclude` setting. (`node_modules`, `bower_components` and `*.code-search` are **always excluded**, not affected by this option.)
	"markdown.extension.completion.respectVscodeSearchExclude": true,

	// The root folder for path auto-completion.
	"markdown.extension.completion.root": "",

	// Use `*` or `_` to wrap italic text.
	"markdown.extension.italic.indicator": "*",

	// User-defined KaTeX macros.
	"markdown.extension.katex.macros": {},

	// List indentation scheme. (Also affects TOC generation.)
	// 
	// Whether to use different indentation sizes on different list contexts or stick to VS Code's tab size.
	//  - adaptive: Adaptive indentation size according to the context, trying to **left align the sublist with its parent's content**. For example:
	// 
	// ```markdown
	// - Parent
	//   - Sublist
	// 
	// 1. Parent
	//    1. Sublist
	// 
	// 10. Parent with longer marker
	//     1. Sublist
	// ```
	//  - inherit: Use the configured tab size of the current document (see the status bar). For example (with `tabSize: 4`):
	// 
	// ```markdown
	// - Parent
	//     - Sublist
	// 
	// 1. Parent
	//     1. Sublist
	// 
	// 10. Parent with longer marker
	//     1. Sublist
	// ```
	"markdown.extension.list.indentationSize": "adaptive",

	// Enable basic math support (Powered by KaTeX).
	"markdown.extension.math.enabled": true,

	// Auto fix ordered list markers.
	"markdown.extension.orderedList.autoRenumber": true,

	// Ordered list marker.
	//  - one: Always use `1.` as ordered list marker.
	//  - ordered: Use increasing numbers as ordered list marker.
	"markdown.extension.orderedList.marker": "ordered",

	// Auto show preview to side.
	"markdown.extension.preview.autoShowPreviewToSide": false,

	// Convert image path to absolute path.
	"markdown.extension.print.absoluteImgPath": true,

	// Convert images to base64 when printing to HTML.
	"markdown.extension.print.imgToBase64": false,

	// Include VS Code's basic Markdown styles so that the exported HTML looks similar as inside VS Code.
	"markdown.extension.print.includeVscodeStylesheets": true,

	// Print current document to HTML when file is saved.
	"markdown.extension.print.onFileSave": false,

	// Theme of the exported HTML. Only affects code blocks.
	"markdown.extension.print.theme": "light",

	// Enable/disable URL validation when printing.
	"markdown.extension.print.validateUrls": true,

	// If a file is larger than this size (in byte/B), we won't attempt to render syntax decorations.
	"markdown.extension.syntax.decorationFileSizeLimit": 50000,

	// Add syntax decorations in editors. (e.g. ~~strikethrough~~, `code span`)
	"markdown.extension.syntax.decorations": true,

	// (**Experimental**) Report issue at <https://github.com/yzhang-gh/vscode-markdown/issues/185>.
	// 
	// Only take effect when `markdown.extension.syntax.decorations` is enabled.
	"markdown.extension.syntax.plainTheme": false,

	// Enable [GitHub Flavored Markdown](https://github.github.com/gfm/) table formatter.
	"markdown.extension.tableFormatter.enabled": true,

	// Normalize table indentation to closest multiple of configured editor tab size.
	"markdown.extension.tableFormatter.normalizeIndentation": false,

	// Whether to **force** to downcase TOC links.
	"markdown.extension.toc.downcaseLink": true,

	// Range of levels for table of contents. Use `x..y` for level `x` to `y`.
	"markdown.extension.toc.levels": "1..6",

	// Lists of headings to omit by project file.
	// Example:
	// { "README.md": ["# Introduction"] }
	"markdown.extension.toc.omittedFromToc": {},

	// Use ordered list, that is:
	// 1. ...
	// 2. ...
	"markdown.extension.toc.orderedList": false,

	// Just plain text TOC, no links.
	"markdown.extension.toc.plaintext": false,

	// The method to generate heading ID. This affects **links to headings** in **TOC**, **code completion**, and **printing**.
	//  - github: GitHub
	//  - azureDevops: Azure DevOps
	//  - gitea: Gitea
	//  - gitlab: GitLab
	//  - vscode: Visual Studio Code
	"markdown.extension.toc.slugifyMode": "github",

	// Use `-`, `*`, or `+` in the table of contents (for **unordered** list).
	"markdown.extension.toc.unorderedList.marker": "-",

	// Auto update TOC on save.
	"markdown.extension.toc.updateOnSave": true,

}